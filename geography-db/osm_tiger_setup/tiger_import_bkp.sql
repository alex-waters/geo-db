--
-- PostgreSQL database dump
--

-- Dumped from database version 11.5
-- Dumped by pg_dump version 12.1

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: hstore; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS hstore WITH SCHEMA public;


--
-- Name: EXTENSION hstore; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION hstore IS 'data type for storing sets of (key, value) pairs';


--
-- Name: postgis; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS postgis WITH SCHEMA public;


--
-- Name: EXTENSION postgis; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION postgis IS 'PostGIS geometry, geography, and raster spatial types and functions';


--
-- Name: addressline; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE public.addressline AS (
	place_id bigint,
	osm_type character(1),
	osm_id bigint,
	name public.hstore,
	class text,
	type text,
	admin_level integer,
	fromarea boolean,
	isaddress boolean,
	rank_address integer,
	distance double precision
);


ALTER TYPE public.addressline OWNER TO postgres;

--
-- Name: nearfeature; Type: TYPE; Schema: public; Owner: nominatim
--

CREATE TYPE public.nearfeature AS (
	place_id bigint,
	keywords integer[],
	rank_address smallint,
	rank_search smallint,
	distance double precision,
	isguess boolean
);


ALTER TYPE public.nearfeature OWNER TO nominatim;

--
-- Name: nearfeaturecentr; Type: TYPE; Schema: public; Owner: nominatim
--

CREATE TYPE public.nearfeaturecentr AS (
	place_id bigint,
	keywords integer[],
	rank_address smallint,
	rank_search smallint,
	distance double precision,
	isguess boolean,
	postcode text,
	centroid public.geometry
);


ALTER TYPE public.nearfeaturecentr OWNER TO nominatim;

--
-- Name: nearplace; Type: TYPE; Schema: public; Owner: nominatim
--

CREATE TYPE public.nearplace AS (
	place_id bigint
);


ALTER TYPE public.nearplace OWNER TO nominatim;

--
-- Name: wikipedia_article_match; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE public.wikipedia_article_match AS (
	language text,
	title text,
	importance double precision
);


ALTER TYPE public.wikipedia_article_match OWNER TO postgres;

--
-- Name: add_location(bigint, character varying, integer, integer[], integer, integer, text, public.geometry); Type: FUNCTION; Schema: public; Owner: nominatim
--

CREATE FUNCTION public.add_location(place_id bigint, country_code character varying, partition integer, keywords integer[], rank_search integer, rank_address integer, in_postcode text, geometry public.geometry) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
  locationid INTEGER;
  centroid GEOMETRY;
  diameter FLOAT;
  x BOOLEAN;
  splitGeom RECORD;
  secgeo GEOMETRY;
  postcode TEXT;
BEGIN

  IF rank_search > 25 THEN
    RAISE EXCEPTION 'Adding location with rank > 25 (% rank %)', place_id, rank_search;
  END IF;

  x := deleteLocationArea(partition, place_id, rank_search);

  -- add postcode only if it contains a single entry, i.e. ignore postcode lists
  postcode := NULL;
  IF in_postcode is not null AND in_postcode not similar to '%(,|;)%' THEN
      postcode := upper(trim (in_postcode));
  END IF;

  IF ST_GeometryType(geometry) in ('ST_Polygon','ST_MultiPolygon') THEN
    centroid := ST_Centroid(geometry);

    FOR secgeo IN select split_geometry(geometry) AS geom LOOP
      x := insertLocationAreaLarge(partition, place_id, country_code, keywords, rank_search, rank_address, false, postcode, centroid, secgeo);
    END LOOP;

  ELSE

    diameter := 0.02;
    IF rank_address = 0 THEN
      diameter := 0.02;
    ELSEIF rank_search <= 14 THEN
      diameter := 1.2;
    ELSEIF rank_search <= 15 THEN
      diameter := 1;
    ELSEIF rank_search <= 16 THEN
      diameter := 0.5;
    ELSEIF rank_search <= 17 THEN
      diameter := 0.2;
    ELSEIF rank_search <= 21 THEN
      diameter := 0.05;
    ELSEIF rank_search = 25 THEN
      diameter := 0.005;
    END IF;

--    RAISE WARNING 'adding % diameter %', place_id, diameter;

    secgeo := ST_Buffer(geometry, diameter);
    x := insertLocationAreaLarge(partition, place_id, country_code, keywords, rank_search, rank_address, true, postcode, ST_Centroid(geometry), secgeo);

  END IF;

  RETURN true;
END;
$$;


ALTER FUNCTION public.add_location(place_id bigint, country_code character varying, partition integer, keywords integer[], rank_search integer, rank_address integer, in_postcode text, geometry public.geometry) OWNER TO nominatim;

--
-- Name: array_merge(integer[], integer[]); Type: FUNCTION; Schema: public; Owner: nominatim
--

CREATE FUNCTION public.array_merge(a integer[], b integer[]) RETURNS integer[]
    LANGUAGE plpgsql IMMUTABLE
    AS $$
DECLARE
  i INTEGER;
  r INTEGER[];
BEGIN
  IF array_upper(a, 1) IS NULL THEN
    RETURN b;
  END IF;
  IF array_upper(b, 1) IS NULL THEN
    RETURN a;
  END IF;
  r := a;
  FOR i IN 1..array_upper(b, 1) LOOP  
    IF NOT (ARRAY[b[i]] <@ r) THEN
      r := r || b[i];
    END IF;
  END LOOP;
  RETURN r;
END;
$$;


ALTER FUNCTION public.array_merge(a integer[], b integer[]) OWNER TO nominatim;

--
-- Name: aux_create_property(public.geometry, text, text, text, text, character); Type: FUNCTION; Schema: public; Owner: nominatim
--

CREATE FUNCTION public.aux_create_property(pointgeo public.geometry, in_housenumber text, in_street text, in_isin text, in_postcode text, in_countrycode character) RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE

  newpoints INTEGER;
  place_centroid GEOMETRY;
  out_partition INTEGER;
  out_parent_place_id BIGINT;
  location RECORD;
  address_street_word_id INTEGER;  
  out_postcode TEXT;

BEGIN

  place_centroid := ST_Centroid(pointgeo);
  out_partition := get_partition(in_countrycode);
  out_parent_place_id := null;

  address_street_word_id := get_name_id(make_standard_name(in_street));
  IF address_street_word_id IS NOT NULL THEN
    FOR location IN SELECT * from getNearestNamedRoadFeature(out_partition, place_centroid, address_street_word_id) LOOP
      out_parent_place_id := location.place_id;
    END LOOP;
  END IF;

  IF out_parent_place_id IS NULL THEN
    FOR location IN SELECT place_id FROM getNearestRoadFeature(out_partition, place_centroid) LOOP
      out_parent_place_id := location.place_id;
    END LOOP;
  END IF;

  out_postcode := in_postcode;
  IF out_postcode IS NULL THEN
    SELECT postcode from placex where place_id = out_parent_place_id INTO out_postcode;
  END IF;
  -- XXX look into postcode table

  newpoints := 0;
  insert into location_property_aux (place_id, partition, parent_place_id, housenumber, postcode, centroid)
    values (nextval('seq_place'), out_partition, out_parent_place_id, in_housenumber, out_postcode, place_centroid);
  newpoints := newpoints + 1;

  RETURN newpoints;
END;
$$;


ALTER FUNCTION public.aux_create_property(pointgeo public.geometry, in_housenumber text, in_street text, in_isin text, in_postcode text, in_countrycode character) OWNER TO nominatim;

--
-- Name: catch_decode_url_part(character varying); Type: FUNCTION; Schema: public; Owner: nominatim
--

CREATE FUNCTION public.catch_decode_url_part(p character varying) RETURNS character varying
    LANGUAGE plpgsql IMMUTABLE
    AS $$
DECLARE
BEGIN
  RETURN decode_url_part(p);
EXCEPTION
  WHEN others THEN return null;
END;
$$;


ALTER FUNCTION public.catch_decode_url_part(p character varying) OWNER TO nominatim;

--
-- Name: create_country(public.hstore, character varying); Type: FUNCTION; Schema: public; Owner: nominatim
--

CREATE FUNCTION public.create_country(src public.hstore, lookup_country_code character varying) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
  s TEXT;
  w INTEGER;
  words TEXT[];
  item RECORD;
  j INTEGER;
BEGIN
  FOR item IN SELECT (each(src)).* LOOP

    s := make_standard_name(item.value);
    w := getorcreate_country(s, lookup_country_code);

    words := regexp_split_to_array(item.value, E'[,;()]');
    IF array_upper(words, 1) != 1 THEN
      FOR j IN 1..array_upper(words, 1) LOOP
        s := make_standard_name(words[j]);
        IF s != '' THEN
          w := getorcreate_country(s, lookup_country_code);
        END IF;
      END LOOP;
    END IF;
  END LOOP;
END;
$$;


ALTER FUNCTION public.create_country(src public.hstore, lookup_country_code character varying) OWNER TO nominatim;

--
-- Name: decode_url_part(character varying); Type: FUNCTION; Schema: public; Owner: nominatim
--

CREATE FUNCTION public.decode_url_part(p character varying) RETURNS character varying
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
SELECT convert_from(CAST(E'\\x' || array_to_string(ARRAY(
    SELECT CASE WHEN length(r.m[1]) = 1 THEN encode(convert_to(r.m[1], 'SQL_ASCII'), 'hex') ELSE substring(r.m[1] from 2 for 2) END
    FROM regexp_matches($1, '%[0-9a-f][0-9a-f]|.', 'gi') AS r(m)
), '') AS bytea), 'UTF8');
$_$;


ALTER FUNCTION public.decode_url_part(p character varying) OWNER TO nominatim;

--
-- Name: delete_location(bigint); Type: FUNCTION; Schema: public; Owner: nominatim
--

CREATE FUNCTION public.delete_location(old_place_id bigint) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
BEGIN
  DELETE FROM location_area where place_id = OLD_place_id;
-- TODO:location_area
  RETURN true;
END;
$$;


ALTER FUNCTION public.delete_location(old_place_id bigint) OWNER TO nominatim;

--
-- Name: deletelocationarea(integer, bigint, integer); Type: FUNCTION; Schema: public; Owner: nominatim
--

CREATE FUNCTION public.deletelocationarea(in_partition integer, in_place_id bigint, in_rank_search integer) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
BEGIN

  IF in_rank_search <= 4 THEN
    DELETE from location_area_country WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;


  IF in_partition = 116 THEN
    DELETE from location_area_large_116 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 87 THEN
    DELETE from location_area_large_87 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 184 THEN
    DELETE from location_area_large_184 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 51 THEN
    DELETE from location_area_large_51 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 70 THEN
    DELETE from location_area_large_70 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 190 THEN
    DELETE from location_area_large_190 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 176 THEN
    DELETE from location_area_large_176 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 169 THEN
    DELETE from location_area_large_169 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 92 THEN
    DELETE from location_area_large_92 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 180 THEN
    DELETE from location_area_large_180 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 236 THEN
    DELETE from location_area_large_236 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 22 THEN
    DELETE from location_area_large_22 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 156 THEN
    DELETE from location_area_large_156 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 197 THEN
    DELETE from location_area_large_197 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 135 THEN
    DELETE from location_area_large_135 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 227 THEN
    DELETE from location_area_large_227 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 149 THEN
    DELETE from location_area_large_149 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 173 THEN
    DELETE from location_area_large_173 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 73 THEN
    DELETE from location_area_large_73 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 103 THEN
    DELETE from location_area_large_103 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 42 THEN
    DELETE from location_area_large_42 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 189 THEN
    DELETE from location_area_large_189 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 117 THEN
    DELETE from location_area_large_117 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 121 THEN
    DELETE from location_area_large_121 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 239 THEN
    DELETE from location_area_large_239 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 161 THEN
    DELETE from location_area_large_161 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 88 THEN
    DELETE from location_area_large_88 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 188 THEN
    DELETE from location_area_large_188 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 125 THEN
    DELETE from location_area_large_125 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 113 THEN
    DELETE from location_area_large_113 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 40 THEN
    DELETE from location_area_large_40 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 240 THEN
    DELETE from location_area_large_240 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 43 THEN
    DELETE from location_area_large_43 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 120 THEN
    DELETE from location_area_large_120 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 196 THEN
    DELETE from location_area_large_196 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 15 THEN
    DELETE from location_area_large_15 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 226 THEN
    DELETE from location_area_large_226 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 210 THEN
    DELETE from location_area_large_210 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 48 THEN
    DELETE from location_area_large_48 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 187 THEN
    DELETE from location_area_large_187 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 57 THEN
    DELETE from location_area_large_57 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 61 THEN
    DELETE from location_area_large_61 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 81 THEN
    DELETE from location_area_large_81 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 19 THEN
    DELETE from location_area_large_19 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 160 THEN
    DELETE from location_area_large_160 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 244 THEN
    DELETE from location_area_large_244 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 242 THEN
    DELETE from location_area_large_242 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 204 THEN
    DELETE from location_area_large_204 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 104 THEN
    DELETE from location_area_large_104 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 5 THEN
    DELETE from location_area_large_5 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 171 THEN
    DELETE from location_area_large_171 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 91 THEN
    DELETE from location_area_large_91 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 29 THEN
    DELETE from location_area_large_29 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 179 THEN
    DELETE from location_area_large_179 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 54 THEN
    DELETE from location_area_large_54 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 4 THEN
    DELETE from location_area_large_4 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 181 THEN
    DELETE from location_area_large_181 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 96 THEN
    DELETE from location_area_large_96 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 201 THEN
    DELETE from location_area_large_201 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 10 THEN
    DELETE from location_area_large_10 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 35 THEN
    DELETE from location_area_large_35 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 105 THEN
    DELETE from location_area_large_105 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 107 THEN
    DELETE from location_area_large_107 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 6 THEN
    DELETE from location_area_large_6 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 233 THEN
    DELETE from location_area_large_233 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 86 THEN
    DELETE from location_area_large_86 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 220 THEN
    DELETE from location_area_large_220 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 89 THEN
    DELETE from location_area_large_89 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 93 THEN
    DELETE from location_area_large_93 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 219 THEN
    DELETE from location_area_large_219 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 175 THEN
    DELETE from location_area_large_175 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 241 THEN
    DELETE from location_area_large_241 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 31 THEN
    DELETE from location_area_large_31 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 50 THEN
    DELETE from location_area_large_50 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 14 THEN
    DELETE from location_area_large_14 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 231 THEN
    DELETE from location_area_large_231 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 66 THEN
    DELETE from location_area_large_66 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 109 THEN
    DELETE from location_area_large_109 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 155 THEN
    DELETE from location_area_large_155 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 13 THEN
    DELETE from location_area_large_13 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 133 THEN
    DELETE from location_area_large_133 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 195 THEN
    DELETE from location_area_large_195 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 2 THEN
    DELETE from location_area_large_2 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 199 THEN
    DELETE from location_area_large_199 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 75 THEN
    DELETE from location_area_large_75 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 246 THEN
    DELETE from location_area_large_246 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 128 THEN
    DELETE from location_area_large_128 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 166 THEN
    DELETE from location_area_large_166 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 243 THEN
    DELETE from location_area_large_243 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 142 THEN
    DELETE from location_area_large_142 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 152 THEN
    DELETE from location_area_large_152 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 230 THEN
    DELETE from location_area_large_230 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 7 THEN
    DELETE from location_area_large_7 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 222 THEN
    DELETE from location_area_large_222 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 38 THEN
    DELETE from location_area_large_38 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 193 THEN
    DELETE from location_area_large_193 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 164 THEN
    DELETE from location_area_large_164 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 78 THEN
    DELETE from location_area_large_78 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 217 THEN
    DELETE from location_area_large_217 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 159 THEN
    DELETE from location_area_large_159 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 250 THEN
    DELETE from location_area_large_250 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 186 THEN
    DELETE from location_area_large_186 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 47 THEN
    DELETE from location_area_large_47 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 177 THEN
    DELETE from location_area_large_177 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 20 THEN
    DELETE from location_area_large_20 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 182 THEN
    DELETE from location_area_large_182 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 1 THEN
    DELETE from location_area_large_1 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 76 THEN
    DELETE from location_area_large_76 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 106 THEN
    DELETE from location_area_large_106 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 18 THEN
    DELETE from location_area_large_18 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 110 THEN
    DELETE from location_area_large_110 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 178 THEN
    DELETE from location_area_large_178 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 145 THEN
    DELETE from location_area_large_145 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 129 THEN
    DELETE from location_area_large_129 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 27 THEN
    DELETE from location_area_large_27 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 143 THEN
    DELETE from location_area_large_143 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 203 THEN
    DELETE from location_area_large_203 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 58 THEN
    DELETE from location_area_large_58 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 8 THEN
    DELETE from location_area_large_8 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 228 THEN
    DELETE from location_area_large_228 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 71 THEN
    DELETE from location_area_large_71 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 229 THEN
    DELETE from location_area_large_229 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 68 THEN
    DELETE from location_area_large_68 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 52 THEN
    DELETE from location_area_large_52 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 80 THEN
    DELETE from location_area_large_80 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 146 THEN
    DELETE from location_area_large_146 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 162 THEN
    DELETE from location_area_large_162 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 132 THEN
    DELETE from location_area_large_132 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 84 THEN
    DELETE from location_area_large_84 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 170 THEN
    DELETE from location_area_large_170 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 192 THEN
    DELETE from location_area_large_192 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 237 THEN
    DELETE from location_area_large_237 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 101 THEN
    DELETE from location_area_large_101 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 69 THEN
    DELETE from location_area_large_69 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 115 THEN
    DELETE from location_area_large_115 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 114 THEN
    DELETE from location_area_large_114 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 60 THEN
    DELETE from location_area_large_60 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 97 THEN
    DELETE from location_area_large_97 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 238 THEN
    DELETE from location_area_large_238 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 108 THEN
    DELETE from location_area_large_108 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 112 THEN
    DELETE from location_area_large_112 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 59 THEN
    DELETE from location_area_large_59 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 65 THEN
    DELETE from location_area_large_65 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 127 THEN
    DELETE from location_area_large_127 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 124 THEN
    DELETE from location_area_large_124 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 98 THEN
    DELETE from location_area_large_98 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 200 THEN
    DELETE from location_area_large_200 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 11 THEN
    DELETE from location_area_large_11 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 44 THEN
    DELETE from location_area_large_44 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 235 THEN
    DELETE from location_area_large_235 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 82 THEN
    DELETE from location_area_large_82 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 119 THEN
    DELETE from location_area_large_119 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 153 THEN
    DELETE from location_area_large_153 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 147 THEN
    DELETE from location_area_large_147 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 214 THEN
    DELETE from location_area_large_214 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 9 THEN
    DELETE from location_area_large_9 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 202 THEN
    DELETE from location_area_large_202 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 79 THEN
    DELETE from location_area_large_79 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 26 THEN
    DELETE from location_area_large_26 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 85 THEN
    DELETE from location_area_large_85 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 72 THEN
    DELETE from location_area_large_72 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 95 THEN
    DELETE from location_area_large_95 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 232 THEN
    DELETE from location_area_large_232 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 77 THEN
    DELETE from location_area_large_77 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 172 THEN
    DELETE from location_area_large_172 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 30 THEN
    DELETE from location_area_large_30 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 21 THEN
    DELETE from location_area_large_21 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 131 THEN
    DELETE from location_area_large_131 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 3 THEN
    DELETE from location_area_large_3 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 17 THEN
    DELETE from location_area_large_17 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 198 THEN
    DELETE from location_area_large_198 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 37 THEN
    DELETE from location_area_large_37 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 212 THEN
    DELETE from location_area_large_212 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 28 THEN
    DELETE from location_area_large_28 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 249 THEN
    DELETE from location_area_large_249 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 165 THEN
    DELETE from location_area_large_165 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 56 THEN
    DELETE from location_area_large_56 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 151 THEN
    DELETE from location_area_large_151 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 209 THEN
    DELETE from location_area_large_209 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 74 THEN
    DELETE from location_area_large_74 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 138 THEN
    DELETE from location_area_large_138 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 225 THEN
    DELETE from location_area_large_225 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 34 THEN
    DELETE from location_area_large_34 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 245 THEN
    DELETE from location_area_large_245 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 205 THEN
    DELETE from location_area_large_205 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 67 THEN
    DELETE from location_area_large_67 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 83 THEN
    DELETE from location_area_large_83 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 63 THEN
    DELETE from location_area_large_63 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 90 THEN
    DELETE from location_area_large_90 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 45 THEN
    DELETE from location_area_large_45 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 216 THEN
    DELETE from location_area_large_216 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 174 THEN
    DELETE from location_area_large_174 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 213 THEN
    DELETE from location_area_large_213 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 134 THEN
    DELETE from location_area_large_134 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 144 THEN
    DELETE from location_area_large_144 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 39 THEN
    DELETE from location_area_large_39 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 168 THEN
    DELETE from location_area_large_168 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 163 THEN
    DELETE from location_area_large_163 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 223 THEN
    DELETE from location_area_large_223 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 36 THEN
    DELETE from location_area_large_36 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 221 THEN
    DELETE from location_area_large_221 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 102 THEN
    DELETE from location_area_large_102 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 167 THEN
    DELETE from location_area_large_167 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 158 THEN
    DELETE from location_area_large_158 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 118 THEN
    DELETE from location_area_large_118 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 111 THEN
    DELETE from location_area_large_111 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 16 THEN
    DELETE from location_area_large_16 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 207 THEN
    DELETE from location_area_large_207 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 62 THEN
    DELETE from location_area_large_62 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 123 THEN
    DELETE from location_area_large_123 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 126 THEN
    DELETE from location_area_large_126 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 194 THEN
    DELETE from location_area_large_194 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 99 THEN
    DELETE from location_area_large_99 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 41 THEN
    DELETE from location_area_large_41 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 206 THEN
    DELETE from location_area_large_206 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 46 THEN
    DELETE from location_area_large_46 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 224 THEN
    DELETE from location_area_large_224 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 157 THEN
    DELETE from location_area_large_157 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 53 THEN
    DELETE from location_area_large_53 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 32 THEN
    DELETE from location_area_large_32 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 247 THEN
    DELETE from location_area_large_247 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 183 THEN
    DELETE from location_area_large_183 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 100 THEN
    DELETE from location_area_large_100 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 136 THEN
    DELETE from location_area_large_136 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 150 THEN
    DELETE from location_area_large_150 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 139 THEN
    DELETE from location_area_large_139 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 140 THEN
    DELETE from location_area_large_140 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 12 THEN
    DELETE from location_area_large_12 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 248 THEN
    DELETE from location_area_large_248 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 137 THEN
    DELETE from location_area_large_137 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 208 THEN
    DELETE from location_area_large_208 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 24 THEN
    DELETE from location_area_large_24 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 191 THEN
    DELETE from location_area_large_191 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 25 THEN
    DELETE from location_area_large_25 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 141 THEN
    DELETE from location_area_large_141 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 122 THEN
    DELETE from location_area_large_122 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 94 THEN
    DELETE from location_area_large_94 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 218 THEN
    DELETE from location_area_large_218 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 154 THEN
    DELETE from location_area_large_154 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 234 THEN
    DELETE from location_area_large_234 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 49 THEN
    DELETE from location_area_large_49 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 211 THEN
    DELETE from location_area_large_211 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 33 THEN
    DELETE from location_area_large_33 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 64 THEN
    DELETE from location_area_large_64 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 185 THEN
    DELETE from location_area_large_185 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 215 THEN
    DELETE from location_area_large_215 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 55 THEN
    DELETE from location_area_large_55 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 148 THEN
    DELETE from location_area_large_148 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 130 THEN
    DELETE from location_area_large_130 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 23 THEN
    DELETE from location_area_large_23 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 0 THEN
    DELETE from location_area_large_0 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;


  RAISE EXCEPTION 'Unknown partition %', in_partition;

  RETURN FALSE;
END
$$;


ALTER FUNCTION public.deletelocationarea(in_partition integer, in_place_id bigint, in_rank_search integer) OWNER TO nominatim;

--
-- Name: deleteroad(integer, bigint); Type: FUNCTION; Schema: public; Owner: nominatim
--

CREATE FUNCTION public.deleteroad(in_partition integer, in_place_id bigint) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
BEGIN


  IF in_partition = 116 THEN
    DELETE FROM location_road_116 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 87 THEN
    DELETE FROM location_road_87 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 184 THEN
    DELETE FROM location_road_184 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 51 THEN
    DELETE FROM location_road_51 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 70 THEN
    DELETE FROM location_road_70 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 190 THEN
    DELETE FROM location_road_190 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 176 THEN
    DELETE FROM location_road_176 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 169 THEN
    DELETE FROM location_road_169 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 92 THEN
    DELETE FROM location_road_92 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 180 THEN
    DELETE FROM location_road_180 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 236 THEN
    DELETE FROM location_road_236 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 22 THEN
    DELETE FROM location_road_22 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 156 THEN
    DELETE FROM location_road_156 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 197 THEN
    DELETE FROM location_road_197 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 135 THEN
    DELETE FROM location_road_135 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 227 THEN
    DELETE FROM location_road_227 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 149 THEN
    DELETE FROM location_road_149 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 173 THEN
    DELETE FROM location_road_173 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 73 THEN
    DELETE FROM location_road_73 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 103 THEN
    DELETE FROM location_road_103 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 42 THEN
    DELETE FROM location_road_42 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 189 THEN
    DELETE FROM location_road_189 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 117 THEN
    DELETE FROM location_road_117 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 121 THEN
    DELETE FROM location_road_121 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 239 THEN
    DELETE FROM location_road_239 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 161 THEN
    DELETE FROM location_road_161 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 88 THEN
    DELETE FROM location_road_88 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 188 THEN
    DELETE FROM location_road_188 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 125 THEN
    DELETE FROM location_road_125 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 113 THEN
    DELETE FROM location_road_113 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 40 THEN
    DELETE FROM location_road_40 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 240 THEN
    DELETE FROM location_road_240 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 43 THEN
    DELETE FROM location_road_43 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 120 THEN
    DELETE FROM location_road_120 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 196 THEN
    DELETE FROM location_road_196 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 15 THEN
    DELETE FROM location_road_15 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 226 THEN
    DELETE FROM location_road_226 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 210 THEN
    DELETE FROM location_road_210 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 48 THEN
    DELETE FROM location_road_48 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 187 THEN
    DELETE FROM location_road_187 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 57 THEN
    DELETE FROM location_road_57 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 61 THEN
    DELETE FROM location_road_61 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 81 THEN
    DELETE FROM location_road_81 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 19 THEN
    DELETE FROM location_road_19 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 160 THEN
    DELETE FROM location_road_160 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 244 THEN
    DELETE FROM location_road_244 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 242 THEN
    DELETE FROM location_road_242 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 204 THEN
    DELETE FROM location_road_204 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 104 THEN
    DELETE FROM location_road_104 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 5 THEN
    DELETE FROM location_road_5 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 171 THEN
    DELETE FROM location_road_171 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 91 THEN
    DELETE FROM location_road_91 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 29 THEN
    DELETE FROM location_road_29 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 179 THEN
    DELETE FROM location_road_179 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 54 THEN
    DELETE FROM location_road_54 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 4 THEN
    DELETE FROM location_road_4 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 181 THEN
    DELETE FROM location_road_181 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 96 THEN
    DELETE FROM location_road_96 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 201 THEN
    DELETE FROM location_road_201 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 10 THEN
    DELETE FROM location_road_10 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 35 THEN
    DELETE FROM location_road_35 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 105 THEN
    DELETE FROM location_road_105 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 107 THEN
    DELETE FROM location_road_107 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 6 THEN
    DELETE FROM location_road_6 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 233 THEN
    DELETE FROM location_road_233 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 86 THEN
    DELETE FROM location_road_86 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 220 THEN
    DELETE FROM location_road_220 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 89 THEN
    DELETE FROM location_road_89 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 93 THEN
    DELETE FROM location_road_93 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 219 THEN
    DELETE FROM location_road_219 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 175 THEN
    DELETE FROM location_road_175 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 241 THEN
    DELETE FROM location_road_241 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 31 THEN
    DELETE FROM location_road_31 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 50 THEN
    DELETE FROM location_road_50 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 14 THEN
    DELETE FROM location_road_14 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 231 THEN
    DELETE FROM location_road_231 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 66 THEN
    DELETE FROM location_road_66 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 109 THEN
    DELETE FROM location_road_109 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 155 THEN
    DELETE FROM location_road_155 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 13 THEN
    DELETE FROM location_road_13 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 133 THEN
    DELETE FROM location_road_133 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 195 THEN
    DELETE FROM location_road_195 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 2 THEN
    DELETE FROM location_road_2 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 199 THEN
    DELETE FROM location_road_199 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 75 THEN
    DELETE FROM location_road_75 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 246 THEN
    DELETE FROM location_road_246 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 128 THEN
    DELETE FROM location_road_128 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 166 THEN
    DELETE FROM location_road_166 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 243 THEN
    DELETE FROM location_road_243 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 142 THEN
    DELETE FROM location_road_142 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 152 THEN
    DELETE FROM location_road_152 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 230 THEN
    DELETE FROM location_road_230 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 7 THEN
    DELETE FROM location_road_7 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 222 THEN
    DELETE FROM location_road_222 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 38 THEN
    DELETE FROM location_road_38 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 193 THEN
    DELETE FROM location_road_193 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 164 THEN
    DELETE FROM location_road_164 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 78 THEN
    DELETE FROM location_road_78 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 217 THEN
    DELETE FROM location_road_217 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 159 THEN
    DELETE FROM location_road_159 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 250 THEN
    DELETE FROM location_road_250 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 186 THEN
    DELETE FROM location_road_186 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 47 THEN
    DELETE FROM location_road_47 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 177 THEN
    DELETE FROM location_road_177 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 20 THEN
    DELETE FROM location_road_20 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 182 THEN
    DELETE FROM location_road_182 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 1 THEN
    DELETE FROM location_road_1 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 76 THEN
    DELETE FROM location_road_76 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 106 THEN
    DELETE FROM location_road_106 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 18 THEN
    DELETE FROM location_road_18 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 110 THEN
    DELETE FROM location_road_110 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 178 THEN
    DELETE FROM location_road_178 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 145 THEN
    DELETE FROM location_road_145 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 129 THEN
    DELETE FROM location_road_129 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 27 THEN
    DELETE FROM location_road_27 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 143 THEN
    DELETE FROM location_road_143 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 203 THEN
    DELETE FROM location_road_203 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 58 THEN
    DELETE FROM location_road_58 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 8 THEN
    DELETE FROM location_road_8 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 228 THEN
    DELETE FROM location_road_228 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 71 THEN
    DELETE FROM location_road_71 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 229 THEN
    DELETE FROM location_road_229 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 68 THEN
    DELETE FROM location_road_68 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 52 THEN
    DELETE FROM location_road_52 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 80 THEN
    DELETE FROM location_road_80 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 146 THEN
    DELETE FROM location_road_146 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 162 THEN
    DELETE FROM location_road_162 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 132 THEN
    DELETE FROM location_road_132 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 84 THEN
    DELETE FROM location_road_84 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 170 THEN
    DELETE FROM location_road_170 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 192 THEN
    DELETE FROM location_road_192 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 237 THEN
    DELETE FROM location_road_237 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 101 THEN
    DELETE FROM location_road_101 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 69 THEN
    DELETE FROM location_road_69 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 115 THEN
    DELETE FROM location_road_115 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 114 THEN
    DELETE FROM location_road_114 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 60 THEN
    DELETE FROM location_road_60 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 97 THEN
    DELETE FROM location_road_97 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 238 THEN
    DELETE FROM location_road_238 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 108 THEN
    DELETE FROM location_road_108 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 112 THEN
    DELETE FROM location_road_112 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 59 THEN
    DELETE FROM location_road_59 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 65 THEN
    DELETE FROM location_road_65 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 127 THEN
    DELETE FROM location_road_127 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 124 THEN
    DELETE FROM location_road_124 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 98 THEN
    DELETE FROM location_road_98 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 200 THEN
    DELETE FROM location_road_200 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 11 THEN
    DELETE FROM location_road_11 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 44 THEN
    DELETE FROM location_road_44 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 235 THEN
    DELETE FROM location_road_235 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 82 THEN
    DELETE FROM location_road_82 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 119 THEN
    DELETE FROM location_road_119 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 153 THEN
    DELETE FROM location_road_153 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 147 THEN
    DELETE FROM location_road_147 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 214 THEN
    DELETE FROM location_road_214 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 9 THEN
    DELETE FROM location_road_9 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 202 THEN
    DELETE FROM location_road_202 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 79 THEN
    DELETE FROM location_road_79 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 26 THEN
    DELETE FROM location_road_26 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 85 THEN
    DELETE FROM location_road_85 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 72 THEN
    DELETE FROM location_road_72 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 95 THEN
    DELETE FROM location_road_95 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 232 THEN
    DELETE FROM location_road_232 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 77 THEN
    DELETE FROM location_road_77 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 172 THEN
    DELETE FROM location_road_172 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 30 THEN
    DELETE FROM location_road_30 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 21 THEN
    DELETE FROM location_road_21 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 131 THEN
    DELETE FROM location_road_131 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 3 THEN
    DELETE FROM location_road_3 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 17 THEN
    DELETE FROM location_road_17 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 198 THEN
    DELETE FROM location_road_198 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 37 THEN
    DELETE FROM location_road_37 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 212 THEN
    DELETE FROM location_road_212 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 28 THEN
    DELETE FROM location_road_28 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 249 THEN
    DELETE FROM location_road_249 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 165 THEN
    DELETE FROM location_road_165 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 56 THEN
    DELETE FROM location_road_56 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 151 THEN
    DELETE FROM location_road_151 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 209 THEN
    DELETE FROM location_road_209 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 74 THEN
    DELETE FROM location_road_74 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 138 THEN
    DELETE FROM location_road_138 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 225 THEN
    DELETE FROM location_road_225 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 34 THEN
    DELETE FROM location_road_34 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 245 THEN
    DELETE FROM location_road_245 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 205 THEN
    DELETE FROM location_road_205 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 67 THEN
    DELETE FROM location_road_67 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 83 THEN
    DELETE FROM location_road_83 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 63 THEN
    DELETE FROM location_road_63 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 90 THEN
    DELETE FROM location_road_90 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 45 THEN
    DELETE FROM location_road_45 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 216 THEN
    DELETE FROM location_road_216 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 174 THEN
    DELETE FROM location_road_174 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 213 THEN
    DELETE FROM location_road_213 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 134 THEN
    DELETE FROM location_road_134 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 144 THEN
    DELETE FROM location_road_144 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 39 THEN
    DELETE FROM location_road_39 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 168 THEN
    DELETE FROM location_road_168 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 163 THEN
    DELETE FROM location_road_163 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 223 THEN
    DELETE FROM location_road_223 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 36 THEN
    DELETE FROM location_road_36 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 221 THEN
    DELETE FROM location_road_221 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 102 THEN
    DELETE FROM location_road_102 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 167 THEN
    DELETE FROM location_road_167 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 158 THEN
    DELETE FROM location_road_158 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 118 THEN
    DELETE FROM location_road_118 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 111 THEN
    DELETE FROM location_road_111 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 16 THEN
    DELETE FROM location_road_16 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 207 THEN
    DELETE FROM location_road_207 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 62 THEN
    DELETE FROM location_road_62 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 123 THEN
    DELETE FROM location_road_123 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 126 THEN
    DELETE FROM location_road_126 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 194 THEN
    DELETE FROM location_road_194 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 99 THEN
    DELETE FROM location_road_99 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 41 THEN
    DELETE FROM location_road_41 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 206 THEN
    DELETE FROM location_road_206 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 46 THEN
    DELETE FROM location_road_46 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 224 THEN
    DELETE FROM location_road_224 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 157 THEN
    DELETE FROM location_road_157 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 53 THEN
    DELETE FROM location_road_53 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 32 THEN
    DELETE FROM location_road_32 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 247 THEN
    DELETE FROM location_road_247 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 183 THEN
    DELETE FROM location_road_183 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 100 THEN
    DELETE FROM location_road_100 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 136 THEN
    DELETE FROM location_road_136 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 150 THEN
    DELETE FROM location_road_150 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 139 THEN
    DELETE FROM location_road_139 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 140 THEN
    DELETE FROM location_road_140 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 12 THEN
    DELETE FROM location_road_12 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 248 THEN
    DELETE FROM location_road_248 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 137 THEN
    DELETE FROM location_road_137 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 208 THEN
    DELETE FROM location_road_208 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 24 THEN
    DELETE FROM location_road_24 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 191 THEN
    DELETE FROM location_road_191 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 25 THEN
    DELETE FROM location_road_25 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 141 THEN
    DELETE FROM location_road_141 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 122 THEN
    DELETE FROM location_road_122 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 94 THEN
    DELETE FROM location_road_94 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 218 THEN
    DELETE FROM location_road_218 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 154 THEN
    DELETE FROM location_road_154 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 234 THEN
    DELETE FROM location_road_234 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 49 THEN
    DELETE FROM location_road_49 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 211 THEN
    DELETE FROM location_road_211 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 33 THEN
    DELETE FROM location_road_33 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 64 THEN
    DELETE FROM location_road_64 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 185 THEN
    DELETE FROM location_road_185 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 215 THEN
    DELETE FROM location_road_215 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 55 THEN
    DELETE FROM location_road_55 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 148 THEN
    DELETE FROM location_road_148 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 130 THEN
    DELETE FROM location_road_130 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 23 THEN
    DELETE FROM location_road_23 where place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 0 THEN
    DELETE FROM location_road_0 where place_id = in_place_id;
    RETURN TRUE;
  END IF;


  RAISE EXCEPTION 'Unknown partition %', in_partition;

  RETURN FALSE;
END
$$;


ALTER FUNCTION public.deleteroad(in_partition integer, in_place_id bigint) OWNER TO nominatim;

--
-- Name: deletesearchname(integer, bigint); Type: FUNCTION; Schema: public; Owner: nominatim
--

CREATE FUNCTION public.deletesearchname(in_partition integer, in_place_id bigint) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
BEGIN

  IF in_partition = 116 THEN
    DELETE from search_name_116 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 87 THEN
    DELETE from search_name_87 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 184 THEN
    DELETE from search_name_184 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 51 THEN
    DELETE from search_name_51 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 70 THEN
    DELETE from search_name_70 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 190 THEN
    DELETE from search_name_190 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 176 THEN
    DELETE from search_name_176 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 169 THEN
    DELETE from search_name_169 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 92 THEN
    DELETE from search_name_92 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 180 THEN
    DELETE from search_name_180 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 236 THEN
    DELETE from search_name_236 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 22 THEN
    DELETE from search_name_22 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 156 THEN
    DELETE from search_name_156 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 197 THEN
    DELETE from search_name_197 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 135 THEN
    DELETE from search_name_135 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 227 THEN
    DELETE from search_name_227 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 149 THEN
    DELETE from search_name_149 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 173 THEN
    DELETE from search_name_173 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 73 THEN
    DELETE from search_name_73 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 103 THEN
    DELETE from search_name_103 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 42 THEN
    DELETE from search_name_42 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 189 THEN
    DELETE from search_name_189 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 117 THEN
    DELETE from search_name_117 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 121 THEN
    DELETE from search_name_121 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 239 THEN
    DELETE from search_name_239 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 161 THEN
    DELETE from search_name_161 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 88 THEN
    DELETE from search_name_88 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 188 THEN
    DELETE from search_name_188 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 125 THEN
    DELETE from search_name_125 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 113 THEN
    DELETE from search_name_113 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 40 THEN
    DELETE from search_name_40 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 240 THEN
    DELETE from search_name_240 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 43 THEN
    DELETE from search_name_43 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 120 THEN
    DELETE from search_name_120 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 196 THEN
    DELETE from search_name_196 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 15 THEN
    DELETE from search_name_15 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 226 THEN
    DELETE from search_name_226 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 210 THEN
    DELETE from search_name_210 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 48 THEN
    DELETE from search_name_48 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 187 THEN
    DELETE from search_name_187 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 57 THEN
    DELETE from search_name_57 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 61 THEN
    DELETE from search_name_61 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 81 THEN
    DELETE from search_name_81 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 19 THEN
    DELETE from search_name_19 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 160 THEN
    DELETE from search_name_160 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 244 THEN
    DELETE from search_name_244 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 242 THEN
    DELETE from search_name_242 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 204 THEN
    DELETE from search_name_204 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 104 THEN
    DELETE from search_name_104 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 5 THEN
    DELETE from search_name_5 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 171 THEN
    DELETE from search_name_171 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 91 THEN
    DELETE from search_name_91 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 29 THEN
    DELETE from search_name_29 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 179 THEN
    DELETE from search_name_179 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 54 THEN
    DELETE from search_name_54 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 4 THEN
    DELETE from search_name_4 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 181 THEN
    DELETE from search_name_181 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 96 THEN
    DELETE from search_name_96 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 201 THEN
    DELETE from search_name_201 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 10 THEN
    DELETE from search_name_10 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 35 THEN
    DELETE from search_name_35 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 105 THEN
    DELETE from search_name_105 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 107 THEN
    DELETE from search_name_107 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 6 THEN
    DELETE from search_name_6 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 233 THEN
    DELETE from search_name_233 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 86 THEN
    DELETE from search_name_86 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 220 THEN
    DELETE from search_name_220 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 89 THEN
    DELETE from search_name_89 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 93 THEN
    DELETE from search_name_93 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 219 THEN
    DELETE from search_name_219 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 175 THEN
    DELETE from search_name_175 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 241 THEN
    DELETE from search_name_241 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 31 THEN
    DELETE from search_name_31 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 50 THEN
    DELETE from search_name_50 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 14 THEN
    DELETE from search_name_14 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 231 THEN
    DELETE from search_name_231 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 66 THEN
    DELETE from search_name_66 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 109 THEN
    DELETE from search_name_109 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 155 THEN
    DELETE from search_name_155 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 13 THEN
    DELETE from search_name_13 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 133 THEN
    DELETE from search_name_133 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 195 THEN
    DELETE from search_name_195 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 2 THEN
    DELETE from search_name_2 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 199 THEN
    DELETE from search_name_199 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 75 THEN
    DELETE from search_name_75 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 246 THEN
    DELETE from search_name_246 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 128 THEN
    DELETE from search_name_128 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 166 THEN
    DELETE from search_name_166 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 243 THEN
    DELETE from search_name_243 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 142 THEN
    DELETE from search_name_142 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 152 THEN
    DELETE from search_name_152 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 230 THEN
    DELETE from search_name_230 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 7 THEN
    DELETE from search_name_7 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 222 THEN
    DELETE from search_name_222 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 38 THEN
    DELETE from search_name_38 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 193 THEN
    DELETE from search_name_193 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 164 THEN
    DELETE from search_name_164 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 78 THEN
    DELETE from search_name_78 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 217 THEN
    DELETE from search_name_217 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 159 THEN
    DELETE from search_name_159 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 250 THEN
    DELETE from search_name_250 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 186 THEN
    DELETE from search_name_186 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 47 THEN
    DELETE from search_name_47 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 177 THEN
    DELETE from search_name_177 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 20 THEN
    DELETE from search_name_20 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 182 THEN
    DELETE from search_name_182 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 1 THEN
    DELETE from search_name_1 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 76 THEN
    DELETE from search_name_76 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 106 THEN
    DELETE from search_name_106 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 18 THEN
    DELETE from search_name_18 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 110 THEN
    DELETE from search_name_110 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 178 THEN
    DELETE from search_name_178 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 145 THEN
    DELETE from search_name_145 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 129 THEN
    DELETE from search_name_129 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 27 THEN
    DELETE from search_name_27 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 143 THEN
    DELETE from search_name_143 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 203 THEN
    DELETE from search_name_203 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 58 THEN
    DELETE from search_name_58 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 8 THEN
    DELETE from search_name_8 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 228 THEN
    DELETE from search_name_228 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 71 THEN
    DELETE from search_name_71 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 229 THEN
    DELETE from search_name_229 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 68 THEN
    DELETE from search_name_68 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 52 THEN
    DELETE from search_name_52 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 80 THEN
    DELETE from search_name_80 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 146 THEN
    DELETE from search_name_146 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 162 THEN
    DELETE from search_name_162 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 132 THEN
    DELETE from search_name_132 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 84 THEN
    DELETE from search_name_84 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 170 THEN
    DELETE from search_name_170 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 192 THEN
    DELETE from search_name_192 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 237 THEN
    DELETE from search_name_237 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 101 THEN
    DELETE from search_name_101 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 69 THEN
    DELETE from search_name_69 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 115 THEN
    DELETE from search_name_115 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 114 THEN
    DELETE from search_name_114 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 60 THEN
    DELETE from search_name_60 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 97 THEN
    DELETE from search_name_97 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 238 THEN
    DELETE from search_name_238 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 108 THEN
    DELETE from search_name_108 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 112 THEN
    DELETE from search_name_112 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 59 THEN
    DELETE from search_name_59 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 65 THEN
    DELETE from search_name_65 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 127 THEN
    DELETE from search_name_127 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 124 THEN
    DELETE from search_name_124 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 98 THEN
    DELETE from search_name_98 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 200 THEN
    DELETE from search_name_200 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 11 THEN
    DELETE from search_name_11 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 44 THEN
    DELETE from search_name_44 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 235 THEN
    DELETE from search_name_235 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 82 THEN
    DELETE from search_name_82 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 119 THEN
    DELETE from search_name_119 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 153 THEN
    DELETE from search_name_153 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 147 THEN
    DELETE from search_name_147 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 214 THEN
    DELETE from search_name_214 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 9 THEN
    DELETE from search_name_9 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 202 THEN
    DELETE from search_name_202 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 79 THEN
    DELETE from search_name_79 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 26 THEN
    DELETE from search_name_26 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 85 THEN
    DELETE from search_name_85 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 72 THEN
    DELETE from search_name_72 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 95 THEN
    DELETE from search_name_95 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 232 THEN
    DELETE from search_name_232 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 77 THEN
    DELETE from search_name_77 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 172 THEN
    DELETE from search_name_172 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 30 THEN
    DELETE from search_name_30 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 21 THEN
    DELETE from search_name_21 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 131 THEN
    DELETE from search_name_131 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 3 THEN
    DELETE from search_name_3 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 17 THEN
    DELETE from search_name_17 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 198 THEN
    DELETE from search_name_198 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 37 THEN
    DELETE from search_name_37 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 212 THEN
    DELETE from search_name_212 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 28 THEN
    DELETE from search_name_28 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 249 THEN
    DELETE from search_name_249 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 165 THEN
    DELETE from search_name_165 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 56 THEN
    DELETE from search_name_56 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 151 THEN
    DELETE from search_name_151 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 209 THEN
    DELETE from search_name_209 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 74 THEN
    DELETE from search_name_74 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 138 THEN
    DELETE from search_name_138 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 225 THEN
    DELETE from search_name_225 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 34 THEN
    DELETE from search_name_34 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 245 THEN
    DELETE from search_name_245 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 205 THEN
    DELETE from search_name_205 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 67 THEN
    DELETE from search_name_67 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 83 THEN
    DELETE from search_name_83 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 63 THEN
    DELETE from search_name_63 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 90 THEN
    DELETE from search_name_90 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 45 THEN
    DELETE from search_name_45 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 216 THEN
    DELETE from search_name_216 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 174 THEN
    DELETE from search_name_174 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 213 THEN
    DELETE from search_name_213 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 134 THEN
    DELETE from search_name_134 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 144 THEN
    DELETE from search_name_144 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 39 THEN
    DELETE from search_name_39 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 168 THEN
    DELETE from search_name_168 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 163 THEN
    DELETE from search_name_163 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 223 THEN
    DELETE from search_name_223 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 36 THEN
    DELETE from search_name_36 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 221 THEN
    DELETE from search_name_221 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 102 THEN
    DELETE from search_name_102 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 167 THEN
    DELETE from search_name_167 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 158 THEN
    DELETE from search_name_158 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 118 THEN
    DELETE from search_name_118 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 111 THEN
    DELETE from search_name_111 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 16 THEN
    DELETE from search_name_16 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 207 THEN
    DELETE from search_name_207 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 62 THEN
    DELETE from search_name_62 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 123 THEN
    DELETE from search_name_123 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 126 THEN
    DELETE from search_name_126 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 194 THEN
    DELETE from search_name_194 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 99 THEN
    DELETE from search_name_99 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 41 THEN
    DELETE from search_name_41 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 206 THEN
    DELETE from search_name_206 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 46 THEN
    DELETE from search_name_46 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 224 THEN
    DELETE from search_name_224 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 157 THEN
    DELETE from search_name_157 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 53 THEN
    DELETE from search_name_53 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 32 THEN
    DELETE from search_name_32 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 247 THEN
    DELETE from search_name_247 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 183 THEN
    DELETE from search_name_183 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 100 THEN
    DELETE from search_name_100 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 136 THEN
    DELETE from search_name_136 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 150 THEN
    DELETE from search_name_150 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 139 THEN
    DELETE from search_name_139 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 140 THEN
    DELETE from search_name_140 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 12 THEN
    DELETE from search_name_12 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 248 THEN
    DELETE from search_name_248 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 137 THEN
    DELETE from search_name_137 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 208 THEN
    DELETE from search_name_208 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 24 THEN
    DELETE from search_name_24 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 191 THEN
    DELETE from search_name_191 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 25 THEN
    DELETE from search_name_25 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 141 THEN
    DELETE from search_name_141 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 122 THEN
    DELETE from search_name_122 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 94 THEN
    DELETE from search_name_94 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 218 THEN
    DELETE from search_name_218 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 154 THEN
    DELETE from search_name_154 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 234 THEN
    DELETE from search_name_234 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 49 THEN
    DELETE from search_name_49 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 211 THEN
    DELETE from search_name_211 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 33 THEN
    DELETE from search_name_33 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 64 THEN
    DELETE from search_name_64 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 185 THEN
    DELETE from search_name_185 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 215 THEN
    DELETE from search_name_215 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 55 THEN
    DELETE from search_name_55 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 148 THEN
    DELETE from search_name_148 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 130 THEN
    DELETE from search_name_130 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 23 THEN
    DELETE from search_name_23 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;

  IF in_partition = 0 THEN
    DELETE from search_name_0 WHERE place_id = in_place_id;
    RETURN TRUE;
  END IF;


  RAISE EXCEPTION 'Unknown partition %', in_partition;

  RETURN FALSE;
END
$$;


ALTER FUNCTION public.deletesearchname(in_partition integer, in_place_id bigint) OWNER TO nominatim;

--
-- Name: geometry_sector(integer, public.geometry); Type: FUNCTION; Schema: public; Owner: nominatim
--

CREATE FUNCTION public.geometry_sector(partition integer, place public.geometry) RETURNS integer
    LANGUAGE plpgsql IMMUTABLE
    AS $$
DECLARE
  NEWgeometry geometry;
BEGIN
--  RAISE WARNING '%',place;
  NEWgeometry := ST_PointOnSurface(place);
  RETURN (partition*1000000) + (500-ST_X(NEWgeometry)::integer)*1000 + (500-ST_Y(NEWgeometry)::integer);
END;
$$;


ALTER FUNCTION public.geometry_sector(partition integer, place public.geometry) OWNER TO nominatim;

--
-- Name: get_address_by_language(bigint, integer, text[]); Type: FUNCTION; Schema: public; Owner: nominatim
--

CREATE FUNCTION public.get_address_by_language(for_place_id bigint, housenumber integer, languagepref text[]) RETURNS text
    LANGUAGE plpgsql
    AS $$
DECLARE
  result TEXT[];
  currresult TEXT;
  prevresult TEXT;
  location RECORD;
BEGIN

  result := '{}';
  prevresult := '';

  FOR location IN select * from get_addressdata(for_place_id, housenumber) where isaddress order by rank_address desc LOOP
    currresult := trim(get_name_by_language(location.name, languagepref));
    IF currresult != prevresult AND currresult IS NOT NULL AND result[(100 - location.rank_address)] IS NULL THEN
      result[(100 - location.rank_address)] := trim(get_name_by_language(location.name, languagepref));
      prevresult := currresult;
    END IF;
  END LOOP;

  RETURN array_to_string(result,', ');
END;
$$;


ALTER FUNCTION public.get_address_by_language(for_place_id bigint, housenumber integer, languagepref text[]) OWNER TO nominatim;

--
-- Name: get_addressdata(bigint, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.get_addressdata(in_place_id bigint, in_housenumber integer) RETURNS SETOF public.addressline
    LANGUAGE plpgsql
    AS $$
DECLARE
  for_place_id BIGINT;
  result TEXT[];
  search TEXT[];
  found INTEGER;
  location RECORD;
  countrylocation RECORD;
  searchcountrycode varchar(2);
  searchhousenumber TEXT;
  searchhousename HSTORE;
  searchrankaddress INTEGER;
  searchpostcode TEXT;
  postcode_isaddress BOOL;
  searchclass TEXT;
  searchtype TEXT;
  countryname HSTORE;
BEGIN
  -- The place ein question might not have a direct entry in place_addressline.
  -- Look for the parent of such places then and save if in for_place_id.

  postcode_isaddress := true;

  -- first query osmline (interpolation lines)
  IF in_housenumber >= 0 THEN
    SELECT parent_place_id, country_code, in_housenumber::text, 30, postcode,
           null, 'place', 'house'
      FROM location_property_osmline
      WHERE place_id = in_place_id AND in_housenumber>=startnumber
            AND in_housenumber <= endnumber
      INTO for_place_id, searchcountrycode, searchhousenumber, searchrankaddress,
           searchpostcode, searchhousename, searchclass, searchtype;
  END IF;

  --then query tiger data
  IF 0 THEN
  IF for_place_id IS NULL AND in_housenumber >= 0 THEN
    SELECT parent_place_id, 'us', in_housenumber::text, 30, postcode, null,
           'place', 'house'
      FROM location_property_tiger
      WHERE place_id = in_place_id AND in_housenumber >= startnumber
            AND in_housenumber <= endnumber
      INTO for_place_id, searchcountrycode, searchhousenumber, searchrankaddress,
           searchpostcode, searchhousename, searchclass, searchtype;
  END IF;
  END IF;

  IF 0 THEN
  IF for_place_id IS NULL THEN
    SELECT parent_place_id, 'us', housenumber, 30, postcode, null, 'place', 'house'
      FROM location_property_aux
      WHERE place_id = in_place_id
      INTO for_place_id,searchcountrycode, searchhousenumber, searchrankaddress,
           searchpostcode, searchhousename, searchclass, searchtype;
  END IF;
  END IF;

  -- postcode table
  IF for_place_id IS NULL THEN
    SELECT parent_place_id, country_code, rank_search, postcode, 'place', 'postcode'
      FROM location_postcode
      WHERE place_id = in_place_id
      INTO for_place_id, searchcountrycode, searchrankaddress, searchpostcode,
           searchclass, searchtype;
  END IF;

  -- POI objects in the placex table
  IF for_place_id IS NULL THEN
    SELECT parent_place_id, country_code, housenumber, rank_search, postcode,
           name, class, type
      FROM placex
      WHERE place_id = in_place_id and rank_search > 27
      INTO for_place_id, searchcountrycode, searchhousenumber, searchrankaddress,
           searchpostcode, searchhousename, searchclass, searchtype;
  END IF;

  -- If for_place_id is still NULL at this point then the object has its own
  -- entry in place_address line. However, still check if there is not linked
  -- place we should be using instead.
  IF for_place_id IS NULL THEN
    select coalesce(linked_place_id, place_id),  country_code,
           housenumber, rank_search, postcode, null
      from placex where place_id = in_place_id
      INTO for_place_id, searchcountrycode, searchhousenumber, searchrankaddress, searchpostcode, searchhousename;
  END IF;

--RAISE WARNING '% % % %',searchcountrycode, searchhousenumber, searchrankaddress, searchpostcode;

  found := 1000; -- the lowest rank_address included

  -- Return the record for the base entry.
  FOR location IN
    SELECT placex.place_id, osm_type, osm_id, name,
           class, type, admin_level,
           type not in ('postcode', 'postal_code') as isaddress,
           CASE WHEN rank_address = 0 THEN 100
                WHEN rank_address = 11 THEN 5
                ELSE rank_address END as rank_address,
           0 as distance, country_code, postcode
      FROM placex
      WHERE place_id = for_place_id
  LOOP
--RAISE WARNING '%',location;
    IF searchcountrycode IS NULL AND location.country_code IS NOT NULL THEN
      searchcountrycode := location.country_code;
    END IF;
    IF location.rank_address < 4 THEN
      -- no country locations for ranks higher than country
      searchcountrycode := NULL;
    END IF;
    countrylocation := ROW(location.place_id, location.osm_type, location.osm_id,
                           location.name, location.class, location.type,
                           location.admin_level, true, location.isaddress,
                           location.rank_address, location.distance)::addressline;
    RETURN NEXT countrylocation;
    found := location.rank_address;
  END LOOP;

  FOR location IN
    SELECT placex.place_id, osm_type, osm_id, name,
           CASE WHEN extratags ? 'place' THEN 'place' ELSE class END as class,
           CASE WHEN extratags ? 'place' THEN extratags->'place' ELSE type END as type,
           admin_level, fromarea, isaddress,
           CASE WHEN rank_address = 11 THEN 5 ELSE rank_address END as rank_address,
           distance, country_code, postcode
      FROM place_addressline join placex on (address_place_id = placex.place_id)
      WHERE place_addressline.place_id = for_place_id
            AND (cached_rank_address >= 4 AND cached_rank_address < searchrankaddress)
            AND linked_place_id is null
            AND (placex.country_code IS NULL OR searchcountrycode IS NULL
                 OR placex.country_code = searchcountrycode)
      ORDER BY rank_address desc, isaddress desc, fromarea desc,
               distance asc, rank_search desc
  LOOP
--RAISE WARNING '%',location;
    IF searchcountrycode IS NULL AND location.country_code IS NOT NULL THEN
      searchcountrycode := location.country_code;
    END IF;
    IF location.type in ('postcode', 'postal_code') THEN
      postcode_isaddress := false;
      IF location.osm_type != 'R' THEN
        location.isaddress := FALSE;
      END IF;
    END IF;
    countrylocation := ROW(location.place_id, location.osm_type, location.osm_id,
                           location.name, location.class, location.type,
                           location.admin_level, location.fromarea,
                           location.isaddress, location.rank_address,
                           location.distance)::addressline;
    RETURN NEXT countrylocation;
    found := location.rank_address;
  END LOOP;

  -- If no country was included yet, add the name information from country_name.
  IF found > 4 THEN
    SELECT name FROM country_name
      WHERE country_code = searchcountrycode LIMIT 1 INTO countryname;
--RAISE WARNING '% % %',found,searchcountrycode,countryname;
    IF countryname IS NOT NULL THEN
      location := ROW(null, null, null, countryname, 'place', 'country',
                      null, true, true, 4, 0)::addressline;
      RETURN NEXT location;
    END IF;
  END IF;

  -- Finally add some artificial rows.
  IF searchcountrycode IS NOT NULL THEN
    location := ROW(null, null, null, hstore('ref', searchcountrycode),
                    'place', 'country_code', null, true, false, 4, 0)::addressline;
    RETURN NEXT location;
  END IF;

  IF searchhousename IS NOT NULL THEN
    location := ROW(in_place_id, null, null, searchhousename, searchclass,
                    searchtype, null, true, true, 29, 0)::addressline;
    RETURN NEXT location;
  END IF;

  IF searchhousenumber IS NOT NULL THEN
    location := ROW(in_place_id, null, null, hstore('ref', searchhousenumber),
                    'place', 'house_number', null, true, true, 28, 0)::addressline;
    RETURN NEXT location;
  END IF;

  IF searchpostcode IS NOT NULL THEN
    location := ROW(null, null, null, hstore('ref', searchpostcode), 'place',
                    'postcode', null, false, postcode_isaddress, 5, 0)::addressline;
    RETURN NEXT location;
  END IF;

  RETURN;
END;
$$;


ALTER FUNCTION public.get_addressdata(in_place_id bigint, in_housenumber integer) OWNER TO postgres;

--
-- Name: get_country_code(public.geometry); Type: FUNCTION; Schema: public; Owner: nominatim
--

CREATE FUNCTION public.get_country_code(place public.geometry) RETURNS text
    LANGUAGE plpgsql IMMUTABLE
    AS $$
DECLARE
  place_centre GEOMETRY;
  nearcountry RECORD;
BEGIN
  place_centre := ST_PointOnSurface(place);

-- RAISE WARNING 'get_country_code, start: %', ST_AsText(place_centre);

  -- Try for a OSM polygon
  FOR nearcountry IN select country_code from location_area_country where country_code is not null and st_covers(geometry, place_centre) limit 1
  LOOP
    RETURN nearcountry.country_code;
  END LOOP;

-- RAISE WARNING 'osm fallback: %', ST_AsText(place_centre);

  -- Try for OSM fallback data
  -- The order is to deal with places like HongKong that are 'states' within another polygon
  FOR nearcountry IN select country_code from country_osm_grid where st_covers(geometry, place_centre) order by area asc limit 1
  LOOP
    RETURN nearcountry.country_code;
  END LOOP;

-- RAISE WARNING 'near osm fallback: %', ST_AsText(place_centre);

  -- 
  FOR nearcountry IN select country_code from country_osm_grid where st_dwithin(geometry, place_centre, 0.5) order by st_distance(geometry, place_centre) asc, area asc limit 1
  LOOP
    RETURN nearcountry.country_code;
  END LOOP;

  RETURN NULL;
END;
$$;


ALTER FUNCTION public.get_country_code(place public.geometry) OWNER TO nominatim;

--
-- Name: get_country_language_code(character varying); Type: FUNCTION; Schema: public; Owner: nominatim
--

CREATE FUNCTION public.get_country_language_code(search_country_code character varying) RETURNS text
    LANGUAGE plpgsql IMMUTABLE
    AS $$
DECLARE
  nearcountry RECORD;
BEGIN
  FOR nearcountry IN select distinct country_default_language_code from country_name where country_code = search_country_code limit 1
  LOOP
    RETURN lower(nearcountry.country_default_language_code);
  END LOOP;
  RETURN NULL;
END;
$$;


ALTER FUNCTION public.get_country_language_code(search_country_code character varying) OWNER TO nominatim;

--
-- Name: get_country_language_codes(character varying); Type: FUNCTION; Schema: public; Owner: nominatim
--

CREATE FUNCTION public.get_country_language_codes(search_country_code character varying) RETURNS text[]
    LANGUAGE plpgsql IMMUTABLE
    AS $$
DECLARE
  nearcountry RECORD;
BEGIN
  FOR nearcountry IN select country_default_language_codes from country_name where country_code = search_country_code limit 1
  LOOP
    RETURN lower(nearcountry.country_default_language_codes);
  END LOOP;
  RETURN NULL;
END;
$$;


ALTER FUNCTION public.get_country_language_codes(search_country_code character varying) OWNER TO nominatim;

--
-- Name: get_interpolation_parent(bigint, text, text, integer, public.geometry, public.geometry); Type: FUNCTION; Schema: public; Owner: nominatim
--

CREATE FUNCTION public.get_interpolation_parent(wayid bigint, street text, place text, partition integer, centroid public.geometry, geom public.geometry) RETURNS bigint
    LANGUAGE plpgsql
    AS $$
DECLARE
  addr_street TEXT;
  addr_place TEXT;
  parent_place_id BIGINT;
  address_street_word_ids INTEGER[];

  waynodes BIGINT[];

  location RECORD;
BEGIN
  addr_street = street;
  addr_place = place;

  IF addr_street is null and addr_place is null THEN
    select nodes from planet_osm_ways where id = wayid INTO waynodes;
    FOR location IN SELECT placex.address from placex
                    where osm_type = 'N' and osm_id = ANY(waynodes)
                          and placex.address is not null
                          and (placex.address ? 'street' or placex.address ? 'place')
                          and indexed_status < 100
                    limit 1 LOOP
      addr_street = location.address->'street';
      addr_place = location.address->'place';
    END LOOP;
  END IF;

  IF addr_street IS NOT NULL THEN
    address_street_word_ids := get_name_ids(make_standard_name(addr_street));
    IF address_street_word_ids IS NOT NULL THEN
      FOR location IN SELECT place_id from getNearestNamedRoadFeature(partition, centroid, address_street_word_ids) LOOP
        parent_place_id := location.place_id;
      END LOOP;
    END IF;
  END IF;

  IF parent_place_id IS NULL AND addr_place IS NOT NULL THEN
    address_street_word_ids := get_name_ids(make_standard_name(addr_place));
    IF address_street_word_ids IS NOT NULL THEN
      FOR location IN SELECT place_id from getNearestNamedPlaceFeature(partition, centroid, address_street_word_ids) LOOP
        parent_place_id := location.place_id;
      END LOOP;
    END IF;
  END IF;

  IF parent_place_id is null THEN
    FOR location IN SELECT place_id FROM placex
        WHERE ST_DWithin(geom, placex.geometry, 0.001) and placex.rank_search = 26
        ORDER BY (ST_distance(placex.geometry, ST_LineInterpolatePoint(geom,0))+
                  ST_distance(placex.geometry, ST_LineInterpolatePoint(geom,0.5))+
                  ST_distance(placex.geometry, ST_LineInterpolatePoint(geom,1))) ASC limit 1
    LOOP
      parent_place_id := location.place_id;
    END LOOP;
  END IF;

  IF parent_place_id is null THEN
    RETURN 0;
  END IF;

  RETURN parent_place_id;
END;
$$;


ALTER FUNCTION public.get_interpolation_parent(wayid bigint, street text, place text, partition integer, centroid public.geometry, geom public.geometry) OWNER TO nominatim;

--
-- Name: get_maxwordfreq(); Type: FUNCTION; Schema: public; Owner: nominatim
--

CREATE FUNCTION public.get_maxwordfreq() RETURNS integer
    LANGUAGE sql IMMUTABLE
    AS $$ SELECT 50000 as maxwordfreq; $$;


ALTER FUNCTION public.get_maxwordfreq() OWNER TO nominatim;

--
-- Name: get_name_by_language(public.hstore, text[]); Type: FUNCTION; Schema: public; Owner: nominatim
--

CREATE FUNCTION public.get_name_by_language(name public.hstore, languagepref text[]) RETURNS text
    LANGUAGE plpgsql IMMUTABLE
    AS $$
DECLARE
  result TEXT;
BEGIN
  IF name is null THEN
    RETURN null;
  END IF;

  FOR j IN 1..array_upper(languagepref,1) LOOP
    IF name ? languagepref[j] THEN
      result := trim(name->languagepref[j]);
      IF result != '' THEN
        return result;
      END IF;
    END IF;
  END LOOP;

  -- anything will do as a fallback - just take the first name type thing there is
  RETURN trim((avals(name))[1]);
END;
$$;


ALTER FUNCTION public.get_name_by_language(name public.hstore, languagepref text[]) OWNER TO nominatim;

--
-- Name: get_name_id(text); Type: FUNCTION; Schema: public; Owner: nominatim
--

CREATE FUNCTION public.get_name_id(lookup_word text) RETURNS integer
    LANGUAGE plpgsql IMMUTABLE
    AS $$
DECLARE
  lookup_token TEXT;
  return_word_id INTEGER;
BEGIN
  lookup_token := ' '||trim(lookup_word);
  SELECT min(word_id) FROM word WHERE word_token = lookup_token and class is null and type is null into return_word_id;
  RETURN return_word_id;
END;
$$;


ALTER FUNCTION public.get_name_id(lookup_word text) OWNER TO nominatim;

--
-- Name: get_name_ids(text); Type: FUNCTION; Schema: public; Owner: nominatim
--

CREATE FUNCTION public.get_name_ids(lookup_word text) RETURNS integer[]
    LANGUAGE plpgsql IMMUTABLE
    AS $$
DECLARE
  lookup_token TEXT;
  return_word_ids INTEGER[];
BEGIN
  lookup_token := ' '||trim(lookup_word);
  SELECT array_agg(word_id) FROM word WHERE word_token = lookup_token and class is null and type is null into return_word_ids;
  RETURN return_word_ids;
END;
$$;


ALTER FUNCTION public.get_name_ids(lookup_word text) OWNER TO nominatim;

--
-- Name: get_nearest_postcode(character varying, public.geometry); Type: FUNCTION; Schema: public; Owner: nominatim
--

CREATE FUNCTION public.get_nearest_postcode(country character varying, geom public.geometry) RETURNS text
    LANGUAGE plpgsql
    AS $$
DECLARE
  outcode TEXT;
  cnt INTEGER;
BEGIN
    -- If the geometry is an area then only one postcode must be within
    -- that area, otherwise consider the area as not having a postcode.
    IF ST_GeometryType(geom) in ('ST_Polygon','ST_MultiPolygon') THEN
        SELECT min(postcode), count(*) FROM
              (SELECT postcode FROM location_postcode
                WHERE ST_Contains(geom, location_postcode.geometry) LIMIT 2) sub
          INTO outcode, cnt;

        IF cnt = 1 THEN
            RETURN outcode;
        ELSE
            RETURN null;
        END IF;
    END IF;

    SELECT postcode FROM location_postcode
     WHERE ST_DWithin(geom, location_postcode.geometry, 0.05)
          AND location_postcode.country_code = country
     ORDER BY ST_Distance(geom, location_postcode.geometry) LIMIT 1
    INTO outcode;

    RETURN outcode;
END;
$$;


ALTER FUNCTION public.get_nearest_postcode(country character varying, geom public.geometry) OWNER TO nominatim;

--
-- Name: get_osm_rel_members(text[], text[]); Type: FUNCTION; Schema: public; Owner: nominatim
--

CREATE FUNCTION public.get_osm_rel_members(members text[], memberlabels text[]) RETURNS SETOF text
    LANGUAGE plpgsql
    AS $$
DECLARE
  i INTEGER;
BEGIN

  FOR i IN 1..ARRAY_UPPER(members,1) BY 2 LOOP
    IF members[i+1] = ANY(memberLabels) THEN
      RETURN NEXT members[i];
    END IF;
  END LOOP;

  RETURN;
END;
$$;


ALTER FUNCTION public.get_osm_rel_members(members text[], memberlabels text[]) OWNER TO nominatim;

--
-- Name: get_osm_rel_members(text[], text); Type: FUNCTION; Schema: public; Owner: nominatim
--

CREATE FUNCTION public.get_osm_rel_members(members text[], member text) RETURNS text[]
    LANGUAGE plpgsql
    AS $$
DECLARE
  result TEXT[];
  i INTEGER;
BEGIN

  FOR i IN 1..ARRAY_UPPER(members,1) BY 2 LOOP
    IF members[i+1] = member THEN
      result := result || members[i];
    END IF;
  END LOOP;

  return result;
END;
$$;


ALTER FUNCTION public.get_osm_rel_members(members text[], member text) OWNER TO nominatim;

--
-- Name: get_partition(character varying); Type: FUNCTION; Schema: public; Owner: nominatim
--

CREATE FUNCTION public.get_partition(in_country_code character varying) RETURNS integer
    LANGUAGE plpgsql IMMUTABLE
    AS $$
DECLARE
  nearcountry RECORD;
BEGIN
  FOR nearcountry IN select partition from country_name where country_code = in_country_code
  LOOP
    RETURN nearcountry.partition;
  END LOOP;
  RETURN 0;
END;
$$;


ALTER FUNCTION public.get_partition(in_country_code character varying) OWNER TO nominatim;

--
-- Name: get_postcode_rank(character varying, text); Type: FUNCTION; Schema: public; Owner: nominatim
--

CREATE FUNCTION public.get_postcode_rank(country_code character varying, postcode text, OUT rank_search smallint, OUT rank_address smallint) RETURNS record
    LANGUAGE plpgsql IMMUTABLE
    AS $_$
DECLARE
  part TEXT;
BEGIN
    rank_search := 30;
    rank_address := 30;
    postcode := upper(postcode);

    IF country_code = 'gb' THEN
        IF postcode ~ '^([A-Z][A-Z]?[0-9][0-9A-Z]? [0-9][A-Z][A-Z])$' THEN
            rank_search := 25;
            rank_address := 5;
        ELSEIF postcode ~ '^([A-Z][A-Z]?[0-9][0-9A-Z]? [0-9])$' THEN
            rank_search := 23;
            rank_address := 5;
        ELSEIF postcode ~ '^([A-Z][A-Z]?[0-9][0-9A-Z])$' THEN
            rank_search := 21;
            rank_address := 5;
        END IF;

    ELSEIF country_code = 'sg' THEN
        IF postcode ~ '^([0-9]{6})$' THEN
            rank_search := 25;
            rank_address := 11;
        END IF;

    ELSEIF country_code = 'de' THEN
        IF postcode ~ '^([0-9]{5})$' THEN
            rank_search := 21;
            rank_address := 11;
        END IF;

    ELSE
        -- Guess at the postcode format and coverage (!)
        IF postcode ~ '^[A-Z0-9]{1,5}$' THEN -- Probably too short to be very local
            rank_search := 21;
            rank_address := 11;
        ELSE
            -- Does it look splitable into and area and local code?
            part := substring(postcode from '^([- :A-Z0-9]+)([- :][A-Z0-9]+)$');

            IF part IS NOT NULL THEN
                rank_search := 25;
                rank_address := 11;
            ELSEIF postcode ~ '^[- :A-Z0-9]{6,}$' THEN
                rank_search := 21;
                rank_address := 11;
            END IF;
        END IF;
    END IF;

END;
$_$;


ALTER FUNCTION public.get_postcode_rank(country_code character varying, postcode text, OUT rank_search smallint, OUT rank_address smallint) OWNER TO nominatim;

--
-- Name: get_wikipedia_match(public.hstore, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.get_wikipedia_match(extratags public.hstore, country_code character varying) RETURNS public.wikipedia_article_match
    LANGUAGE plpgsql
    AS $$
DECLARE
  langs TEXT[];
  i INT;
  wiki_article TEXT;
  wiki_article_title TEXT;
  wiki_article_language TEXT;
  result wikipedia_article_match;
BEGIN
  langs := ARRAY['english','country','ar','bg','ca','cs','da','de','en','es','eo','eu','fa','fr','ko','hi','hr','id','it','he','lt','hu','ms','nl','ja','no','pl','pt','kk','ro','ru','sk','sl','sr','fi','sv','tr','uk','vi','vo','war','zh'];
  i := 1;
  WHILE langs[i] IS NOT NULL LOOP
    wiki_article := extratags->(case when langs[i] in ('english','country') THEN 'wikipedia' ELSE 'wikipedia:'||langs[i] END);
    IF wiki_article is not null THEN
      wiki_article := regexp_replace(wiki_article,E'^(.*?)([a-z]{2,3}).wikipedia.org/wiki/',E'\\2:');
      wiki_article := regexp_replace(wiki_article,E'^(.*?)([a-z]{2,3}).wikipedia.org/w/index.php\\?title=',E'\\2:');
      wiki_article := regexp_replace(wiki_article,E'^(.*?)/([a-z]{2,3})/wiki/',E'\\2:');
      --wiki_article := regexp_replace(wiki_article,E'^(.*?)([a-z]{2,3})[=:]',E'\\2:');
      wiki_article := replace(wiki_article,' ','_');
      IF strpos(wiki_article, ':') IN (3,4) THEN
        wiki_article_language := lower(trim(split_part(wiki_article, ':', 1)));
        wiki_article_title := trim(substr(wiki_article, strpos(wiki_article, ':')+1));
      ELSE
        wiki_article_title := trim(wiki_article);
        wiki_article_language := CASE WHEN langs[i] = 'english' THEN 'en' WHEN langs[i] = 'country' THEN get_country_language_code(country_code) ELSE langs[i] END;
      END IF;

      select wikipedia_article.language,wikipedia_article.title,wikipedia_article.importance
        from wikipedia_article 
        where language = wiki_article_language and 
        (title = wiki_article_title OR title = catch_decode_url_part(wiki_article_title) OR title = replace(catch_decode_url_part(wiki_article_title),E'\\',''))
      UNION ALL
      select wikipedia_article.language,wikipedia_article.title,wikipedia_article.importance
        from wikipedia_redirect join wikipedia_article on (wikipedia_redirect.language = wikipedia_article.language and wikipedia_redirect.to_title = wikipedia_article.title)
        where wikipedia_redirect.language = wiki_article_language and 
        (from_title = wiki_article_title OR from_title = catch_decode_url_part(wiki_article_title) OR from_title = replace(catch_decode_url_part(wiki_article_title),E'\\',''))
      order by importance desc limit 1 INTO result;

      IF result.language is not null THEN
        return result;
      END IF;
    END IF;
    i := i + 1;
  END LOOP;
  RETURN NULL;
END;
$$;


ALTER FUNCTION public.get_wikipedia_match(extratags public.hstore, country_code character varying) OWNER TO postgres;

--
-- Name: get_word_id(text); Type: FUNCTION; Schema: public; Owner: nominatim
--

CREATE FUNCTION public.get_word_id(lookup_word text) RETURNS integer
    LANGUAGE plpgsql IMMUTABLE
    AS $$
DECLARE
  lookup_token TEXT;
  return_word_id INTEGER;
BEGIN
  lookup_token := trim(lookup_word);
  SELECT min(word_id) FROM word WHERE word_token = lookup_token and class is null and type is null into return_word_id;
  RETURN return_word_id;
END;
$$;


ALTER FUNCTION public.get_word_id(lookup_word text) OWNER TO nominatim;

--
-- Name: getnearestnamedplacefeature(integer, public.geometry, integer[]); Type: FUNCTION; Schema: public; Owner: nominatim
--

CREATE FUNCTION public.getnearestnamedplacefeature(in_partition integer, point public.geometry, isin_token integer[]) RETURNS SETOF public.nearfeature
    LANGUAGE plpgsql
    AS $$
DECLARE
  r nearfeature%rowtype;
BEGIN


  IF in_partition = 116 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_116
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 87 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_87
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 184 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_184
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 51 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_51
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 70 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_70
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 190 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_190
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 176 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_176
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 169 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_169
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 92 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_92
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 180 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_180
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 236 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_236
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 22 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_22
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 156 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_156
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 197 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_197
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 135 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_135
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 227 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_227
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 149 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_149
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 173 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_173
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 73 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_73
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 103 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_103
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 42 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_42
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 189 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_189
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 117 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_117
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 121 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_121
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 239 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_239
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 161 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_161
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 88 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_88
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 188 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_188
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 125 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_125
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 113 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_113
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 40 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_40
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 240 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_240
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 43 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_43
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 120 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_120
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 196 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_196
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 15 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_15
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 226 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_226
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 210 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_210
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 48 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_48
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 187 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_187
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 57 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_57
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 61 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_61
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 81 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_81
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 19 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_19
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 160 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_160
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 244 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_244
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 242 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_242
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 204 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_204
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 104 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_104
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 5 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_5
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 171 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_171
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 91 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_91
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 29 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_29
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 179 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_179
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 54 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_54
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 4 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_4
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 181 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_181
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 96 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_96
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 201 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_201
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 10 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_10
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 35 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_35
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 105 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_105
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 107 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_107
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 6 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_6
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 233 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_233
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 86 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_86
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 220 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_220
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 89 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_89
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 93 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_93
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 219 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_219
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 175 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_175
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 241 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_241
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 31 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_31
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 50 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_50
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 14 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_14
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 231 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_231
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 66 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_66
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 109 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_109
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 155 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_155
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 13 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_13
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 133 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_133
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 195 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_195
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 2 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_2
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 199 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_199
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 75 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_75
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 246 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_246
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 128 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_128
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 166 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_166
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 243 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_243
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 142 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_142
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 152 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_152
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 230 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_230
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 7 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_7
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 222 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_222
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 38 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_38
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 193 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_193
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 164 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_164
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 78 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_78
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 217 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_217
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 159 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_159
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 250 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_250
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 186 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_186
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 47 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_47
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 177 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_177
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 20 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_20
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 182 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_182
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 1 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_1
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 76 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_76
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 106 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_106
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 18 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_18
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 110 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_110
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 178 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_178
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 145 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_145
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 129 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_129
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 27 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_27
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 143 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_143
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 203 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_203
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 58 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_58
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 8 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_8
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 228 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_228
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 71 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_71
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 229 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_229
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 68 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_68
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 52 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_52
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 80 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_80
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 146 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_146
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 162 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_162
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 132 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_132
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 84 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_84
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 170 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_170
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 192 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_192
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 237 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_237
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 101 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_101
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 69 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_69
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 115 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_115
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 114 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_114
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 60 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_60
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 97 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_97
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 238 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_238
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 108 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_108
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 112 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_112
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 59 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_59
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 65 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_65
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 127 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_127
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 124 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_124
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 98 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_98
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 200 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_200
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 11 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_11
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 44 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_44
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 235 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_235
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 82 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_82
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 119 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_119
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 153 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_153
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 147 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_147
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 214 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_214
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 9 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_9
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 202 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_202
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 79 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_79
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 26 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_26
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 85 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_85
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 72 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_72
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 95 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_95
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 232 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_232
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 77 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_77
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 172 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_172
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 30 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_30
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 21 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_21
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 131 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_131
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 3 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_3
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 17 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_17
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 198 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_198
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 37 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_37
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 212 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_212
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 28 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_28
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 249 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_249
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 165 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_165
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 56 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_56
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 151 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_151
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 209 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_209
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 74 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_74
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 138 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_138
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 225 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_225
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 34 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_34
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 245 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_245
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 205 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_205
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 67 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_67
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 83 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_83
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 63 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_63
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 90 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_90
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 45 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_45
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 216 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_216
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 174 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_174
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 213 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_213
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 134 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_134
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 144 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_144
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 39 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_39
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 168 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_168
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 163 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_163
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 223 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_223
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 36 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_36
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 221 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_221
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 102 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_102
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 167 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_167
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 158 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_158
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 118 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_118
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 111 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_111
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 16 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_16
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 207 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_207
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 62 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_62
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 123 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_123
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 126 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_126
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 194 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_194
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 99 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_99
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 41 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_41
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 206 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_206
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 46 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_46
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 224 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_224
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 157 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_157
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 53 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_53
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 32 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_32
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 247 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_247
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 183 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_183
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 100 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_100
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 136 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_136
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 150 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_150
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 139 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_139
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 140 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_140
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 12 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_12
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 248 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_248
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 137 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_137
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 208 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_208
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 24 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_24
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 191 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_191
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 25 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_25
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 141 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_141
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 122 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_122
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 94 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_94
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 218 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_218
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 154 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_154
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 234 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_234
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 49 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_49
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 211 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_211
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 33 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_33
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 64 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_64
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 185 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_185
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 215 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_215
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 55 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_55
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 148 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_148
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 130 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_130
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 23 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_23
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 0 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_0
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.04)
          AND search_rank between 16 and 22
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;


  RAISE EXCEPTION 'Unknown partition %', in_partition;
END
$$;


ALTER FUNCTION public.getnearestnamedplacefeature(in_partition integer, point public.geometry, isin_token integer[]) OWNER TO nominatim;

--
-- Name: getnearestnamedroadfeature(integer, public.geometry, integer[]); Type: FUNCTION; Schema: public; Owner: nominatim
--

CREATE FUNCTION public.getnearestnamedroadfeature(in_partition integer, point public.geometry, isin_token integer[]) RETURNS SETOF public.nearfeature
    LANGUAGE plpgsql
    AS $$
DECLARE
  r nearfeature%rowtype;
BEGIN


  IF in_partition = 116 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_116
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 87 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_87
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 184 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_184
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 51 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_51
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 70 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_70
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 190 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_190
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 176 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_176
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 169 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_169
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 92 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_92
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 180 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_180
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 236 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_236
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 22 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_22
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 156 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_156
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 197 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_197
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 135 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_135
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 227 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_227
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 149 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_149
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 173 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_173
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 73 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_73
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 103 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_103
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 42 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_42
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 189 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_189
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 117 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_117
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 121 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_121
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 239 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_239
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 161 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_161
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 88 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_88
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 188 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_188
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 125 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_125
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 113 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_113
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 40 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_40
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 240 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_240
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 43 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_43
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 120 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_120
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 196 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_196
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 15 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_15
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 226 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_226
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 210 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_210
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 48 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_48
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 187 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_187
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 57 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_57
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 61 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_61
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 81 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_81
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 19 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_19
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 160 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_160
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 244 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_244
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 242 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_242
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 204 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_204
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 104 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_104
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 5 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_5
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 171 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_171
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 91 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_91
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 29 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_29
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 179 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_179
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 54 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_54
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 4 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_4
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 181 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_181
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 96 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_96
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 201 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_201
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 10 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_10
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 35 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_35
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 105 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_105
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 107 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_107
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 6 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_6
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 233 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_233
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 86 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_86
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 220 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_220
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 89 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_89
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 93 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_93
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 219 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_219
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 175 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_175
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 241 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_241
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 31 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_31
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 50 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_50
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 14 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_14
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 231 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_231
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 66 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_66
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 109 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_109
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 155 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_155
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 13 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_13
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 133 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_133
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 195 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_195
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 2 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_2
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 199 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_199
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 75 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_75
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 246 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_246
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 128 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_128
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 166 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_166
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 243 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_243
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 142 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_142
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 152 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_152
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 230 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_230
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 7 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_7
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 222 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_222
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 38 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_38
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 193 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_193
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 164 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_164
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 78 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_78
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 217 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_217
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 159 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_159
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 250 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_250
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 186 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_186
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 47 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_47
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 177 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_177
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 20 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_20
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 182 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_182
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 1 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_1
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 76 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_76
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 106 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_106
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 18 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_18
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 110 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_110
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 178 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_178
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 145 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_145
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 129 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_129
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 27 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_27
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 143 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_143
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 203 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_203
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 58 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_58
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 8 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_8
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 228 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_228
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 71 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_71
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 229 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_229
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 68 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_68
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 52 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_52
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 80 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_80
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 146 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_146
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 162 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_162
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 132 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_132
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 84 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_84
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 170 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_170
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 192 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_192
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 237 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_237
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 101 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_101
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 69 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_69
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 115 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_115
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 114 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_114
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 60 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_60
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 97 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_97
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 238 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_238
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 108 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_108
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 112 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_112
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 59 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_59
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 65 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_65
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 127 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_127
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 124 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_124
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 98 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_98
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 200 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_200
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 11 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_11
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 44 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_44
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 235 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_235
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 82 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_82
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 119 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_119
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 153 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_153
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 147 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_147
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 214 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_214
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 9 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_9
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 202 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_202
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 79 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_79
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 26 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_26
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 85 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_85
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 72 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_72
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 95 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_95
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 232 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_232
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 77 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_77
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 172 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_172
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 30 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_30
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 21 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_21
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 131 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_131
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 3 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_3
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 17 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_17
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 198 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_198
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 37 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_37
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 212 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_212
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 28 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_28
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 249 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_249
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 165 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_165
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 56 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_56
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 151 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_151
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 209 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_209
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 74 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_74
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 138 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_138
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 225 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_225
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 34 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_34
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 245 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_245
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 205 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_205
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 67 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_67
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 83 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_83
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 63 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_63
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 90 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_90
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 45 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_45
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 216 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_216
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 174 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_174
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 213 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_213
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 134 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_134
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 144 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_144
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 39 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_39
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 168 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_168
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 163 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_163
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 223 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_223
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 36 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_36
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 221 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_221
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 102 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_102
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 167 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_167
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 158 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_158
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 118 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_118
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 111 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_111
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 16 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_16
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 207 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_207
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 62 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_62
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 123 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_123
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 126 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_126
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 194 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_194
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 99 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_99
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 41 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_41
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 206 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_206
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 46 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_46
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 224 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_224
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 157 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_157
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 53 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_53
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 32 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_32
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 247 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_247
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 183 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_183
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 100 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_100
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 136 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_136
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 150 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_150
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 139 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_139
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 140 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_140
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 12 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_12
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 248 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_248
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 137 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_137
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 208 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_208
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 24 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_24
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 191 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_191
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 25 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_25
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 141 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_141
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 122 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_122
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 94 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_94
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 218 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_218
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 154 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_154
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 234 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_234
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 49 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_49
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 211 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_211
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 33 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_33
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 64 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_64
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 185 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_185
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 215 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_215
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 55 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_55
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 148 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_148
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 130 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_130
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 23 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_23
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 0 THEN
    FOR r IN 
      SELECT place_id, name_vector, address_rank, search_rank,
          ST_Distance(centroid, point) as distance, null as isguess
          FROM search_name_0
          WHERE name_vector && isin_token
          AND centroid && ST_Expand(point, 0.015)
          AND search_rank between 26 and 27
      ORDER BY distance ASC limit 1
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;


  RAISE EXCEPTION 'Unknown partition %', in_partition;
END
$$;


ALTER FUNCTION public.getnearestnamedroadfeature(in_partition integer, point public.geometry, isin_token integer[]) OWNER TO nominatim;

--
-- Name: getnearestparellelroadfeature(integer, public.geometry); Type: FUNCTION; Schema: public; Owner: nominatim
--

CREATE FUNCTION public.getnearestparellelroadfeature(in_partition integer, line public.geometry) RETURNS SETOF public.nearfeature
    LANGUAGE plpgsql
    AS $$
DECLARE
  r nearfeature%rowtype;
  search_diameter FLOAT;  
  p1 GEOMETRY;
  p2 GEOMETRY;
  p3 GEOMETRY;
BEGIN

  IF st_geometrytype(line) not in ('ST_LineString') THEN
    RETURN;
  END IF;

  p1 := ST_LineInterpolatePoint(line,0);
  p2 := ST_LineInterpolatePoint(line,0.5);
  p3 := ST_LineInterpolatePoint(line,1);


  IF in_partition = 116 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_116
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 87 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_87
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 184 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_184
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 51 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_51
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 70 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_70
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 190 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_190
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 176 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_176
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 169 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_169
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 92 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_92
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 180 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_180
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 236 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_236
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 22 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_22
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 156 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_156
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 197 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_197
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 135 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_135
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 227 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_227
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 149 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_149
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 173 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_173
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 73 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_73
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 103 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_103
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 42 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_42
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 189 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_189
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 117 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_117
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 121 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_121
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 239 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_239
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 161 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_161
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 88 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_88
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 188 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_188
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 125 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_125
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 113 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_113
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 40 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_40
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 240 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_240
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 43 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_43
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 120 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_120
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 196 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_196
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 15 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_15
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 226 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_226
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 210 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_210
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 48 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_48
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 187 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_187
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 57 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_57
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 61 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_61
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 81 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_81
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 19 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_19
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 160 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_160
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 244 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_244
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 242 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_242
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 204 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_204
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 104 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_104
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 5 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_5
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 171 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_171
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 91 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_91
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 29 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_29
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 179 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_179
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 54 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_54
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 4 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_4
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 181 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_181
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 96 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_96
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 201 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_201
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 10 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_10
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 35 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_35
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 105 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_105
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 107 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_107
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 6 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_6
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 233 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_233
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 86 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_86
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 220 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_220
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 89 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_89
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 93 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_93
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 219 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_219
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 175 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_175
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 241 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_241
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 31 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_31
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 50 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_50
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 14 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_14
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 231 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_231
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 66 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_66
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 109 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_109
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 155 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_155
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 13 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_13
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 133 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_133
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 195 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_195
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 2 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_2
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 199 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_199
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 75 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_75
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 246 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_246
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 128 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_128
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 166 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_166
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 243 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_243
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 142 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_142
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 152 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_152
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 230 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_230
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 7 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_7
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 222 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_222
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 38 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_38
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 193 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_193
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 164 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_164
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 78 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_78
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 217 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_217
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 159 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_159
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 250 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_250
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 186 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_186
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 47 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_47
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 177 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_177
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 20 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_20
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 182 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_182
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 1 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_1
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 76 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_76
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 106 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_106
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 18 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_18
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 110 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_110
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 178 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_178
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 145 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_145
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 129 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_129
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 27 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_27
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 143 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_143
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 203 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_203
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 58 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_58
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 8 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_8
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 228 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_228
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 71 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_71
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 229 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_229
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 68 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_68
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 52 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_52
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 80 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_80
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 146 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_146
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 162 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_162
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 132 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_132
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 84 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_84
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 170 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_170
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 192 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_192
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 237 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_237
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 101 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_101
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 69 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_69
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 115 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_115
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 114 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_114
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 60 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_60
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 97 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_97
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 238 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_238
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 108 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_108
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 112 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_112
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 59 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_59
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 65 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_65
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 127 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_127
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 124 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_124
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 98 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_98
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 200 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_200
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 11 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_11
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 44 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_44
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 235 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_235
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 82 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_82
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 119 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_119
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 153 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_153
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 147 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_147
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 214 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_214
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 9 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_9
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 202 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_202
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 79 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_79
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 26 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_26
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 85 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_85
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 72 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_72
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 95 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_95
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 232 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_232
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 77 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_77
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 172 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_172
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 30 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_30
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 21 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_21
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 131 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_131
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 3 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_3
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 17 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_17
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 198 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_198
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 37 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_37
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 212 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_212
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 28 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_28
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 249 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_249
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 165 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_165
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 56 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_56
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 151 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_151
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 209 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_209
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 74 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_74
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 138 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_138
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 225 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_225
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 34 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_34
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 245 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_245
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 205 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_205
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 67 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_67
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 83 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_83
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 63 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_63
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 90 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_90
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 45 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_45
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 216 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_216
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 174 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_174
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 213 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_213
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 134 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_134
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 144 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_144
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 39 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_39
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 168 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_168
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 163 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_163
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 223 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_223
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 36 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_36
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 221 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_221
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 102 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_102
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 167 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_167
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 158 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_158
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 118 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_118
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 111 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_111
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 16 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_16
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 207 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_207
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 62 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_62
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 123 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_123
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 126 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_126
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 194 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_194
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 99 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_99
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 41 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_41
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 206 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_206
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 46 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_46
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 224 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_224
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 157 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_157
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 53 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_53
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 32 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_32
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 247 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_247
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 183 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_183
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 100 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_100
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 136 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_136
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 150 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_150
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 139 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_139
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 140 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_140
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 12 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_12
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 248 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_248
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 137 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_137
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 208 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_208
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 24 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_24
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 191 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_191
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 25 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_25
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 141 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_141
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 122 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_122
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 94 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_94
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 218 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_218
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 154 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_154
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 234 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_234
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 49 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_49
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 211 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_211
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 33 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_33
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 64 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_64
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 185 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_185
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 215 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_215
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 55 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_55
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 148 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_148
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 130 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_130
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 23 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_23
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 0 THEN
    search_diameter := 0.0005;
    WHILE search_diameter < 0.01 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, line) as distance, null as isguess
            FROM location_road_0
            WHERE ST_DWithin(line, geometry, search_diameter)
            ORDER BY (ST_distance(geometry, p1)+
                      ST_distance(geometry, p2)+
                      ST_distance(geometry, p3)) ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;


  RAISE EXCEPTION 'Unknown partition %', in_partition;
END
$$;


ALTER FUNCTION public.getnearestparellelroadfeature(in_partition integer, line public.geometry) OWNER TO nominatim;

--
-- Name: getnearestroadfeature(integer, public.geometry); Type: FUNCTION; Schema: public; Owner: nominatim
--

CREATE FUNCTION public.getnearestroadfeature(in_partition integer, point public.geometry) RETURNS SETOF public.nearfeature
    LANGUAGE plpgsql
    AS $$
DECLARE
  r nearfeature%rowtype;
  search_diameter FLOAT;  
BEGIN


  IF in_partition = 116 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_116
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 87 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_87
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 184 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_184
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 51 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_51
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 70 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_70
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 190 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_190
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 176 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_176
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 169 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_169
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 92 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_92
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 180 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_180
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 236 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_236
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 22 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_22
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 156 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_156
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 197 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_197
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 135 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_135
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 227 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_227
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 149 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_149
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 173 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_173
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 73 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_73
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 103 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_103
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 42 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_42
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 189 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_189
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 117 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_117
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 121 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_121
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 239 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_239
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 161 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_161
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 88 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_88
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 188 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_188
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 125 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_125
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 113 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_113
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 40 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_40
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 240 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_240
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 43 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_43
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 120 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_120
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 196 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_196
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 15 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_15
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 226 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_226
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 210 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_210
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 48 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_48
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 187 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_187
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 57 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_57
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 61 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_61
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 81 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_81
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 19 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_19
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 160 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_160
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 244 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_244
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 242 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_242
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 204 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_204
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 104 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_104
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 5 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_5
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 171 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_171
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 91 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_91
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 29 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_29
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 179 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_179
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 54 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_54
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 4 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_4
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 181 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_181
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 96 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_96
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 201 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_201
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 10 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_10
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 35 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_35
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 105 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_105
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 107 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_107
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 6 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_6
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 233 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_233
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 86 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_86
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 220 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_220
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 89 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_89
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 93 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_93
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 219 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_219
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 175 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_175
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 241 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_241
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 31 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_31
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 50 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_50
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 14 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_14
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 231 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_231
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 66 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_66
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 109 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_109
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 155 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_155
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 13 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_13
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 133 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_133
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 195 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_195
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 2 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_2
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 199 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_199
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 75 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_75
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 246 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_246
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 128 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_128
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 166 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_166
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 243 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_243
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 142 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_142
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 152 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_152
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 230 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_230
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 7 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_7
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 222 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_222
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 38 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_38
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 193 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_193
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 164 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_164
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 78 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_78
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 217 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_217
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 159 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_159
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 250 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_250
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 186 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_186
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 47 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_47
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 177 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_177
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 20 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_20
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 182 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_182
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 1 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_1
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 76 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_76
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 106 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_106
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 18 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_18
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 110 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_110
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 178 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_178
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 145 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_145
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 129 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_129
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 27 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_27
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 143 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_143
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 203 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_203
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 58 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_58
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 8 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_8
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 228 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_228
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 71 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_71
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 229 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_229
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 68 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_68
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 52 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_52
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 80 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_80
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 146 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_146
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 162 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_162
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 132 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_132
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 84 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_84
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 170 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_170
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 192 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_192
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 237 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_237
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 101 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_101
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 69 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_69
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 115 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_115
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 114 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_114
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 60 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_60
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 97 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_97
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 238 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_238
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 108 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_108
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 112 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_112
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 59 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_59
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 65 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_65
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 127 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_127
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 124 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_124
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 98 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_98
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 200 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_200
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 11 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_11
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 44 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_44
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 235 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_235
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 82 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_82
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 119 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_119
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 153 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_153
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 147 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_147
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 214 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_214
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 9 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_9
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 202 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_202
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 79 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_79
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 26 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_26
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 85 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_85
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 72 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_72
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 95 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_95
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 232 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_232
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 77 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_77
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 172 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_172
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 30 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_30
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 21 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_21
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 131 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_131
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 3 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_3
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 17 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_17
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 198 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_198
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 37 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_37
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 212 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_212
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 28 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_28
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 249 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_249
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 165 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_165
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 56 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_56
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 151 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_151
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 209 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_209
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 74 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_74
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 138 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_138
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 225 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_225
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 34 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_34
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 245 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_245
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 205 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_205
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 67 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_67
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 83 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_83
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 63 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_63
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 90 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_90
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 45 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_45
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 216 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_216
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 174 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_174
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 213 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_213
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 134 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_134
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 144 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_144
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 39 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_39
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 168 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_168
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 163 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_163
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 223 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_223
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 36 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_36
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 221 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_221
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 102 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_102
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 167 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_167
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 158 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_158
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 118 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_118
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 111 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_111
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 16 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_16
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 207 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_207
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 62 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_62
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 123 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_123
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 126 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_126
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 194 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_194
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 99 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_99
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 41 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_41
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 206 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_206
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 46 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_46
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 224 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_224
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 157 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_157
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 53 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_53
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 32 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_32
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 247 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_247
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 183 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_183
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 100 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_100
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 136 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_136
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 150 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_150
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 139 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_139
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 140 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_140
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 12 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_12
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 248 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_248
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 137 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_137
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 208 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_208
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 24 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_24
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 191 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_191
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 25 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_25
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 141 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_141
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 122 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_122
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 94 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_94
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 218 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_218
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 154 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_154
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 234 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_234
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 49 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_49
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 211 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_211
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 33 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_33
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 64 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_64
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 185 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_185
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 215 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_215
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 55 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_55
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 148 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_148
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 130 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_130
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 23 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_23
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 0 THEN
    search_diameter := 0.00005;
    WHILE search_diameter < 0.1 LOOP
      FOR r IN 
        SELECT place_id, null, null, null,
            ST_Distance(geometry, point) as distance, null as isguess
            FROM location_road_0
            WHERE ST_DWithin(geometry, point, search_diameter) 
        ORDER BY distance ASC limit 1
      LOOP
        RETURN NEXT r;
        RETURN;
      END LOOP;
      search_diameter := search_diameter * 2;
    END LOOP;
    RETURN;
  END IF;


  RAISE EXCEPTION 'Unknown partition %', in_partition;
END
$$;


ALTER FUNCTION public.getnearestroadfeature(in_partition integer, point public.geometry) OWNER TO nominatim;

--
-- Name: getnearfeatures(integer, public.geometry, integer, integer[]); Type: FUNCTION; Schema: public; Owner: nominatim
--

CREATE FUNCTION public.getnearfeatures(in_partition integer, feature public.geometry, maxrank integer, isin_tokens integer[]) RETURNS SETOF public.nearfeaturecentr
    LANGUAGE plpgsql
    AS $$
DECLARE
  r nearfeaturecentr%rowtype;
BEGIN


  IF in_partition = 116 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_116
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 87 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_87
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 184 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_184
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 51 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_51
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 70 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_70
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 190 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_190
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 176 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_176
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 169 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_169
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 92 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_92
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 180 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_180
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 236 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_236
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 22 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_22
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 156 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_156
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 197 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_197
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 135 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_135
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 227 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_227
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 149 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_149
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 173 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_173
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 73 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_73
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 103 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_103
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 42 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_42
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 189 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_189
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 117 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_117
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 121 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_121
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 239 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_239
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 161 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_161
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 88 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_88
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 188 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_188
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 125 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_125
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 113 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_113
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 40 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_40
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 240 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_240
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 43 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_43
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 120 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_120
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 196 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_196
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 15 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_15
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 226 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_226
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 210 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_210
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 48 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_48
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 187 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_187
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 57 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_57
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 61 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_61
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 81 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_81
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 19 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_19
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 160 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_160
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 244 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_244
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 242 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_242
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 204 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_204
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 104 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_104
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 5 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_5
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 171 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_171
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 91 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_91
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 29 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_29
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 179 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_179
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 54 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_54
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 4 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_4
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 181 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_181
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 96 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_96
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 201 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_201
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 10 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_10
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 35 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_35
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 105 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_105
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 107 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_107
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 6 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_6
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 233 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_233
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 86 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_86
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 220 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_220
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 89 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_89
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 93 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_93
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 219 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_219
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 175 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_175
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 241 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_241
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 31 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_31
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 50 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_50
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 14 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_14
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 231 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_231
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 66 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_66
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 109 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_109
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 155 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_155
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 13 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_13
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 133 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_133
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 195 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_195
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 2 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_2
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 199 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_199
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 75 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_75
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 246 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_246
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 128 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_128
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 166 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_166
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 243 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_243
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 142 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_142
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 152 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_152
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 230 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_230
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 7 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_7
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 222 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_222
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 38 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_38
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 193 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_193
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 164 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_164
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 78 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_78
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 217 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_217
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 159 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_159
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 250 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_250
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 186 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_186
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 47 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_47
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 177 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_177
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 20 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_20
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 182 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_182
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 1 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_1
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 76 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_76
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 106 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_106
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 18 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_18
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 110 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_110
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 178 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_178
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 145 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_145
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 129 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_129
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 27 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_27
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 143 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_143
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 203 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_203
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 58 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_58
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 8 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_8
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 228 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_228
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 71 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_71
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 229 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_229
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 68 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_68
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 52 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_52
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 80 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_80
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 146 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_146
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 162 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_162
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 132 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_132
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 84 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_84
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 170 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_170
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 192 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_192
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 237 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_237
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 101 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_101
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 69 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_69
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 115 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_115
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 114 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_114
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 60 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_60
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 97 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_97
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 238 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_238
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 108 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_108
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 112 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_112
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 59 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_59
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 65 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_65
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 127 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_127
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 124 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_124
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 98 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_98
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 200 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_200
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 11 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_11
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 44 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_44
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 235 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_235
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 82 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_82
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 119 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_119
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 153 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_153
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 147 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_147
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 214 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_214
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 9 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_9
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 202 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_202
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 79 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_79
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 26 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_26
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 85 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_85
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 72 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_72
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 95 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_95
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 232 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_232
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 77 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_77
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 172 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_172
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 30 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_30
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 21 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_21
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 131 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_131
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 3 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_3
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 17 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_17
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 198 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_198
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 37 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_37
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 212 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_212
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 28 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_28
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 249 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_249
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 165 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_165
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 56 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_56
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 151 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_151
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 209 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_209
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 74 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_74
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 138 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_138
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 225 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_225
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 34 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_34
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 245 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_245
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 205 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_205
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 67 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_67
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 83 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_83
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 63 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_63
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 90 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_90
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 45 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_45
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 216 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_216
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 174 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_174
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 213 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_213
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 134 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_134
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 144 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_144
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 39 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_39
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 168 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_168
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 163 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_163
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 223 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_223
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 36 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_36
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 221 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_221
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 102 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_102
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 167 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_167
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 158 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_158
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 118 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_118
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 111 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_111
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 16 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_16
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 207 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_207
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 62 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_62
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 123 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_123
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 126 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_126
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 194 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_194
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 99 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_99
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 41 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_41
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 206 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_206
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 46 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_46
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 224 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_224
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 157 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_157
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 53 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_53
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 32 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_32
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 247 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_247
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 183 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_183
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 100 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_100
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 136 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_136
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 150 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_150
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 139 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_139
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 140 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_140
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 12 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_12
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 248 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_248
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 137 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_137
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 208 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_208
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 24 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_24
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 191 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_191
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 25 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_25
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 141 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_141
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 122 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_122
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 94 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_94
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 218 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_218
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 154 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_154
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 234 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_234
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 49 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_49
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 211 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_211
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 33 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_33
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 64 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_64
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 185 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_185
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 215 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_215
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 55 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_55
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 148 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_148
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 130 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_130
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 23 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_23
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;

  IF in_partition = 0 THEN
    FOR r IN 
      SELECT place_id, keywords, rank_address, rank_search, min(ST_Distance(feature, centroid)) as distance, isguess, postcode, centroid
      FROM location_area_large_0
      WHERE ST_Intersects(geometry, feature) and rank_search < maxrank
      GROUP BY place_id, keywords, rank_address, rank_search, isguess, postcode, centroid
      ORDER BY rank_address, isin_tokens && keywords desc, isguess asc,
        ST_Distance(feature, centroid) *
          CASE 
               WHEN rank_address = 16 AND rank_search = 15 THEN 0.2 -- capital city
               WHEN rank_address = 16 AND rank_search = 16 THEN 0.25 -- city
               WHEN rank_address = 16 AND rank_search = 17 THEN 0.5 -- town
               ELSE 1 END ASC -- everything else
    LOOP
      RETURN NEXT r;
    END LOOP;
    RETURN;
  END IF;


  RAISE EXCEPTION 'Unknown partition %', in_partition;
END
$$;


ALTER FUNCTION public.getnearfeatures(in_partition integer, feature public.geometry, maxrank integer, isin_tokens integer[]) OWNER TO nominatim;

--
-- Name: getorcreate_amenity(text, text, text, text); Type: FUNCTION; Schema: public; Owner: nominatim
--

CREATE FUNCTION public.getorcreate_amenity(lookup_word text, normalized_word text, lookup_class text, lookup_type text) RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
  lookup_token TEXT;
  return_word_id INTEGER;
BEGIN
  lookup_token := ' '||trim(lookup_word);
  SELECT min(word_id) FROM word WHERE word_token = lookup_token and word=normalized_word and class=lookup_class and type = lookup_type into return_word_id;
  IF return_word_id IS NULL THEN
    return_word_id := nextval('seq_word');
    INSERT INTO word VALUES (return_word_id, lookup_token, normalized_word, lookup_class, lookup_type, null, 0);
  END IF;
  RETURN return_word_id;
END;
$$;


ALTER FUNCTION public.getorcreate_amenity(lookup_word text, normalized_word text, lookup_class text, lookup_type text) OWNER TO nominatim;

--
-- Name: getorcreate_amenityoperator(text, text, text, text, text); Type: FUNCTION; Schema: public; Owner: nominatim
--

CREATE FUNCTION public.getorcreate_amenityoperator(lookup_word text, normalized_word text, lookup_class text, lookup_type text, op text) RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
  lookup_token TEXT;
  return_word_id INTEGER;
BEGIN
  lookup_token := ' '||trim(lookup_word);
  SELECT min(word_id) FROM word WHERE word_token = lookup_token and word=normalized_word and class=lookup_class and type = lookup_type and operator = op into return_word_id;
  IF return_word_id IS NULL THEN
    return_word_id := nextval('seq_word');
    INSERT INTO word VALUES (return_word_id, lookup_token, normalized_word, lookup_class, lookup_type, null, 0, op);
  END IF;
  RETURN return_word_id;
END;
$$;


ALTER FUNCTION public.getorcreate_amenityoperator(lookup_word text, normalized_word text, lookup_class text, lookup_type text, op text) OWNER TO nominatim;

--
-- Name: getorcreate_country(text, character varying); Type: FUNCTION; Schema: public; Owner: nominatim
--

CREATE FUNCTION public.getorcreate_country(lookup_word text, lookup_country_code character varying) RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
  lookup_token TEXT;
  return_word_id INTEGER;
BEGIN
  lookup_token := ' '||trim(lookup_word);
  SELECT min(word_id) FROM word WHERE word_token = lookup_token and country_code=lookup_country_code into return_word_id;
  IF return_word_id IS NULL THEN
    return_word_id := nextval('seq_word');
    INSERT INTO word VALUES (return_word_id, lookup_token, null, null, null, lookup_country_code, 0);
  END IF;
  RETURN return_word_id;
END;
$$;


ALTER FUNCTION public.getorcreate_country(lookup_word text, lookup_country_code character varying) OWNER TO nominatim;

--
-- Name: getorcreate_housenumber_id(text); Type: FUNCTION; Schema: public; Owner: nominatim
--

CREATE FUNCTION public.getorcreate_housenumber_id(lookup_word text) RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
  lookup_token TEXT;
  return_word_id INTEGER;
BEGIN
  lookup_token := ' '||trim(lookup_word);
  SELECT min(word_id) FROM word WHERE word_token = lookup_token and class='place' and type='house' into return_word_id;
  IF return_word_id IS NULL THEN
    return_word_id := nextval('seq_word');
    INSERT INTO word VALUES (return_word_id, lookup_token, null, 'place', 'house', null, 0);
  END IF;
  RETURN return_word_id;
END;
$$;


ALTER FUNCTION public.getorcreate_housenumber_id(lookup_word text) OWNER TO nominatim;

--
-- Name: getorcreate_name_id(text); Type: FUNCTION; Schema: public; Owner: nominatim
--

CREATE FUNCTION public.getorcreate_name_id(lookup_word text) RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
BEGIN
  RETURN getorcreate_name_id(lookup_word, '');
END;
$$;


ALTER FUNCTION public.getorcreate_name_id(lookup_word text) OWNER TO nominatim;

--
-- Name: getorcreate_name_id(text, text); Type: FUNCTION; Schema: public; Owner: nominatim
--

CREATE FUNCTION public.getorcreate_name_id(lookup_word text, src_word text) RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
  lookup_token TEXT;
  nospace_lookup_token TEXT;
  return_word_id INTEGER;
BEGIN
  lookup_token := ' '||trim(lookup_word);
  SELECT min(word_id) FROM word WHERE word_token = lookup_token and class is null and type is null into return_word_id;
  IF return_word_id IS NULL THEN
    return_word_id := nextval('seq_word');
    INSERT INTO word VALUES (return_word_id, lookup_token, src_word, null, null, null, 0);
--    nospace_lookup_token := replace(replace(lookup_token, '-',''), ' ','');
--    IF ' '||nospace_lookup_token != lookup_token THEN
--      INSERT INTO word VALUES (return_word_id, '-'||nospace_lookup_token, null, src_word, null, null, null, 0, null);
--    END IF;
  END IF;
  RETURN return_word_id;
END;
$$;


ALTER FUNCTION public.getorcreate_name_id(lookup_word text, src_word text) OWNER TO nominatim;

--
-- Name: getorcreate_postcode_id(text); Type: FUNCTION; Schema: public; Owner: nominatim
--

CREATE FUNCTION public.getorcreate_postcode_id(postcode text) RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
  lookup_token TEXT;
  lookup_word TEXT;
  return_word_id INTEGER;
BEGIN
  lookup_word := upper(trim(postcode));
  lookup_token := ' ' || make_standard_name(lookup_word);
  SELECT min(word_id) FROM word WHERE word_token = lookup_token and class='place' and type='postcode' into return_word_id;
  IF return_word_id IS NULL THEN
    return_word_id := nextval('seq_word');
    INSERT INTO word VALUES (return_word_id, lookup_token, lookup_word, 'place', 'postcode', null, 0);
  END IF;
  RETURN return_word_id;
END;
$$;


ALTER FUNCTION public.getorcreate_postcode_id(postcode text) OWNER TO nominatim;

--
-- Name: getorcreate_word_id(text); Type: FUNCTION; Schema: public; Owner: nominatim
--

CREATE FUNCTION public.getorcreate_word_id(lookup_word text) RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
  lookup_token TEXT;
  return_word_id INTEGER;
  count INTEGER;
BEGIN
  lookup_token := trim(lookup_word);
  SELECT min(word_id), max(search_name_count) FROM word WHERE word_token = lookup_token and class is null and type is null into return_word_id, count;
  IF return_word_id IS NULL THEN
    return_word_id := nextval('seq_word');
    INSERT INTO word VALUES (return_word_id, lookup_token, null, null, null, null, 0);
  ELSE
    IF count > get_maxwordfreq() THEN
      return_word_id := NULL;
    END IF;
  END IF;
  RETURN return_word_id;
END;
$$;


ALTER FUNCTION public.getorcreate_word_id(lookup_word text) OWNER TO nominatim;

--
-- Name: insertlocationarealarge(integer, bigint, character varying, integer[], integer, integer, boolean, text, public.geometry, public.geometry); Type: FUNCTION; Schema: public; Owner: nominatim
--

CREATE FUNCTION public.insertlocationarealarge(in_partition integer, in_place_id bigint, in_country_code character varying, in_keywords integer[], in_rank_search integer, in_rank_address integer, in_estimate boolean, postcode text, in_centroid public.geometry, in_geometry public.geometry) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
BEGIN
  IF in_rank_address = 0 THEN
    RETURN TRUE;
  END IF;

  IF in_rank_search <= 4 and not in_estimate THEN
    INSERT INTO location_area_country (place_id, country_code, geometry)
      values (in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;


  IF in_partition = 116 THEN
    INSERT INTO location_area_large_116 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 87 THEN
    INSERT INTO location_area_large_87 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 184 THEN
    INSERT INTO location_area_large_184 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 51 THEN
    INSERT INTO location_area_large_51 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 70 THEN
    INSERT INTO location_area_large_70 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 190 THEN
    INSERT INTO location_area_large_190 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 176 THEN
    INSERT INTO location_area_large_176 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 169 THEN
    INSERT INTO location_area_large_169 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 92 THEN
    INSERT INTO location_area_large_92 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 180 THEN
    INSERT INTO location_area_large_180 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 236 THEN
    INSERT INTO location_area_large_236 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 22 THEN
    INSERT INTO location_area_large_22 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 156 THEN
    INSERT INTO location_area_large_156 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 197 THEN
    INSERT INTO location_area_large_197 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 135 THEN
    INSERT INTO location_area_large_135 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 227 THEN
    INSERT INTO location_area_large_227 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 149 THEN
    INSERT INTO location_area_large_149 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 173 THEN
    INSERT INTO location_area_large_173 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 73 THEN
    INSERT INTO location_area_large_73 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 103 THEN
    INSERT INTO location_area_large_103 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 42 THEN
    INSERT INTO location_area_large_42 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 189 THEN
    INSERT INTO location_area_large_189 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 117 THEN
    INSERT INTO location_area_large_117 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 121 THEN
    INSERT INTO location_area_large_121 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 239 THEN
    INSERT INTO location_area_large_239 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 161 THEN
    INSERT INTO location_area_large_161 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 88 THEN
    INSERT INTO location_area_large_88 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 188 THEN
    INSERT INTO location_area_large_188 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 125 THEN
    INSERT INTO location_area_large_125 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 113 THEN
    INSERT INTO location_area_large_113 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 40 THEN
    INSERT INTO location_area_large_40 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 240 THEN
    INSERT INTO location_area_large_240 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 43 THEN
    INSERT INTO location_area_large_43 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 120 THEN
    INSERT INTO location_area_large_120 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 196 THEN
    INSERT INTO location_area_large_196 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 15 THEN
    INSERT INTO location_area_large_15 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 226 THEN
    INSERT INTO location_area_large_226 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 210 THEN
    INSERT INTO location_area_large_210 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 48 THEN
    INSERT INTO location_area_large_48 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 187 THEN
    INSERT INTO location_area_large_187 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 57 THEN
    INSERT INTO location_area_large_57 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 61 THEN
    INSERT INTO location_area_large_61 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 81 THEN
    INSERT INTO location_area_large_81 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 19 THEN
    INSERT INTO location_area_large_19 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 160 THEN
    INSERT INTO location_area_large_160 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 244 THEN
    INSERT INTO location_area_large_244 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 242 THEN
    INSERT INTO location_area_large_242 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 204 THEN
    INSERT INTO location_area_large_204 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 104 THEN
    INSERT INTO location_area_large_104 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 5 THEN
    INSERT INTO location_area_large_5 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 171 THEN
    INSERT INTO location_area_large_171 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 91 THEN
    INSERT INTO location_area_large_91 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 29 THEN
    INSERT INTO location_area_large_29 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 179 THEN
    INSERT INTO location_area_large_179 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 54 THEN
    INSERT INTO location_area_large_54 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 4 THEN
    INSERT INTO location_area_large_4 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 181 THEN
    INSERT INTO location_area_large_181 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 96 THEN
    INSERT INTO location_area_large_96 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 201 THEN
    INSERT INTO location_area_large_201 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 10 THEN
    INSERT INTO location_area_large_10 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 35 THEN
    INSERT INTO location_area_large_35 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 105 THEN
    INSERT INTO location_area_large_105 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 107 THEN
    INSERT INTO location_area_large_107 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 6 THEN
    INSERT INTO location_area_large_6 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 233 THEN
    INSERT INTO location_area_large_233 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 86 THEN
    INSERT INTO location_area_large_86 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 220 THEN
    INSERT INTO location_area_large_220 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 89 THEN
    INSERT INTO location_area_large_89 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 93 THEN
    INSERT INTO location_area_large_93 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 219 THEN
    INSERT INTO location_area_large_219 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 175 THEN
    INSERT INTO location_area_large_175 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 241 THEN
    INSERT INTO location_area_large_241 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 31 THEN
    INSERT INTO location_area_large_31 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 50 THEN
    INSERT INTO location_area_large_50 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 14 THEN
    INSERT INTO location_area_large_14 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 231 THEN
    INSERT INTO location_area_large_231 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 66 THEN
    INSERT INTO location_area_large_66 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 109 THEN
    INSERT INTO location_area_large_109 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 155 THEN
    INSERT INTO location_area_large_155 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 13 THEN
    INSERT INTO location_area_large_13 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 133 THEN
    INSERT INTO location_area_large_133 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 195 THEN
    INSERT INTO location_area_large_195 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 2 THEN
    INSERT INTO location_area_large_2 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 199 THEN
    INSERT INTO location_area_large_199 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 75 THEN
    INSERT INTO location_area_large_75 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 246 THEN
    INSERT INTO location_area_large_246 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 128 THEN
    INSERT INTO location_area_large_128 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 166 THEN
    INSERT INTO location_area_large_166 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 243 THEN
    INSERT INTO location_area_large_243 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 142 THEN
    INSERT INTO location_area_large_142 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 152 THEN
    INSERT INTO location_area_large_152 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 230 THEN
    INSERT INTO location_area_large_230 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 7 THEN
    INSERT INTO location_area_large_7 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 222 THEN
    INSERT INTO location_area_large_222 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 38 THEN
    INSERT INTO location_area_large_38 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 193 THEN
    INSERT INTO location_area_large_193 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 164 THEN
    INSERT INTO location_area_large_164 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 78 THEN
    INSERT INTO location_area_large_78 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 217 THEN
    INSERT INTO location_area_large_217 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 159 THEN
    INSERT INTO location_area_large_159 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 250 THEN
    INSERT INTO location_area_large_250 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 186 THEN
    INSERT INTO location_area_large_186 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 47 THEN
    INSERT INTO location_area_large_47 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 177 THEN
    INSERT INTO location_area_large_177 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 20 THEN
    INSERT INTO location_area_large_20 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 182 THEN
    INSERT INTO location_area_large_182 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 1 THEN
    INSERT INTO location_area_large_1 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 76 THEN
    INSERT INTO location_area_large_76 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 106 THEN
    INSERT INTO location_area_large_106 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 18 THEN
    INSERT INTO location_area_large_18 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 110 THEN
    INSERT INTO location_area_large_110 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 178 THEN
    INSERT INTO location_area_large_178 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 145 THEN
    INSERT INTO location_area_large_145 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 129 THEN
    INSERT INTO location_area_large_129 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 27 THEN
    INSERT INTO location_area_large_27 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 143 THEN
    INSERT INTO location_area_large_143 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 203 THEN
    INSERT INTO location_area_large_203 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 58 THEN
    INSERT INTO location_area_large_58 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 8 THEN
    INSERT INTO location_area_large_8 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 228 THEN
    INSERT INTO location_area_large_228 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 71 THEN
    INSERT INTO location_area_large_71 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 229 THEN
    INSERT INTO location_area_large_229 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 68 THEN
    INSERT INTO location_area_large_68 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 52 THEN
    INSERT INTO location_area_large_52 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 80 THEN
    INSERT INTO location_area_large_80 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 146 THEN
    INSERT INTO location_area_large_146 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 162 THEN
    INSERT INTO location_area_large_162 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 132 THEN
    INSERT INTO location_area_large_132 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 84 THEN
    INSERT INTO location_area_large_84 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 170 THEN
    INSERT INTO location_area_large_170 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 192 THEN
    INSERT INTO location_area_large_192 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 237 THEN
    INSERT INTO location_area_large_237 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 101 THEN
    INSERT INTO location_area_large_101 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 69 THEN
    INSERT INTO location_area_large_69 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 115 THEN
    INSERT INTO location_area_large_115 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 114 THEN
    INSERT INTO location_area_large_114 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 60 THEN
    INSERT INTO location_area_large_60 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 97 THEN
    INSERT INTO location_area_large_97 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 238 THEN
    INSERT INTO location_area_large_238 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 108 THEN
    INSERT INTO location_area_large_108 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 112 THEN
    INSERT INTO location_area_large_112 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 59 THEN
    INSERT INTO location_area_large_59 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 65 THEN
    INSERT INTO location_area_large_65 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 127 THEN
    INSERT INTO location_area_large_127 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 124 THEN
    INSERT INTO location_area_large_124 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 98 THEN
    INSERT INTO location_area_large_98 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 200 THEN
    INSERT INTO location_area_large_200 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 11 THEN
    INSERT INTO location_area_large_11 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 44 THEN
    INSERT INTO location_area_large_44 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 235 THEN
    INSERT INTO location_area_large_235 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 82 THEN
    INSERT INTO location_area_large_82 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 119 THEN
    INSERT INTO location_area_large_119 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 153 THEN
    INSERT INTO location_area_large_153 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 147 THEN
    INSERT INTO location_area_large_147 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 214 THEN
    INSERT INTO location_area_large_214 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 9 THEN
    INSERT INTO location_area_large_9 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 202 THEN
    INSERT INTO location_area_large_202 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 79 THEN
    INSERT INTO location_area_large_79 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 26 THEN
    INSERT INTO location_area_large_26 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 85 THEN
    INSERT INTO location_area_large_85 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 72 THEN
    INSERT INTO location_area_large_72 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 95 THEN
    INSERT INTO location_area_large_95 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 232 THEN
    INSERT INTO location_area_large_232 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 77 THEN
    INSERT INTO location_area_large_77 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 172 THEN
    INSERT INTO location_area_large_172 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 30 THEN
    INSERT INTO location_area_large_30 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 21 THEN
    INSERT INTO location_area_large_21 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 131 THEN
    INSERT INTO location_area_large_131 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 3 THEN
    INSERT INTO location_area_large_3 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 17 THEN
    INSERT INTO location_area_large_17 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 198 THEN
    INSERT INTO location_area_large_198 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 37 THEN
    INSERT INTO location_area_large_37 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 212 THEN
    INSERT INTO location_area_large_212 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 28 THEN
    INSERT INTO location_area_large_28 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 249 THEN
    INSERT INTO location_area_large_249 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 165 THEN
    INSERT INTO location_area_large_165 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 56 THEN
    INSERT INTO location_area_large_56 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 151 THEN
    INSERT INTO location_area_large_151 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 209 THEN
    INSERT INTO location_area_large_209 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 74 THEN
    INSERT INTO location_area_large_74 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 138 THEN
    INSERT INTO location_area_large_138 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 225 THEN
    INSERT INTO location_area_large_225 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 34 THEN
    INSERT INTO location_area_large_34 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 245 THEN
    INSERT INTO location_area_large_245 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 205 THEN
    INSERT INTO location_area_large_205 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 67 THEN
    INSERT INTO location_area_large_67 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 83 THEN
    INSERT INTO location_area_large_83 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 63 THEN
    INSERT INTO location_area_large_63 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 90 THEN
    INSERT INTO location_area_large_90 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 45 THEN
    INSERT INTO location_area_large_45 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 216 THEN
    INSERT INTO location_area_large_216 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 174 THEN
    INSERT INTO location_area_large_174 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 213 THEN
    INSERT INTO location_area_large_213 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 134 THEN
    INSERT INTO location_area_large_134 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 144 THEN
    INSERT INTO location_area_large_144 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 39 THEN
    INSERT INTO location_area_large_39 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 168 THEN
    INSERT INTO location_area_large_168 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 163 THEN
    INSERT INTO location_area_large_163 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 223 THEN
    INSERT INTO location_area_large_223 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 36 THEN
    INSERT INTO location_area_large_36 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 221 THEN
    INSERT INTO location_area_large_221 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 102 THEN
    INSERT INTO location_area_large_102 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 167 THEN
    INSERT INTO location_area_large_167 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 158 THEN
    INSERT INTO location_area_large_158 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 118 THEN
    INSERT INTO location_area_large_118 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 111 THEN
    INSERT INTO location_area_large_111 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 16 THEN
    INSERT INTO location_area_large_16 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 207 THEN
    INSERT INTO location_area_large_207 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 62 THEN
    INSERT INTO location_area_large_62 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 123 THEN
    INSERT INTO location_area_large_123 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 126 THEN
    INSERT INTO location_area_large_126 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 194 THEN
    INSERT INTO location_area_large_194 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 99 THEN
    INSERT INTO location_area_large_99 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 41 THEN
    INSERT INTO location_area_large_41 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 206 THEN
    INSERT INTO location_area_large_206 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 46 THEN
    INSERT INTO location_area_large_46 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 224 THEN
    INSERT INTO location_area_large_224 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 157 THEN
    INSERT INTO location_area_large_157 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 53 THEN
    INSERT INTO location_area_large_53 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 32 THEN
    INSERT INTO location_area_large_32 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 247 THEN
    INSERT INTO location_area_large_247 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 183 THEN
    INSERT INTO location_area_large_183 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 100 THEN
    INSERT INTO location_area_large_100 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 136 THEN
    INSERT INTO location_area_large_136 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 150 THEN
    INSERT INTO location_area_large_150 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 139 THEN
    INSERT INTO location_area_large_139 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 140 THEN
    INSERT INTO location_area_large_140 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 12 THEN
    INSERT INTO location_area_large_12 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 248 THEN
    INSERT INTO location_area_large_248 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 137 THEN
    INSERT INTO location_area_large_137 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 208 THEN
    INSERT INTO location_area_large_208 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 24 THEN
    INSERT INTO location_area_large_24 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 191 THEN
    INSERT INTO location_area_large_191 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 25 THEN
    INSERT INTO location_area_large_25 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 141 THEN
    INSERT INTO location_area_large_141 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 122 THEN
    INSERT INTO location_area_large_122 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 94 THEN
    INSERT INTO location_area_large_94 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 218 THEN
    INSERT INTO location_area_large_218 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 154 THEN
    INSERT INTO location_area_large_154 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 234 THEN
    INSERT INTO location_area_large_234 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 49 THEN
    INSERT INTO location_area_large_49 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 211 THEN
    INSERT INTO location_area_large_211 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 33 THEN
    INSERT INTO location_area_large_33 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 64 THEN
    INSERT INTO location_area_large_64 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 185 THEN
    INSERT INTO location_area_large_185 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 215 THEN
    INSERT INTO location_area_large_215 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 55 THEN
    INSERT INTO location_area_large_55 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 148 THEN
    INSERT INTO location_area_large_148 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 130 THEN
    INSERT INTO location_area_large_130 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 23 THEN
    INSERT INTO location_area_large_23 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 0 THEN
    INSERT INTO location_area_large_0 (partition, place_id, country_code, keywords, rank_search, rank_address, isguess, postcode, centroid, geometry)
      values (in_partition, in_place_id, in_country_code, in_keywords, in_rank_search, in_rank_address, in_estimate, postcode, in_centroid, in_geometry);
    RETURN TRUE;
  END IF;


  RAISE EXCEPTION 'Unknown partition %', in_partition;
  RETURN FALSE;
END
$$;


ALTER FUNCTION public.insertlocationarealarge(in_partition integer, in_place_id bigint, in_country_code character varying, in_keywords integer[], in_rank_search integer, in_rank_address integer, in_estimate boolean, postcode text, in_centroid public.geometry, in_geometry public.geometry) OWNER TO nominatim;

--
-- Name: insertlocationroad(integer, bigint, character varying, public.geometry); Type: FUNCTION; Schema: public; Owner: nominatim
--

CREATE FUNCTION public.insertlocationroad(in_partition integer, in_place_id bigint, in_country_code character varying, in_geometry public.geometry) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
BEGIN


  IF in_partition = 116 THEN
    DELETE FROM location_road_116 where place_id = in_place_id;
    INSERT INTO location_road_116 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 87 THEN
    DELETE FROM location_road_87 where place_id = in_place_id;
    INSERT INTO location_road_87 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 184 THEN
    DELETE FROM location_road_184 where place_id = in_place_id;
    INSERT INTO location_road_184 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 51 THEN
    DELETE FROM location_road_51 where place_id = in_place_id;
    INSERT INTO location_road_51 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 70 THEN
    DELETE FROM location_road_70 where place_id = in_place_id;
    INSERT INTO location_road_70 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 190 THEN
    DELETE FROM location_road_190 where place_id = in_place_id;
    INSERT INTO location_road_190 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 176 THEN
    DELETE FROM location_road_176 where place_id = in_place_id;
    INSERT INTO location_road_176 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 169 THEN
    DELETE FROM location_road_169 where place_id = in_place_id;
    INSERT INTO location_road_169 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 92 THEN
    DELETE FROM location_road_92 where place_id = in_place_id;
    INSERT INTO location_road_92 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 180 THEN
    DELETE FROM location_road_180 where place_id = in_place_id;
    INSERT INTO location_road_180 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 236 THEN
    DELETE FROM location_road_236 where place_id = in_place_id;
    INSERT INTO location_road_236 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 22 THEN
    DELETE FROM location_road_22 where place_id = in_place_id;
    INSERT INTO location_road_22 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 156 THEN
    DELETE FROM location_road_156 where place_id = in_place_id;
    INSERT INTO location_road_156 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 197 THEN
    DELETE FROM location_road_197 where place_id = in_place_id;
    INSERT INTO location_road_197 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 135 THEN
    DELETE FROM location_road_135 where place_id = in_place_id;
    INSERT INTO location_road_135 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 227 THEN
    DELETE FROM location_road_227 where place_id = in_place_id;
    INSERT INTO location_road_227 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 149 THEN
    DELETE FROM location_road_149 where place_id = in_place_id;
    INSERT INTO location_road_149 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 173 THEN
    DELETE FROM location_road_173 where place_id = in_place_id;
    INSERT INTO location_road_173 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 73 THEN
    DELETE FROM location_road_73 where place_id = in_place_id;
    INSERT INTO location_road_73 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 103 THEN
    DELETE FROM location_road_103 where place_id = in_place_id;
    INSERT INTO location_road_103 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 42 THEN
    DELETE FROM location_road_42 where place_id = in_place_id;
    INSERT INTO location_road_42 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 189 THEN
    DELETE FROM location_road_189 where place_id = in_place_id;
    INSERT INTO location_road_189 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 117 THEN
    DELETE FROM location_road_117 where place_id = in_place_id;
    INSERT INTO location_road_117 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 121 THEN
    DELETE FROM location_road_121 where place_id = in_place_id;
    INSERT INTO location_road_121 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 239 THEN
    DELETE FROM location_road_239 where place_id = in_place_id;
    INSERT INTO location_road_239 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 161 THEN
    DELETE FROM location_road_161 where place_id = in_place_id;
    INSERT INTO location_road_161 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 88 THEN
    DELETE FROM location_road_88 where place_id = in_place_id;
    INSERT INTO location_road_88 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 188 THEN
    DELETE FROM location_road_188 where place_id = in_place_id;
    INSERT INTO location_road_188 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 125 THEN
    DELETE FROM location_road_125 where place_id = in_place_id;
    INSERT INTO location_road_125 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 113 THEN
    DELETE FROM location_road_113 where place_id = in_place_id;
    INSERT INTO location_road_113 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 40 THEN
    DELETE FROM location_road_40 where place_id = in_place_id;
    INSERT INTO location_road_40 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 240 THEN
    DELETE FROM location_road_240 where place_id = in_place_id;
    INSERT INTO location_road_240 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 43 THEN
    DELETE FROM location_road_43 where place_id = in_place_id;
    INSERT INTO location_road_43 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 120 THEN
    DELETE FROM location_road_120 where place_id = in_place_id;
    INSERT INTO location_road_120 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 196 THEN
    DELETE FROM location_road_196 where place_id = in_place_id;
    INSERT INTO location_road_196 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 15 THEN
    DELETE FROM location_road_15 where place_id = in_place_id;
    INSERT INTO location_road_15 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 226 THEN
    DELETE FROM location_road_226 where place_id = in_place_id;
    INSERT INTO location_road_226 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 210 THEN
    DELETE FROM location_road_210 where place_id = in_place_id;
    INSERT INTO location_road_210 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 48 THEN
    DELETE FROM location_road_48 where place_id = in_place_id;
    INSERT INTO location_road_48 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 187 THEN
    DELETE FROM location_road_187 where place_id = in_place_id;
    INSERT INTO location_road_187 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 57 THEN
    DELETE FROM location_road_57 where place_id = in_place_id;
    INSERT INTO location_road_57 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 61 THEN
    DELETE FROM location_road_61 where place_id = in_place_id;
    INSERT INTO location_road_61 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 81 THEN
    DELETE FROM location_road_81 where place_id = in_place_id;
    INSERT INTO location_road_81 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 19 THEN
    DELETE FROM location_road_19 where place_id = in_place_id;
    INSERT INTO location_road_19 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 160 THEN
    DELETE FROM location_road_160 where place_id = in_place_id;
    INSERT INTO location_road_160 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 244 THEN
    DELETE FROM location_road_244 where place_id = in_place_id;
    INSERT INTO location_road_244 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 242 THEN
    DELETE FROM location_road_242 where place_id = in_place_id;
    INSERT INTO location_road_242 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 204 THEN
    DELETE FROM location_road_204 where place_id = in_place_id;
    INSERT INTO location_road_204 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 104 THEN
    DELETE FROM location_road_104 where place_id = in_place_id;
    INSERT INTO location_road_104 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 5 THEN
    DELETE FROM location_road_5 where place_id = in_place_id;
    INSERT INTO location_road_5 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 171 THEN
    DELETE FROM location_road_171 where place_id = in_place_id;
    INSERT INTO location_road_171 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 91 THEN
    DELETE FROM location_road_91 where place_id = in_place_id;
    INSERT INTO location_road_91 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 29 THEN
    DELETE FROM location_road_29 where place_id = in_place_id;
    INSERT INTO location_road_29 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 179 THEN
    DELETE FROM location_road_179 where place_id = in_place_id;
    INSERT INTO location_road_179 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 54 THEN
    DELETE FROM location_road_54 where place_id = in_place_id;
    INSERT INTO location_road_54 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 4 THEN
    DELETE FROM location_road_4 where place_id = in_place_id;
    INSERT INTO location_road_4 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 181 THEN
    DELETE FROM location_road_181 where place_id = in_place_id;
    INSERT INTO location_road_181 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 96 THEN
    DELETE FROM location_road_96 where place_id = in_place_id;
    INSERT INTO location_road_96 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 201 THEN
    DELETE FROM location_road_201 where place_id = in_place_id;
    INSERT INTO location_road_201 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 10 THEN
    DELETE FROM location_road_10 where place_id = in_place_id;
    INSERT INTO location_road_10 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 35 THEN
    DELETE FROM location_road_35 where place_id = in_place_id;
    INSERT INTO location_road_35 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 105 THEN
    DELETE FROM location_road_105 where place_id = in_place_id;
    INSERT INTO location_road_105 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 107 THEN
    DELETE FROM location_road_107 where place_id = in_place_id;
    INSERT INTO location_road_107 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 6 THEN
    DELETE FROM location_road_6 where place_id = in_place_id;
    INSERT INTO location_road_6 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 233 THEN
    DELETE FROM location_road_233 where place_id = in_place_id;
    INSERT INTO location_road_233 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 86 THEN
    DELETE FROM location_road_86 where place_id = in_place_id;
    INSERT INTO location_road_86 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 220 THEN
    DELETE FROM location_road_220 where place_id = in_place_id;
    INSERT INTO location_road_220 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 89 THEN
    DELETE FROM location_road_89 where place_id = in_place_id;
    INSERT INTO location_road_89 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 93 THEN
    DELETE FROM location_road_93 where place_id = in_place_id;
    INSERT INTO location_road_93 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 219 THEN
    DELETE FROM location_road_219 where place_id = in_place_id;
    INSERT INTO location_road_219 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 175 THEN
    DELETE FROM location_road_175 where place_id = in_place_id;
    INSERT INTO location_road_175 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 241 THEN
    DELETE FROM location_road_241 where place_id = in_place_id;
    INSERT INTO location_road_241 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 31 THEN
    DELETE FROM location_road_31 where place_id = in_place_id;
    INSERT INTO location_road_31 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 50 THEN
    DELETE FROM location_road_50 where place_id = in_place_id;
    INSERT INTO location_road_50 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 14 THEN
    DELETE FROM location_road_14 where place_id = in_place_id;
    INSERT INTO location_road_14 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 231 THEN
    DELETE FROM location_road_231 where place_id = in_place_id;
    INSERT INTO location_road_231 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 66 THEN
    DELETE FROM location_road_66 where place_id = in_place_id;
    INSERT INTO location_road_66 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 109 THEN
    DELETE FROM location_road_109 where place_id = in_place_id;
    INSERT INTO location_road_109 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 155 THEN
    DELETE FROM location_road_155 where place_id = in_place_id;
    INSERT INTO location_road_155 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 13 THEN
    DELETE FROM location_road_13 where place_id = in_place_id;
    INSERT INTO location_road_13 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 133 THEN
    DELETE FROM location_road_133 where place_id = in_place_id;
    INSERT INTO location_road_133 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 195 THEN
    DELETE FROM location_road_195 where place_id = in_place_id;
    INSERT INTO location_road_195 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 2 THEN
    DELETE FROM location_road_2 where place_id = in_place_id;
    INSERT INTO location_road_2 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 199 THEN
    DELETE FROM location_road_199 where place_id = in_place_id;
    INSERT INTO location_road_199 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 75 THEN
    DELETE FROM location_road_75 where place_id = in_place_id;
    INSERT INTO location_road_75 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 246 THEN
    DELETE FROM location_road_246 where place_id = in_place_id;
    INSERT INTO location_road_246 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 128 THEN
    DELETE FROM location_road_128 where place_id = in_place_id;
    INSERT INTO location_road_128 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 166 THEN
    DELETE FROM location_road_166 where place_id = in_place_id;
    INSERT INTO location_road_166 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 243 THEN
    DELETE FROM location_road_243 where place_id = in_place_id;
    INSERT INTO location_road_243 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 142 THEN
    DELETE FROM location_road_142 where place_id = in_place_id;
    INSERT INTO location_road_142 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 152 THEN
    DELETE FROM location_road_152 where place_id = in_place_id;
    INSERT INTO location_road_152 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 230 THEN
    DELETE FROM location_road_230 where place_id = in_place_id;
    INSERT INTO location_road_230 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 7 THEN
    DELETE FROM location_road_7 where place_id = in_place_id;
    INSERT INTO location_road_7 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 222 THEN
    DELETE FROM location_road_222 where place_id = in_place_id;
    INSERT INTO location_road_222 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 38 THEN
    DELETE FROM location_road_38 where place_id = in_place_id;
    INSERT INTO location_road_38 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 193 THEN
    DELETE FROM location_road_193 where place_id = in_place_id;
    INSERT INTO location_road_193 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 164 THEN
    DELETE FROM location_road_164 where place_id = in_place_id;
    INSERT INTO location_road_164 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 78 THEN
    DELETE FROM location_road_78 where place_id = in_place_id;
    INSERT INTO location_road_78 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 217 THEN
    DELETE FROM location_road_217 where place_id = in_place_id;
    INSERT INTO location_road_217 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 159 THEN
    DELETE FROM location_road_159 where place_id = in_place_id;
    INSERT INTO location_road_159 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 250 THEN
    DELETE FROM location_road_250 where place_id = in_place_id;
    INSERT INTO location_road_250 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 186 THEN
    DELETE FROM location_road_186 where place_id = in_place_id;
    INSERT INTO location_road_186 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 47 THEN
    DELETE FROM location_road_47 where place_id = in_place_id;
    INSERT INTO location_road_47 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 177 THEN
    DELETE FROM location_road_177 where place_id = in_place_id;
    INSERT INTO location_road_177 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 20 THEN
    DELETE FROM location_road_20 where place_id = in_place_id;
    INSERT INTO location_road_20 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 182 THEN
    DELETE FROM location_road_182 where place_id = in_place_id;
    INSERT INTO location_road_182 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 1 THEN
    DELETE FROM location_road_1 where place_id = in_place_id;
    INSERT INTO location_road_1 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 76 THEN
    DELETE FROM location_road_76 where place_id = in_place_id;
    INSERT INTO location_road_76 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 106 THEN
    DELETE FROM location_road_106 where place_id = in_place_id;
    INSERT INTO location_road_106 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 18 THEN
    DELETE FROM location_road_18 where place_id = in_place_id;
    INSERT INTO location_road_18 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 110 THEN
    DELETE FROM location_road_110 where place_id = in_place_id;
    INSERT INTO location_road_110 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 178 THEN
    DELETE FROM location_road_178 where place_id = in_place_id;
    INSERT INTO location_road_178 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 145 THEN
    DELETE FROM location_road_145 where place_id = in_place_id;
    INSERT INTO location_road_145 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 129 THEN
    DELETE FROM location_road_129 where place_id = in_place_id;
    INSERT INTO location_road_129 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 27 THEN
    DELETE FROM location_road_27 where place_id = in_place_id;
    INSERT INTO location_road_27 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 143 THEN
    DELETE FROM location_road_143 where place_id = in_place_id;
    INSERT INTO location_road_143 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 203 THEN
    DELETE FROM location_road_203 where place_id = in_place_id;
    INSERT INTO location_road_203 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 58 THEN
    DELETE FROM location_road_58 where place_id = in_place_id;
    INSERT INTO location_road_58 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 8 THEN
    DELETE FROM location_road_8 where place_id = in_place_id;
    INSERT INTO location_road_8 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 228 THEN
    DELETE FROM location_road_228 where place_id = in_place_id;
    INSERT INTO location_road_228 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 71 THEN
    DELETE FROM location_road_71 where place_id = in_place_id;
    INSERT INTO location_road_71 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 229 THEN
    DELETE FROM location_road_229 where place_id = in_place_id;
    INSERT INTO location_road_229 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 68 THEN
    DELETE FROM location_road_68 where place_id = in_place_id;
    INSERT INTO location_road_68 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 52 THEN
    DELETE FROM location_road_52 where place_id = in_place_id;
    INSERT INTO location_road_52 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 80 THEN
    DELETE FROM location_road_80 where place_id = in_place_id;
    INSERT INTO location_road_80 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 146 THEN
    DELETE FROM location_road_146 where place_id = in_place_id;
    INSERT INTO location_road_146 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 162 THEN
    DELETE FROM location_road_162 where place_id = in_place_id;
    INSERT INTO location_road_162 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 132 THEN
    DELETE FROM location_road_132 where place_id = in_place_id;
    INSERT INTO location_road_132 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 84 THEN
    DELETE FROM location_road_84 where place_id = in_place_id;
    INSERT INTO location_road_84 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 170 THEN
    DELETE FROM location_road_170 where place_id = in_place_id;
    INSERT INTO location_road_170 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 192 THEN
    DELETE FROM location_road_192 where place_id = in_place_id;
    INSERT INTO location_road_192 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 237 THEN
    DELETE FROM location_road_237 where place_id = in_place_id;
    INSERT INTO location_road_237 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 101 THEN
    DELETE FROM location_road_101 where place_id = in_place_id;
    INSERT INTO location_road_101 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 69 THEN
    DELETE FROM location_road_69 where place_id = in_place_id;
    INSERT INTO location_road_69 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 115 THEN
    DELETE FROM location_road_115 where place_id = in_place_id;
    INSERT INTO location_road_115 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 114 THEN
    DELETE FROM location_road_114 where place_id = in_place_id;
    INSERT INTO location_road_114 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 60 THEN
    DELETE FROM location_road_60 where place_id = in_place_id;
    INSERT INTO location_road_60 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 97 THEN
    DELETE FROM location_road_97 where place_id = in_place_id;
    INSERT INTO location_road_97 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 238 THEN
    DELETE FROM location_road_238 where place_id = in_place_id;
    INSERT INTO location_road_238 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 108 THEN
    DELETE FROM location_road_108 where place_id = in_place_id;
    INSERT INTO location_road_108 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 112 THEN
    DELETE FROM location_road_112 where place_id = in_place_id;
    INSERT INTO location_road_112 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 59 THEN
    DELETE FROM location_road_59 where place_id = in_place_id;
    INSERT INTO location_road_59 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 65 THEN
    DELETE FROM location_road_65 where place_id = in_place_id;
    INSERT INTO location_road_65 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 127 THEN
    DELETE FROM location_road_127 where place_id = in_place_id;
    INSERT INTO location_road_127 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 124 THEN
    DELETE FROM location_road_124 where place_id = in_place_id;
    INSERT INTO location_road_124 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 98 THEN
    DELETE FROM location_road_98 where place_id = in_place_id;
    INSERT INTO location_road_98 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 200 THEN
    DELETE FROM location_road_200 where place_id = in_place_id;
    INSERT INTO location_road_200 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 11 THEN
    DELETE FROM location_road_11 where place_id = in_place_id;
    INSERT INTO location_road_11 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 44 THEN
    DELETE FROM location_road_44 where place_id = in_place_id;
    INSERT INTO location_road_44 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 235 THEN
    DELETE FROM location_road_235 where place_id = in_place_id;
    INSERT INTO location_road_235 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 82 THEN
    DELETE FROM location_road_82 where place_id = in_place_id;
    INSERT INTO location_road_82 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 119 THEN
    DELETE FROM location_road_119 where place_id = in_place_id;
    INSERT INTO location_road_119 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 153 THEN
    DELETE FROM location_road_153 where place_id = in_place_id;
    INSERT INTO location_road_153 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 147 THEN
    DELETE FROM location_road_147 where place_id = in_place_id;
    INSERT INTO location_road_147 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 214 THEN
    DELETE FROM location_road_214 where place_id = in_place_id;
    INSERT INTO location_road_214 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 9 THEN
    DELETE FROM location_road_9 where place_id = in_place_id;
    INSERT INTO location_road_9 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 202 THEN
    DELETE FROM location_road_202 where place_id = in_place_id;
    INSERT INTO location_road_202 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 79 THEN
    DELETE FROM location_road_79 where place_id = in_place_id;
    INSERT INTO location_road_79 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 26 THEN
    DELETE FROM location_road_26 where place_id = in_place_id;
    INSERT INTO location_road_26 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 85 THEN
    DELETE FROM location_road_85 where place_id = in_place_id;
    INSERT INTO location_road_85 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 72 THEN
    DELETE FROM location_road_72 where place_id = in_place_id;
    INSERT INTO location_road_72 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 95 THEN
    DELETE FROM location_road_95 where place_id = in_place_id;
    INSERT INTO location_road_95 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 232 THEN
    DELETE FROM location_road_232 where place_id = in_place_id;
    INSERT INTO location_road_232 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 77 THEN
    DELETE FROM location_road_77 where place_id = in_place_id;
    INSERT INTO location_road_77 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 172 THEN
    DELETE FROM location_road_172 where place_id = in_place_id;
    INSERT INTO location_road_172 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 30 THEN
    DELETE FROM location_road_30 where place_id = in_place_id;
    INSERT INTO location_road_30 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 21 THEN
    DELETE FROM location_road_21 where place_id = in_place_id;
    INSERT INTO location_road_21 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 131 THEN
    DELETE FROM location_road_131 where place_id = in_place_id;
    INSERT INTO location_road_131 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 3 THEN
    DELETE FROM location_road_3 where place_id = in_place_id;
    INSERT INTO location_road_3 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 17 THEN
    DELETE FROM location_road_17 where place_id = in_place_id;
    INSERT INTO location_road_17 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 198 THEN
    DELETE FROM location_road_198 where place_id = in_place_id;
    INSERT INTO location_road_198 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 37 THEN
    DELETE FROM location_road_37 where place_id = in_place_id;
    INSERT INTO location_road_37 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 212 THEN
    DELETE FROM location_road_212 where place_id = in_place_id;
    INSERT INTO location_road_212 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 28 THEN
    DELETE FROM location_road_28 where place_id = in_place_id;
    INSERT INTO location_road_28 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 249 THEN
    DELETE FROM location_road_249 where place_id = in_place_id;
    INSERT INTO location_road_249 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 165 THEN
    DELETE FROM location_road_165 where place_id = in_place_id;
    INSERT INTO location_road_165 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 56 THEN
    DELETE FROM location_road_56 where place_id = in_place_id;
    INSERT INTO location_road_56 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 151 THEN
    DELETE FROM location_road_151 where place_id = in_place_id;
    INSERT INTO location_road_151 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 209 THEN
    DELETE FROM location_road_209 where place_id = in_place_id;
    INSERT INTO location_road_209 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 74 THEN
    DELETE FROM location_road_74 where place_id = in_place_id;
    INSERT INTO location_road_74 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 138 THEN
    DELETE FROM location_road_138 where place_id = in_place_id;
    INSERT INTO location_road_138 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 225 THEN
    DELETE FROM location_road_225 where place_id = in_place_id;
    INSERT INTO location_road_225 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 34 THEN
    DELETE FROM location_road_34 where place_id = in_place_id;
    INSERT INTO location_road_34 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 245 THEN
    DELETE FROM location_road_245 where place_id = in_place_id;
    INSERT INTO location_road_245 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 205 THEN
    DELETE FROM location_road_205 where place_id = in_place_id;
    INSERT INTO location_road_205 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 67 THEN
    DELETE FROM location_road_67 where place_id = in_place_id;
    INSERT INTO location_road_67 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 83 THEN
    DELETE FROM location_road_83 where place_id = in_place_id;
    INSERT INTO location_road_83 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 63 THEN
    DELETE FROM location_road_63 where place_id = in_place_id;
    INSERT INTO location_road_63 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 90 THEN
    DELETE FROM location_road_90 where place_id = in_place_id;
    INSERT INTO location_road_90 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 45 THEN
    DELETE FROM location_road_45 where place_id = in_place_id;
    INSERT INTO location_road_45 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 216 THEN
    DELETE FROM location_road_216 where place_id = in_place_id;
    INSERT INTO location_road_216 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 174 THEN
    DELETE FROM location_road_174 where place_id = in_place_id;
    INSERT INTO location_road_174 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 213 THEN
    DELETE FROM location_road_213 where place_id = in_place_id;
    INSERT INTO location_road_213 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 134 THEN
    DELETE FROM location_road_134 where place_id = in_place_id;
    INSERT INTO location_road_134 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 144 THEN
    DELETE FROM location_road_144 where place_id = in_place_id;
    INSERT INTO location_road_144 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 39 THEN
    DELETE FROM location_road_39 where place_id = in_place_id;
    INSERT INTO location_road_39 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 168 THEN
    DELETE FROM location_road_168 where place_id = in_place_id;
    INSERT INTO location_road_168 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 163 THEN
    DELETE FROM location_road_163 where place_id = in_place_id;
    INSERT INTO location_road_163 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 223 THEN
    DELETE FROM location_road_223 where place_id = in_place_id;
    INSERT INTO location_road_223 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 36 THEN
    DELETE FROM location_road_36 where place_id = in_place_id;
    INSERT INTO location_road_36 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 221 THEN
    DELETE FROM location_road_221 where place_id = in_place_id;
    INSERT INTO location_road_221 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 102 THEN
    DELETE FROM location_road_102 where place_id = in_place_id;
    INSERT INTO location_road_102 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 167 THEN
    DELETE FROM location_road_167 where place_id = in_place_id;
    INSERT INTO location_road_167 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 158 THEN
    DELETE FROM location_road_158 where place_id = in_place_id;
    INSERT INTO location_road_158 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 118 THEN
    DELETE FROM location_road_118 where place_id = in_place_id;
    INSERT INTO location_road_118 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 111 THEN
    DELETE FROM location_road_111 where place_id = in_place_id;
    INSERT INTO location_road_111 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 16 THEN
    DELETE FROM location_road_16 where place_id = in_place_id;
    INSERT INTO location_road_16 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 207 THEN
    DELETE FROM location_road_207 where place_id = in_place_id;
    INSERT INTO location_road_207 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 62 THEN
    DELETE FROM location_road_62 where place_id = in_place_id;
    INSERT INTO location_road_62 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 123 THEN
    DELETE FROM location_road_123 where place_id = in_place_id;
    INSERT INTO location_road_123 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 126 THEN
    DELETE FROM location_road_126 where place_id = in_place_id;
    INSERT INTO location_road_126 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 194 THEN
    DELETE FROM location_road_194 where place_id = in_place_id;
    INSERT INTO location_road_194 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 99 THEN
    DELETE FROM location_road_99 where place_id = in_place_id;
    INSERT INTO location_road_99 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 41 THEN
    DELETE FROM location_road_41 where place_id = in_place_id;
    INSERT INTO location_road_41 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 206 THEN
    DELETE FROM location_road_206 where place_id = in_place_id;
    INSERT INTO location_road_206 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 46 THEN
    DELETE FROM location_road_46 where place_id = in_place_id;
    INSERT INTO location_road_46 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 224 THEN
    DELETE FROM location_road_224 where place_id = in_place_id;
    INSERT INTO location_road_224 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 157 THEN
    DELETE FROM location_road_157 where place_id = in_place_id;
    INSERT INTO location_road_157 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 53 THEN
    DELETE FROM location_road_53 where place_id = in_place_id;
    INSERT INTO location_road_53 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 32 THEN
    DELETE FROM location_road_32 where place_id = in_place_id;
    INSERT INTO location_road_32 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 247 THEN
    DELETE FROM location_road_247 where place_id = in_place_id;
    INSERT INTO location_road_247 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 183 THEN
    DELETE FROM location_road_183 where place_id = in_place_id;
    INSERT INTO location_road_183 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 100 THEN
    DELETE FROM location_road_100 where place_id = in_place_id;
    INSERT INTO location_road_100 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 136 THEN
    DELETE FROM location_road_136 where place_id = in_place_id;
    INSERT INTO location_road_136 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 150 THEN
    DELETE FROM location_road_150 where place_id = in_place_id;
    INSERT INTO location_road_150 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 139 THEN
    DELETE FROM location_road_139 where place_id = in_place_id;
    INSERT INTO location_road_139 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 140 THEN
    DELETE FROM location_road_140 where place_id = in_place_id;
    INSERT INTO location_road_140 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 12 THEN
    DELETE FROM location_road_12 where place_id = in_place_id;
    INSERT INTO location_road_12 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 248 THEN
    DELETE FROM location_road_248 where place_id = in_place_id;
    INSERT INTO location_road_248 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 137 THEN
    DELETE FROM location_road_137 where place_id = in_place_id;
    INSERT INTO location_road_137 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 208 THEN
    DELETE FROM location_road_208 where place_id = in_place_id;
    INSERT INTO location_road_208 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 24 THEN
    DELETE FROM location_road_24 where place_id = in_place_id;
    INSERT INTO location_road_24 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 191 THEN
    DELETE FROM location_road_191 where place_id = in_place_id;
    INSERT INTO location_road_191 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 25 THEN
    DELETE FROM location_road_25 where place_id = in_place_id;
    INSERT INTO location_road_25 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 141 THEN
    DELETE FROM location_road_141 where place_id = in_place_id;
    INSERT INTO location_road_141 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 122 THEN
    DELETE FROM location_road_122 where place_id = in_place_id;
    INSERT INTO location_road_122 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 94 THEN
    DELETE FROM location_road_94 where place_id = in_place_id;
    INSERT INTO location_road_94 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 218 THEN
    DELETE FROM location_road_218 where place_id = in_place_id;
    INSERT INTO location_road_218 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 154 THEN
    DELETE FROM location_road_154 where place_id = in_place_id;
    INSERT INTO location_road_154 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 234 THEN
    DELETE FROM location_road_234 where place_id = in_place_id;
    INSERT INTO location_road_234 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 49 THEN
    DELETE FROM location_road_49 where place_id = in_place_id;
    INSERT INTO location_road_49 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 211 THEN
    DELETE FROM location_road_211 where place_id = in_place_id;
    INSERT INTO location_road_211 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 33 THEN
    DELETE FROM location_road_33 where place_id = in_place_id;
    INSERT INTO location_road_33 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 64 THEN
    DELETE FROM location_road_64 where place_id = in_place_id;
    INSERT INTO location_road_64 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 185 THEN
    DELETE FROM location_road_185 where place_id = in_place_id;
    INSERT INTO location_road_185 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 215 THEN
    DELETE FROM location_road_215 where place_id = in_place_id;
    INSERT INTO location_road_215 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 55 THEN
    DELETE FROM location_road_55 where place_id = in_place_id;
    INSERT INTO location_road_55 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 148 THEN
    DELETE FROM location_road_148 where place_id = in_place_id;
    INSERT INTO location_road_148 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 130 THEN
    DELETE FROM location_road_130 where place_id = in_place_id;
    INSERT INTO location_road_130 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 23 THEN
    DELETE FROM location_road_23 where place_id = in_place_id;
    INSERT INTO location_road_23 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;

  IF in_partition = 0 THEN
    DELETE FROM location_road_0 where place_id = in_place_id;
    INSERT INTO location_road_0 (partition, place_id, country_code, geometry)
      values (in_partition, in_place_id, in_country_code, in_geometry);
    RETURN TRUE;
  END IF;


  RAISE EXCEPTION 'Unknown partition %', in_partition;
  RETURN FALSE;
END
$$;


ALTER FUNCTION public.insertlocationroad(in_partition integer, in_place_id bigint, in_country_code character varying, in_geometry public.geometry) OWNER TO nominatim;

--
-- Name: insertsearchname(integer, bigint, integer[], integer, integer, public.geometry); Type: FUNCTION; Schema: public; Owner: nominatim
--

CREATE FUNCTION public.insertsearchname(in_partition integer, in_place_id bigint, in_name_vector integer[], in_rank_search integer, in_rank_address integer, in_geometry public.geometry) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
BEGIN

  IF in_partition = 116 THEN
    DELETE FROM search_name_116 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_116 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 87 THEN
    DELETE FROM search_name_87 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_87 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 184 THEN
    DELETE FROM search_name_184 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_184 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 51 THEN
    DELETE FROM search_name_51 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_51 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 70 THEN
    DELETE FROM search_name_70 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_70 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 190 THEN
    DELETE FROM search_name_190 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_190 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 176 THEN
    DELETE FROM search_name_176 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_176 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 169 THEN
    DELETE FROM search_name_169 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_169 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 92 THEN
    DELETE FROM search_name_92 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_92 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 180 THEN
    DELETE FROM search_name_180 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_180 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 236 THEN
    DELETE FROM search_name_236 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_236 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 22 THEN
    DELETE FROM search_name_22 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_22 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 156 THEN
    DELETE FROM search_name_156 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_156 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 197 THEN
    DELETE FROM search_name_197 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_197 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 135 THEN
    DELETE FROM search_name_135 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_135 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 227 THEN
    DELETE FROM search_name_227 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_227 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 149 THEN
    DELETE FROM search_name_149 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_149 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 173 THEN
    DELETE FROM search_name_173 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_173 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 73 THEN
    DELETE FROM search_name_73 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_73 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 103 THEN
    DELETE FROM search_name_103 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_103 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 42 THEN
    DELETE FROM search_name_42 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_42 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 189 THEN
    DELETE FROM search_name_189 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_189 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 117 THEN
    DELETE FROM search_name_117 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_117 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 121 THEN
    DELETE FROM search_name_121 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_121 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 239 THEN
    DELETE FROM search_name_239 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_239 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 161 THEN
    DELETE FROM search_name_161 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_161 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 88 THEN
    DELETE FROM search_name_88 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_88 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 188 THEN
    DELETE FROM search_name_188 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_188 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 125 THEN
    DELETE FROM search_name_125 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_125 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 113 THEN
    DELETE FROM search_name_113 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_113 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 40 THEN
    DELETE FROM search_name_40 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_40 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 240 THEN
    DELETE FROM search_name_240 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_240 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 43 THEN
    DELETE FROM search_name_43 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_43 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 120 THEN
    DELETE FROM search_name_120 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_120 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 196 THEN
    DELETE FROM search_name_196 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_196 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 15 THEN
    DELETE FROM search_name_15 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_15 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 226 THEN
    DELETE FROM search_name_226 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_226 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 210 THEN
    DELETE FROM search_name_210 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_210 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 48 THEN
    DELETE FROM search_name_48 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_48 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 187 THEN
    DELETE FROM search_name_187 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_187 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 57 THEN
    DELETE FROM search_name_57 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_57 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 61 THEN
    DELETE FROM search_name_61 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_61 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 81 THEN
    DELETE FROM search_name_81 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_81 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 19 THEN
    DELETE FROM search_name_19 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_19 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 160 THEN
    DELETE FROM search_name_160 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_160 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 244 THEN
    DELETE FROM search_name_244 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_244 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 242 THEN
    DELETE FROM search_name_242 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_242 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 204 THEN
    DELETE FROM search_name_204 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_204 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 104 THEN
    DELETE FROM search_name_104 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_104 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 5 THEN
    DELETE FROM search_name_5 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_5 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 171 THEN
    DELETE FROM search_name_171 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_171 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 91 THEN
    DELETE FROM search_name_91 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_91 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 29 THEN
    DELETE FROM search_name_29 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_29 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 179 THEN
    DELETE FROM search_name_179 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_179 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 54 THEN
    DELETE FROM search_name_54 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_54 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 4 THEN
    DELETE FROM search_name_4 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_4 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 181 THEN
    DELETE FROM search_name_181 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_181 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 96 THEN
    DELETE FROM search_name_96 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_96 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 201 THEN
    DELETE FROM search_name_201 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_201 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 10 THEN
    DELETE FROM search_name_10 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_10 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 35 THEN
    DELETE FROM search_name_35 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_35 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 105 THEN
    DELETE FROM search_name_105 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_105 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 107 THEN
    DELETE FROM search_name_107 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_107 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 6 THEN
    DELETE FROM search_name_6 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_6 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 233 THEN
    DELETE FROM search_name_233 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_233 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 86 THEN
    DELETE FROM search_name_86 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_86 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 220 THEN
    DELETE FROM search_name_220 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_220 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 89 THEN
    DELETE FROM search_name_89 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_89 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 93 THEN
    DELETE FROM search_name_93 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_93 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 219 THEN
    DELETE FROM search_name_219 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_219 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 175 THEN
    DELETE FROM search_name_175 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_175 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 241 THEN
    DELETE FROM search_name_241 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_241 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 31 THEN
    DELETE FROM search_name_31 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_31 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 50 THEN
    DELETE FROM search_name_50 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_50 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 14 THEN
    DELETE FROM search_name_14 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_14 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 231 THEN
    DELETE FROM search_name_231 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_231 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 66 THEN
    DELETE FROM search_name_66 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_66 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 109 THEN
    DELETE FROM search_name_109 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_109 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 155 THEN
    DELETE FROM search_name_155 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_155 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 13 THEN
    DELETE FROM search_name_13 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_13 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 133 THEN
    DELETE FROM search_name_133 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_133 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 195 THEN
    DELETE FROM search_name_195 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_195 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 2 THEN
    DELETE FROM search_name_2 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_2 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 199 THEN
    DELETE FROM search_name_199 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_199 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 75 THEN
    DELETE FROM search_name_75 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_75 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 246 THEN
    DELETE FROM search_name_246 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_246 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 128 THEN
    DELETE FROM search_name_128 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_128 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 166 THEN
    DELETE FROM search_name_166 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_166 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 243 THEN
    DELETE FROM search_name_243 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_243 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 142 THEN
    DELETE FROM search_name_142 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_142 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 152 THEN
    DELETE FROM search_name_152 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_152 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 230 THEN
    DELETE FROM search_name_230 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_230 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 7 THEN
    DELETE FROM search_name_7 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_7 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 222 THEN
    DELETE FROM search_name_222 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_222 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 38 THEN
    DELETE FROM search_name_38 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_38 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 193 THEN
    DELETE FROM search_name_193 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_193 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 164 THEN
    DELETE FROM search_name_164 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_164 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 78 THEN
    DELETE FROM search_name_78 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_78 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 217 THEN
    DELETE FROM search_name_217 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_217 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 159 THEN
    DELETE FROM search_name_159 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_159 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 250 THEN
    DELETE FROM search_name_250 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_250 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 186 THEN
    DELETE FROM search_name_186 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_186 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 47 THEN
    DELETE FROM search_name_47 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_47 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 177 THEN
    DELETE FROM search_name_177 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_177 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 20 THEN
    DELETE FROM search_name_20 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_20 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 182 THEN
    DELETE FROM search_name_182 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_182 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 1 THEN
    DELETE FROM search_name_1 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_1 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 76 THEN
    DELETE FROM search_name_76 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_76 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 106 THEN
    DELETE FROM search_name_106 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_106 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 18 THEN
    DELETE FROM search_name_18 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_18 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 110 THEN
    DELETE FROM search_name_110 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_110 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 178 THEN
    DELETE FROM search_name_178 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_178 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 145 THEN
    DELETE FROM search_name_145 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_145 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 129 THEN
    DELETE FROM search_name_129 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_129 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 27 THEN
    DELETE FROM search_name_27 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_27 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 143 THEN
    DELETE FROM search_name_143 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_143 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 203 THEN
    DELETE FROM search_name_203 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_203 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 58 THEN
    DELETE FROM search_name_58 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_58 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 8 THEN
    DELETE FROM search_name_8 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_8 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 228 THEN
    DELETE FROM search_name_228 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_228 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 71 THEN
    DELETE FROM search_name_71 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_71 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 229 THEN
    DELETE FROM search_name_229 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_229 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 68 THEN
    DELETE FROM search_name_68 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_68 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 52 THEN
    DELETE FROM search_name_52 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_52 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 80 THEN
    DELETE FROM search_name_80 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_80 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 146 THEN
    DELETE FROM search_name_146 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_146 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 162 THEN
    DELETE FROM search_name_162 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_162 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 132 THEN
    DELETE FROM search_name_132 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_132 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 84 THEN
    DELETE FROM search_name_84 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_84 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 170 THEN
    DELETE FROM search_name_170 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_170 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 192 THEN
    DELETE FROM search_name_192 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_192 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 237 THEN
    DELETE FROM search_name_237 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_237 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 101 THEN
    DELETE FROM search_name_101 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_101 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 69 THEN
    DELETE FROM search_name_69 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_69 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 115 THEN
    DELETE FROM search_name_115 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_115 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 114 THEN
    DELETE FROM search_name_114 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_114 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 60 THEN
    DELETE FROM search_name_60 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_60 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 97 THEN
    DELETE FROM search_name_97 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_97 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 238 THEN
    DELETE FROM search_name_238 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_238 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 108 THEN
    DELETE FROM search_name_108 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_108 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 112 THEN
    DELETE FROM search_name_112 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_112 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 59 THEN
    DELETE FROM search_name_59 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_59 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 65 THEN
    DELETE FROM search_name_65 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_65 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 127 THEN
    DELETE FROM search_name_127 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_127 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 124 THEN
    DELETE FROM search_name_124 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_124 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 98 THEN
    DELETE FROM search_name_98 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_98 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 200 THEN
    DELETE FROM search_name_200 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_200 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 11 THEN
    DELETE FROM search_name_11 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_11 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 44 THEN
    DELETE FROM search_name_44 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_44 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 235 THEN
    DELETE FROM search_name_235 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_235 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 82 THEN
    DELETE FROM search_name_82 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_82 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 119 THEN
    DELETE FROM search_name_119 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_119 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 153 THEN
    DELETE FROM search_name_153 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_153 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 147 THEN
    DELETE FROM search_name_147 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_147 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 214 THEN
    DELETE FROM search_name_214 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_214 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 9 THEN
    DELETE FROM search_name_9 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_9 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 202 THEN
    DELETE FROM search_name_202 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_202 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 79 THEN
    DELETE FROM search_name_79 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_79 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 26 THEN
    DELETE FROM search_name_26 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_26 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 85 THEN
    DELETE FROM search_name_85 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_85 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 72 THEN
    DELETE FROM search_name_72 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_72 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 95 THEN
    DELETE FROM search_name_95 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_95 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 232 THEN
    DELETE FROM search_name_232 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_232 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 77 THEN
    DELETE FROM search_name_77 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_77 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 172 THEN
    DELETE FROM search_name_172 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_172 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 30 THEN
    DELETE FROM search_name_30 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_30 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 21 THEN
    DELETE FROM search_name_21 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_21 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 131 THEN
    DELETE FROM search_name_131 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_131 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 3 THEN
    DELETE FROM search_name_3 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_3 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 17 THEN
    DELETE FROM search_name_17 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_17 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 198 THEN
    DELETE FROM search_name_198 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_198 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 37 THEN
    DELETE FROM search_name_37 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_37 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 212 THEN
    DELETE FROM search_name_212 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_212 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 28 THEN
    DELETE FROM search_name_28 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_28 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 249 THEN
    DELETE FROM search_name_249 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_249 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 165 THEN
    DELETE FROM search_name_165 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_165 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 56 THEN
    DELETE FROM search_name_56 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_56 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 151 THEN
    DELETE FROM search_name_151 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_151 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 209 THEN
    DELETE FROM search_name_209 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_209 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 74 THEN
    DELETE FROM search_name_74 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_74 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 138 THEN
    DELETE FROM search_name_138 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_138 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 225 THEN
    DELETE FROM search_name_225 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_225 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 34 THEN
    DELETE FROM search_name_34 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_34 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 245 THEN
    DELETE FROM search_name_245 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_245 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 205 THEN
    DELETE FROM search_name_205 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_205 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 67 THEN
    DELETE FROM search_name_67 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_67 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 83 THEN
    DELETE FROM search_name_83 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_83 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 63 THEN
    DELETE FROM search_name_63 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_63 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 90 THEN
    DELETE FROM search_name_90 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_90 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 45 THEN
    DELETE FROM search_name_45 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_45 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 216 THEN
    DELETE FROM search_name_216 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_216 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 174 THEN
    DELETE FROM search_name_174 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_174 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 213 THEN
    DELETE FROM search_name_213 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_213 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 134 THEN
    DELETE FROM search_name_134 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_134 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 144 THEN
    DELETE FROM search_name_144 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_144 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 39 THEN
    DELETE FROM search_name_39 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_39 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 168 THEN
    DELETE FROM search_name_168 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_168 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 163 THEN
    DELETE FROM search_name_163 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_163 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 223 THEN
    DELETE FROM search_name_223 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_223 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 36 THEN
    DELETE FROM search_name_36 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_36 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 221 THEN
    DELETE FROM search_name_221 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_221 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 102 THEN
    DELETE FROM search_name_102 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_102 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 167 THEN
    DELETE FROM search_name_167 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_167 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 158 THEN
    DELETE FROM search_name_158 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_158 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 118 THEN
    DELETE FROM search_name_118 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_118 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 111 THEN
    DELETE FROM search_name_111 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_111 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 16 THEN
    DELETE FROM search_name_16 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_16 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 207 THEN
    DELETE FROM search_name_207 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_207 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 62 THEN
    DELETE FROM search_name_62 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_62 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 123 THEN
    DELETE FROM search_name_123 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_123 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 126 THEN
    DELETE FROM search_name_126 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_126 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 194 THEN
    DELETE FROM search_name_194 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_194 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 99 THEN
    DELETE FROM search_name_99 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_99 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 41 THEN
    DELETE FROM search_name_41 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_41 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 206 THEN
    DELETE FROM search_name_206 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_206 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 46 THEN
    DELETE FROM search_name_46 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_46 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 224 THEN
    DELETE FROM search_name_224 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_224 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 157 THEN
    DELETE FROM search_name_157 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_157 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 53 THEN
    DELETE FROM search_name_53 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_53 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 32 THEN
    DELETE FROM search_name_32 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_32 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 247 THEN
    DELETE FROM search_name_247 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_247 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 183 THEN
    DELETE FROM search_name_183 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_183 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 100 THEN
    DELETE FROM search_name_100 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_100 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 136 THEN
    DELETE FROM search_name_136 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_136 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 150 THEN
    DELETE FROM search_name_150 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_150 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 139 THEN
    DELETE FROM search_name_139 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_139 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 140 THEN
    DELETE FROM search_name_140 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_140 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 12 THEN
    DELETE FROM search_name_12 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_12 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 248 THEN
    DELETE FROM search_name_248 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_248 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 137 THEN
    DELETE FROM search_name_137 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_137 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 208 THEN
    DELETE FROM search_name_208 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_208 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 24 THEN
    DELETE FROM search_name_24 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_24 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 191 THEN
    DELETE FROM search_name_191 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_191 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 25 THEN
    DELETE FROM search_name_25 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_25 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 141 THEN
    DELETE FROM search_name_141 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_141 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 122 THEN
    DELETE FROM search_name_122 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_122 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 94 THEN
    DELETE FROM search_name_94 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_94 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 218 THEN
    DELETE FROM search_name_218 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_218 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 154 THEN
    DELETE FROM search_name_154 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_154 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 234 THEN
    DELETE FROM search_name_234 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_234 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 49 THEN
    DELETE FROM search_name_49 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_49 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 211 THEN
    DELETE FROM search_name_211 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_211 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 33 THEN
    DELETE FROM search_name_33 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_33 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 64 THEN
    DELETE FROM search_name_64 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_64 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 185 THEN
    DELETE FROM search_name_185 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_185 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 215 THEN
    DELETE FROM search_name_215 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_215 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 55 THEN
    DELETE FROM search_name_55 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_55 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 148 THEN
    DELETE FROM search_name_148 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_148 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 130 THEN
    DELETE FROM search_name_130 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_130 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 23 THEN
    DELETE FROM search_name_23 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_23 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;

  IF in_partition = 0 THEN
    DELETE FROM search_name_0 values WHERE place_id = in_place_id;
    IF in_rank_address > 0 THEN
      INSERT INTO search_name_0 (place_id, search_rank, address_rank, name_vector, centroid)
        values (in_place_id, in_rank_search, in_rank_address, in_name_vector, in_geometry);
    END IF;
    RETURN TRUE;
  END IF;


  RAISE EXCEPTION 'Unknown partition %', in_partition;
  RETURN FALSE;
END
$$;


ALTER FUNCTION public.insertsearchname(in_partition integer, in_place_id bigint, in_name_vector integer[], in_rank_search integer, in_rank_address integer, in_geometry public.geometry) OWNER TO nominatim;

--
-- Name: make_keywords(text); Type: FUNCTION; Schema: public; Owner: nominatim
--

CREATE FUNCTION public.make_keywords(src text) RETURNS integer[]
    LANGUAGE plpgsql IMMUTABLE
    AS $_$
DECLARE
  result INTEGER[];
  s TEXT;
  w INTEGER;
  words TEXT[];
  i INTEGER;
  j INTEGER;
BEGIN
  result := '{}'::INTEGER[];

  s := make_standard_name(src);
  w := getorcreate_name_id(s, src);

  IF NOT (ARRAY[w] <@ result) THEN
    result := result || w;
  END IF;

  w := getorcreate_word_id(s);

  IF w IS NOT NULL AND NOT (ARRAY[w] <@ result) THEN
    result := result || w;
  END IF;

  words := string_to_array(s, ' ');
  IF array_upper(words, 1) IS NOT NULL THEN
    FOR j IN 1..array_upper(words, 1) LOOP
      IF (words[j] != '') THEN
        w = getorcreate_word_id(words[j]);
        IF w IS NOT NULL AND NOT (ARRAY[w] <@ result) THEN
          result := result || w;
        END IF;
      END IF;
    END LOOP;
  END IF;

  words := regexp_split_to_array(src, E'[,;()]');
  IF array_upper(words, 1) != 1 THEN
    FOR j IN 1..array_upper(words, 1) LOOP
      s := make_standard_name(words[j]);
      IF s != '' THEN
        w := getorcreate_word_id(s);
        IF w IS NOT NULL AND NOT (ARRAY[w] <@ result) THEN
          result := result || w;
        END IF;
      END IF;
    END LOOP;
  END IF;

  s := regexp_replace(src, '市$', '');
  IF s != src THEN
    s := make_standard_name(s);
    IF s != '' THEN
      w := getorcreate_name_id(s, src);
      IF NOT (ARRAY[w] <@ result) THEN
        result := result || w;
      END IF;
    END IF;
  END IF;

  RETURN result;
END;
$_$;


ALTER FUNCTION public.make_keywords(src text) OWNER TO nominatim;

--
-- Name: make_keywords(public.hstore); Type: FUNCTION; Schema: public; Owner: nominatim
--

CREATE FUNCTION public.make_keywords(src public.hstore) RETURNS integer[]
    LANGUAGE plpgsql IMMUTABLE
    AS $_$
DECLARE
  result INTEGER[];
  s TEXT;
  w INTEGER;
  words TEXT[];
  item RECORD;
  j INTEGER;
BEGIN
  result := '{}'::INTEGER[];

  FOR item IN SELECT (each(src)).* LOOP

    s := make_standard_name(item.value);

    w := getorcreate_name_id(s, item.value);

    IF not(ARRAY[w] <@ result) THEN
      result := result || w;
    END IF;

    w := getorcreate_word_id(s);

    IF w IS NOT NULL AND NOT (ARRAY[w] <@ result) THEN
      result := result || w;
    END IF;

    words := string_to_array(s, ' ');
    IF array_upper(words, 1) IS NOT NULL THEN
      FOR j IN 1..array_upper(words, 1) LOOP
        IF (words[j] != '') THEN
          w = getorcreate_word_id(words[j]);
          IF w IS NOT NULL AND NOT (ARRAY[w] <@ result) THEN
            result := result || w;
          END IF;
        END IF;
      END LOOP;
    END IF;

    words := regexp_split_to_array(item.value, E'[,;()]');
    IF array_upper(words, 1) != 1 THEN
      FOR j IN 1..array_upper(words, 1) LOOP
        s := make_standard_name(words[j]);
        IF s != '' THEN
          w := getorcreate_word_id(s);
          IF w IS NOT NULL AND NOT (ARRAY[w] <@ result) THEN
            result := result || w;
          END IF;
        END IF;
      END LOOP;
    END IF;

    s := regexp_replace(item.value, '市$', '');
    IF s != item.value THEN
      s := make_standard_name(s);
      IF s != '' THEN
        w := getorcreate_name_id(s, item.value);
        IF NOT (ARRAY[w] <@ result) THEN
          result := result || w;
        END IF;
      END IF;
    END IF;

  END LOOP;

  RETURN result;
END;
$_$;


ALTER FUNCTION public.make_keywords(src public.hstore) OWNER TO nominatim;

--
-- Name: make_standard_name(text); Type: FUNCTION; Schema: public; Owner: nominatim
--

CREATE FUNCTION public.make_standard_name(name text) RETURNS text
    LANGUAGE plpgsql IMMUTABLE
    AS $$
DECLARE
  o TEXT;
BEGIN
  o := public.gettokenstring(public.transliteration(name));
  RETURN trim(substr(o,1,length(o)));
END;
$$;


ALTER FUNCTION public.make_standard_name(name text) OWNER TO nominatim;

--
-- Name: osmline_insert(); Type: FUNCTION; Schema: public; Owner: nominatim
--

CREATE FUNCTION public.osmline_insert() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  NEW.place_id := nextval('seq_place');
  NEW.indexed_date := now();

  IF NEW.indexed_status IS NULL THEN
      IF NEW.address is NULL OR NOT NEW.address ? 'interpolation'
         OR NEW.address->'interpolation' NOT IN ('odd', 'even', 'all') THEN
          -- other interpolation types than odd/even/all (e.g. numeric ones) are not supported
          RETURN NULL;
      END IF;

      NEW.indexed_status := 1; --STATUS_NEW
      NEW.country_code := lower(get_country_code(NEW.linegeo));

      NEW.partition := get_partition(NEW.country_code);
      NEW.geometry_sector := geometry_sector(NEW.partition, NEW.linegeo);
  END IF;

  RETURN NEW;
END;
$$;


ALTER FUNCTION public.osmline_insert() OWNER TO nominatim;

--
-- Name: osmline_reinsert(bigint, public.geometry); Type: FUNCTION; Schema: public; Owner: nominatim
--

CREATE FUNCTION public.osmline_reinsert(node_id bigint, geom public.geometry) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
  existingline RECORD;
BEGIN
   SELECT w.id FROM planet_osm_ways w, location_property_osmline p
     WHERE p.linegeo && geom and p.osm_id = w.id and p.indexed_status = 0
           and node_id = any(w.nodes) INTO existingline;

   IF existingline.id is not NULL THEN
       DELETE FROM location_property_osmline WHERE osm_id = existingline.id;
       INSERT INTO location_property_osmline (osm_id, address, linegeo)
         SELECT osm_id, address, geometry FROM place
           WHERE osm_type = 'W' and osm_id = existingline.id;
   END IF;

   RETURN true;
END;
$$;


ALTER FUNCTION public.osmline_reinsert(node_id bigint, geom public.geometry) OWNER TO nominatim;

--
-- Name: osmline_update(); Type: FUNCTION; Schema: public; Owner: nominatim
--

CREATE FUNCTION public.osmline_update() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  place_centroid GEOMETRY;
  waynodes BIGINT[];
  prevnode RECORD;
  nextnode RECORD;
  startnumber INTEGER;
  endnumber INTEGER;
  housenum INTEGER;
  linegeo GEOMETRY;
  splitline GEOMETRY;
  sectiongeo GEOMETRY;
  interpol_postcode TEXT;
  postcode TEXT;
BEGIN
  -- deferred delete
  IF OLD.indexed_status = 100 THEN
    delete from location_property_osmline where place_id = OLD.place_id;
    RETURN NULL;
  END IF;

  IF NEW.indexed_status != 0 OR OLD.indexed_status = 0 THEN
    RETURN NEW;
  END IF;

  NEW.interpolationtype = NEW.address->'interpolation';

  place_centroid := ST_PointOnSurface(NEW.linegeo);
  NEW.parent_place_id = get_interpolation_parent(NEW.osm_id, NEW.address->'street',
                                                 NEW.address->'place',
                                                 NEW.partition, place_centroid, NEW.linegeo);

  IF NEW.address is not NULL AND NEW.address ? 'postcode' AND NEW.address->'postcode' not similar to '%(,|;)%' THEN
    interpol_postcode := NEW.address->'postcode';
    housenum := getorcreate_postcode_id(NEW.address->'postcode');
  ELSE
    interpol_postcode := NULL;
  END IF;

  -- if the line was newly inserted, split the line as necessary
  IF OLD.indexed_status = 1 THEN
      select nodes from planet_osm_ways where id = NEW.osm_id INTO waynodes;

      IF array_upper(waynodes, 1) IS NULL THEN
        RETURN NEW;
      END IF;

      linegeo := NEW.linegeo;
      startnumber := NULL;

      FOR nodeidpos in 1..array_upper(waynodes, 1) LOOP

        select osm_id, address, geometry
          from place where osm_type = 'N' and osm_id = waynodes[nodeidpos]::BIGINT
                           and address is not NULL and address ? 'housenumber' limit 1 INTO nextnode;
        --RAISE NOTICE 'Nextnode.place_id: %s', nextnode.place_id;
        IF nextnode.osm_id IS NOT NULL THEN
          --RAISE NOTICE 'place_id is not null';
          IF nodeidpos > 1 and nodeidpos < array_upper(waynodes, 1) THEN
            -- Make sure that the point is actually on the line. That might
            -- be a bit paranoid but ensures that the algorithm still works
            -- should osm2pgsql attempt to repair geometries.
            splitline := split_line_on_node(linegeo, nextnode.geometry);
            sectiongeo := ST_GeometryN(splitline, 1);
            linegeo := ST_GeometryN(splitline, 2);
          ELSE
            sectiongeo = linegeo;
          END IF;
          endnumber := substring(nextnode.address->'housenumber','[0-9]+')::integer;

          IF startnumber IS NOT NULL AND endnumber IS NOT NULL
             AND startnumber != endnumber
             AND ST_GeometryType(sectiongeo) = 'ST_LineString' THEN

            IF (startnumber > endnumber) THEN
              housenum := endnumber;
              endnumber := startnumber;
              startnumber := housenum;
              sectiongeo := ST_Reverse(sectiongeo);
            END IF;

            -- determine postcode
            postcode := coalesce(interpol_postcode,
                                 prevnode.address->'postcode',
                                 nextnode.address->'postcode',
                                 postcode);

            IF postcode is NULL THEN
                SELECT placex.postcode FROM placex WHERE place_id = NEW.parent_place_id INTO postcode;
            END IF;
            IF postcode is NULL THEN
                postcode := get_nearest_postcode(NEW.country_code, nextnode.geometry);
            END IF;

            IF NEW.startnumber IS NULL THEN
                NEW.startnumber := startnumber;
                NEW.endnumber := endnumber;
                NEW.linegeo := sectiongeo;
                NEW.postcode := upper(trim(postcode));
             ELSE
              insert into location_property_osmline
                     (linegeo, partition, osm_id, parent_place_id,
                      startnumber, endnumber, interpolationtype,
                      address, postcode, country_code,
                      geometry_sector, indexed_status)
              values (sectiongeo, NEW.partition, NEW.osm_id, NEW.parent_place_id,
                      startnumber, endnumber, NEW.interpolationtype,
                      NEW.address, postcode,
                      NEW.country_code, NEW.geometry_sector, 0);
             END IF;
          END IF;

          -- early break if we are out of line string,
          -- might happen when a line string loops back on itself
          IF ST_GeometryType(linegeo) != 'ST_LineString' THEN
              RETURN NEW;
          END IF;

          startnumber := substring(nextnode.address->'housenumber','[0-9]+')::integer;
          prevnode := nextnode;
        END IF;
      END LOOP;
  END IF;

  -- marking descendants for reparenting is not needed, because there are
  -- actually no descendants for interpolation lines
  RETURN NEW;
END;
$$;


ALTER FUNCTION public.osmline_update() OWNER TO nominatim;

--
-- Name: place_delete(); Type: FUNCTION; Schema: public; Owner: nominatim
--

CREATE FUNCTION public.place_delete() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  has_rank BOOLEAN;
BEGIN

  --DEBUG: RAISE WARNING 'delete: % % % %',OLD.osm_type,OLD.osm_id,OLD.class,OLD.type;

  -- deleting large polygons can have a massive effect on the system - require manual intervention to let them through
  IF st_area(OLD.geometry) > 2 and st_isvalid(OLD.geometry) THEN
    SELECT bool_or(not (rank_address = 0 or rank_address > 26)) as ranked FROM placex WHERE osm_type = OLD.osm_type and osm_id = OLD.osm_id and class = OLD.class and type = OLD.type INTO has_rank;
    IF has_rank THEN
      insert into import_polygon_delete (osm_type, osm_id, class, type) values (OLD.osm_type,OLD.osm_id,OLD.class,OLD.type);
      RETURN NULL;
    END IF;
  END IF;

  -- mark for delete
  UPDATE placex set indexed_status = 100 where osm_type = OLD.osm_type and osm_id = OLD.osm_id and class = OLD.class and type = OLD.type;

  -- interpolations are special
  IF OLD.osm_type='W' and OLD.class = 'place' and OLD.type = 'houses' THEN
    UPDATE location_property_osmline set indexed_status = 100 where osm_id = OLD.osm_id; -- osm_id = wayid (=old.osm_id)
  END IF;

  RETURN OLD;

END;
$$;


ALTER FUNCTION public.place_delete() OWNER TO nominatim;

--
-- Name: place_force_delete(bigint); Type: FUNCTION; Schema: public; Owner: nominatim
--

CREATE FUNCTION public.place_force_delete(placeid bigint) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
    osmid BIGINT;
    osmtype character(1);
    pclass text;
    ptype text;
BEGIN
  SELECT osm_type, osm_id, class, type FROM placex WHERE place_id = placeid INTO osmtype, osmid, pclass, ptype;
  DELETE FROM import_polygon_delete where osm_type = osmtype and osm_id = osmid and class = pclass and type = ptype;
  DELETE FROM import_polygon_error where osm_type = osmtype and osm_id = osmid and class = pclass and type = ptype;
  -- force delete from place/placex by making it a very small geometry
  UPDATE place set geometry = ST_SetSRID(ST_Point(0,0), 4326) where osm_type = osmtype and osm_id = osmid and class = pclass and type = ptype;
  DELETE FROM place where osm_type = osmtype and osm_id = osmid and class = pclass and type = ptype;

  RETURN TRUE;
END;
$$;


ALTER FUNCTION public.place_force_delete(placeid bigint) OWNER TO nominatim;

--
-- Name: place_force_update(bigint); Type: FUNCTION; Schema: public; Owner: nominatim
--

CREATE FUNCTION public.place_force_update(placeid bigint) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
  placegeom GEOMETRY;
  geom GEOMETRY;
  diameter FLOAT;
  rank INTEGER;
BEGIN
  UPDATE placex SET indexed_status = 2 WHERE place_id = placeid;
  SELECT geometry, rank_search FROM placex WHERE place_id = placeid INTO placegeom, rank;
  IF placegeom IS NOT NULL AND ST_IsValid(placegeom) THEN
    IF ST_GeometryType(placegeom) in ('ST_Polygon','ST_MultiPolygon') THEN
      FOR geom IN select split_geometry(placegeom) FROM placex WHERE place_id = placeid LOOP
        update placex set indexed_status = 2 where (st_covers(geom, placex.geometry) OR ST_Intersects(geom, placex.geometry)) 
        AND rank_search > rank and indexed_status = 0 and ST_geometrytype(placex.geometry) = 'ST_Point' and (rank_search < 28 or name is not null or (rank >= 16 and address ? 'place'));
        update placex set indexed_status = 2 where (st_covers(geom, placex.geometry) OR ST_Intersects(geom, placex.geometry)) 
        AND rank_search > rank and indexed_status = 0 and ST_geometrytype(placex.geometry) != 'ST_Point' and (rank_search < 28 or name is not null or (rank >= 16 and address ? 'place'));
      END LOOP;
    ELSE
        diameter := 0;
        IF rank = 11 THEN
          diameter := 0.05;
        ELSEIF rank < 18 THEN
          diameter := 0.1;
        ELSEIF rank < 20 THEN
          diameter := 0.05;
        ELSEIF rank = 21 THEN
          diameter := 0.001;
        ELSEIF rank < 24 THEN
          diameter := 0.02;
        ELSEIF rank < 26 THEN
          diameter := 0.002; -- 100 to 200 meters
        ELSEIF rank < 28 THEN
          diameter := 0.001; -- 50 to 100 meters
        END IF;
        IF diameter > 0 THEN
          IF rank >= 26 THEN
            -- roads may cause reparenting for >27 rank places
            update placex set indexed_status = 2 where indexed_status = 0 and rank_search > rank and ST_DWithin(placex.geometry, placegeom, diameter);
          ELSEIF rank >= 16 THEN
            -- up to rank 16, street-less addresses may need reparenting
            update placex set indexed_status = 2 where indexed_status = 0 and rank_search > rank and ST_DWithin(placex.geometry, placegeom, diameter) and (rank_search < 28 or name is not null or address ? 'place');
          ELSE
            -- for all other places the search terms may change as well
            update placex set indexed_status = 2 where indexed_status = 0 and rank_search > rank and ST_DWithin(placex.geometry, placegeom, diameter) and (rank_search < 28 or name is not null);
          END IF;
        END IF;
    END IF;
    RETURN TRUE;
  END IF;

  RETURN FALSE;
END;
$$;


ALTER FUNCTION public.place_force_update(placeid bigint) OWNER TO nominatim;

--
-- Name: place_insert(); Type: FUNCTION; Schema: public; Owner: nominatim
--

CREATE FUNCTION public.place_insert() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  i INTEGER;
  existing RECORD;
  existingplacex RECORD;
  existingline RECORD;
  existinggeometry GEOMETRY;
  existingplace_id BIGINT;
  result BOOLEAN;
  partition INTEGER;
BEGIN

  --DEBUG: RAISE WARNING '-----------------------------------------------------------------------------------';
  --DEBUG: RAISE WARNING 'place_insert: % % % % %',NEW.osm_type,NEW.osm_id,NEW.class,NEW.type,st_area(NEW.geometry);
  -- filter wrong tupels
  IF ST_IsEmpty(NEW.geometry) OR NOT ST_IsValid(NEW.geometry) OR ST_X(ST_Centroid(NEW.geometry))::text in ('NaN','Infinity','-Infinity') OR ST_Y(ST_Centroid(NEW.geometry))::text in ('NaN','Infinity','-Infinity') THEN  
    INSERT INTO import_polygon_error (osm_type, osm_id, class, type, name, country_code, updated, errormessage, prevgeometry, newgeometry)
      VALUES (NEW.osm_type, NEW.osm_id, NEW.class, NEW.type, NEW.name, NEW.address->'country', now(), ST_IsValidReason(NEW.geometry), null, NEW.geometry);
--    RAISE WARNING 'Invalid Geometry: % % % %',NEW.osm_type,NEW.osm_id,NEW.class,NEW.type;
    RETURN null;
  END IF;

  -- decide, whether it is an osm interpolation line => insert intoosmline, or else just placex
  IF NEW.class='place' and NEW.type='houses' and NEW.osm_type='W' and ST_GeometryType(NEW.geometry) = 'ST_LineString' THEN
    -- Have we already done this place?
    select * from place where osm_type = NEW.osm_type and osm_id = NEW.osm_id and class = NEW.class and type = NEW.type INTO existing;

    -- Get the existing place_id
    select * from location_property_osmline where osm_id = NEW.osm_id INTO existingline;

    -- Handle a place changing type by removing the old data (this trigger is executed BEFORE INSERT of the NEW tupel)
    IF existing.osm_type IS NULL THEN
      DELETE FROM place where osm_type = NEW.osm_type and osm_id = NEW.osm_id and class = NEW.class;
    END IF;

    DELETE from import_polygon_error where osm_type = NEW.osm_type and osm_id = NEW.osm_id;
    DELETE from import_polygon_delete where osm_type = NEW.osm_type and osm_id = NEW.osm_id;

    -- update method for interpolation lines: delete all old interpolation lines with same osm_id (update on place) and insert the new one(s) (they can be split up, if they have > 2 nodes)
    IF existingline.osm_id IS NOT NULL THEN
      delete from location_property_osmline where osm_id = NEW.osm_id;
    END IF;

    -- for interpolations invalidate all nodes on the line
    update placex p set indexed_status = 2
      from planet_osm_ways w
      where w.id = NEW.osm_id and p.osm_type = 'N' and p.osm_id = any(w.nodes);


    INSERT INTO location_property_osmline (osm_id, address, linegeo)
      VALUES (NEW.osm_id, NEW.address, NEW.geometry);


    IF existing.osm_type IS NULL THEN
      return NEW;
    END IF;

    IF coalesce(existing.address, ''::hstore) != coalesce(NEW.address, ''::hstore)
       OR (coalesce(existing.extratags, ''::hstore) != coalesce(NEW.extratags, ''::hstore))
       OR existing.geometry::text != NEW.geometry::text
       THEN

      update place set 
        name = NEW.name,
        address = NEW.address,
        extratags = NEW.extratags,
        admin_level = NEW.admin_level,
        geometry = NEW.geometry
        where osm_type = NEW.osm_type and osm_id = NEW.osm_id and class = NEW.class and type = NEW.type;
    END IF;

    RETURN NULL;

  ELSE -- insert to placex

    -- Patch in additional country names
    IF NEW.admin_level = 2 AND NEW.type = 'administrative'
          AND NEW.address is not NULL AND NEW.address ? 'country' THEN
        SELECT name FROM country_name WHERE country_code = lower(NEW.address->'country') INTO existing;
        IF existing.name IS NOT NULL THEN
            NEW.name = existing.name || NEW.name;
        END IF;
    END IF;
      
    -- Have we already done this place?
    select * from place where osm_type = NEW.osm_type and osm_id = NEW.osm_id and class = NEW.class and type = NEW.type INTO existing;

    -- Get the existing place_id
    select * from placex where osm_type = NEW.osm_type and osm_id = NEW.osm_id and class = NEW.class and type = NEW.type INTO existingplacex;

    -- Handle a place changing type by removing the old data
    -- My generated 'place' types are causing havok because they overlap with real keys
    -- TODO: move them to their own special purpose key/class to avoid collisions
    IF existing.osm_type IS NULL THEN
      DELETE FROM place where osm_type = NEW.osm_type and osm_id = NEW.osm_id and class = NEW.class;
    END IF;

    --DEBUG: RAISE WARNING 'Existing: %',existing.osm_id;
    --DEBUG: RAISE WARNING 'Existing PlaceX: %',existingplacex.place_id;

    -- Log and discard 
    IF existing.geometry is not null AND st_isvalid(existing.geometry) 
      AND st_area(existing.geometry) > 0.02
      AND ST_GeometryType(NEW.geometry) in ('ST_Polygon','ST_MultiPolygon')
      AND st_area(NEW.geometry) < st_area(existing.geometry)*0.5
      THEN
      INSERT INTO import_polygon_error (osm_type, osm_id, class, type, name, country_code, updated, errormessage, prevgeometry, newgeometry)
        VALUES (NEW.osm_type, NEW.osm_id, NEW.class, NEW.type, NEW.name, NEW.address->'country', now(), 
        'Area reduced from '||st_area(existing.geometry)||' to '||st_area(NEW.geometry), existing.geometry, NEW.geometry);
      RETURN null;
    END IF;

    DELETE from import_polygon_error where osm_type = NEW.osm_type and osm_id = NEW.osm_id;
    DELETE from import_polygon_delete where osm_type = NEW.osm_type and osm_id = NEW.osm_id;

    -- To paraphrase, if there isn't an existing item, OR if the admin level has changed
    IF existingplacex.osm_type IS NULL OR
        (existingplacex.class = 'boundary' AND
          ((coalesce(existingplacex.admin_level, 15) != coalesce(NEW.admin_level, 15) AND existingplacex.type = 'administrative') OR
          (existingplacex.type != NEW.type)))
    THEN

      IF existingplacex.osm_type IS NOT NULL THEN
        -- sanity check: ignore admin_level changes on places with too many active children
        -- or we end up reindexing entire countries because somebody accidentally deleted admin_level
         SELECT count(*) FROM (SELECT 'a' FROM placex , place_addressline where address_place_id = existingplacex.place_id and placex.place_id = place_addressline.place_id and indexed_status = 0 and place_addressline.isaddress LIMIT 100001) sub INTO i;
         IF i > 100000 THEN
          RETURN null;
         END IF;
      END IF;

      IF existing.osm_type IS NOT NULL THEN
        -- pathological case caused by the triggerless copy into place during initial import
        -- force delete even for large areas, it will be reinserted later
        UPDATE place set geometry = ST_SetSRID(ST_Point(0,0), 4326) where osm_type = NEW.osm_type and osm_id = NEW.osm_id and class = NEW.class and type = NEW.type;
        DELETE from place where osm_type = NEW.osm_type and osm_id = NEW.osm_id and class = NEW.class and type = NEW.type;
      END IF;

      -- No - process it as a new insertion (hopefully of low rank or it will be slow)
      insert into placex (osm_type, osm_id, class, type, name,
                          admin_level, address, extratags, geometry)
        values (NEW.osm_type, NEW.osm_id, NEW.class, NEW.type, NEW.name,
                NEW.admin_level, NEW.address, NEW.extratags, NEW.geometry);

      --DEBUG: RAISE WARNING 'insert done % % % % %',NEW.osm_type,NEW.osm_id,NEW.class,NEW.type,NEW.name;

      RETURN NEW;
    END IF;

    -- Special case for polygon shape changes because they tend to be large and we can be a bit clever about how we handle them
    IF existing.geometry::text != NEW.geometry::text 
       AND ST_GeometryType(existing.geometry) in ('ST_Polygon','ST_MultiPolygon')
       AND ST_GeometryType(NEW.geometry) in ('ST_Polygon','ST_MultiPolygon') 
       THEN 

      -- Get the version of the geometry actually used (in placex table)
      select geometry from placex where osm_type = NEW.osm_type and osm_id = NEW.osm_id and class = NEW.class and type = NEW.type into existinggeometry;

      -- Performance limit
      IF st_area(NEW.geometry) < 0.000000001 AND st_area(existinggeometry) < 1 THEN

        -- re-index points that have moved in / out of the polygon, could be done as a single query but postgres gets the index usage wrong
        update placex set indexed_status = 2 where indexed_status = 0 and 
            (st_covers(NEW.geometry, placex.geometry) OR ST_Intersects(NEW.geometry, placex.geometry))
            AND NOT (st_covers(existinggeometry, placex.geometry) OR ST_Intersects(existinggeometry, placex.geometry))
            AND rank_search > existingplacex.rank_search AND (rank_search < 28 or name is not null);

        update placex set indexed_status = 2 where indexed_status = 0 and 
            (st_covers(existinggeometry, placex.geometry) OR ST_Intersects(existinggeometry, placex.geometry))
            AND NOT (st_covers(NEW.geometry, placex.geometry) OR ST_Intersects(NEW.geometry, placex.geometry))
            AND rank_search > existingplacex.rank_search AND (rank_search < 28 or name is not null);

      END IF;

    END IF;


    IF coalesce(existing.name::text, '') != coalesce(NEW.name::text, '')
       OR coalesce(existing.extratags::text, '') != coalesce(NEW.extratags::text, '')
       OR coalesce(existing.address, ''::hstore) != coalesce(NEW.address, ''::hstore)
       OR coalesce(existing.admin_level, 15) != coalesce(NEW.admin_level, 15)
       OR existing.geometry::text != NEW.geometry::text
       THEN

      update place set 
        name = NEW.name,
        address = NEW.address,
        extratags = NEW.extratags,
        admin_level = NEW.admin_level,
        geometry = NEW.geometry
        where osm_type = NEW.osm_type and osm_id = NEW.osm_id and class = NEW.class and type = NEW.type;


      IF NEW.class in ('place','boundary') AND NEW.type in ('postcode','postal_code') THEN
          IF NEW.address is NULL OR NOT NEW.address ? 'postcode' THEN
              -- postcode was deleted, no longer retain in placex
              DELETE FROM placex where place_id = existingplacex.place_id;
              RETURN NULL;
          END IF;

          NEW.name := hstore('ref', NEW.address->'postcode');
      END IF;

      IF NEW.class in ('boundary')
         AND ST_GeometryType(NEW.geometry) not in ('ST_Polygon','ST_MultiPolygon') THEN
          DELETE FROM placex where place_id = existingplacex.place_id;
          RETURN NULL;
      END IF;

      update placex set 
        name = NEW.name,
        address = NEW.address,
        parent_place_id = null,
        extratags = NEW.extratags,
        admin_level = NEW.admin_level,
        indexed_status = 2,
        geometry = NEW.geometry
        where place_id = existingplacex.place_id;
      -- if a node(=>house), which is part of a interpolation line, changes (e.g. the street attribute) => mark this line for reparenting 
      -- (already here, because interpolation lines are reindexed before nodes, so in the second call it would be too late)
      IF NEW.osm_type='N'
         and (coalesce(existing.address, ''::hstore) != coalesce(NEW.address, ''::hstore)
             or existing.geometry::text != NEW.geometry::text)
      THEN
          result:= osmline_reinsert(NEW.osm_id, NEW.geometry);
      END IF;

      -- linked places should get potential new naming and addresses
      IF existingplacex.linked_place_id is not NULL THEN
        update placex x set
          name = p.name,
          extratags = p.extratags,
          indexed_status = 2
        from place p
        where x.place_id = existingplacex.linked_place_id
              and x.indexed_status = 0
              and x.osm_type = p.osm_type
              and x.osm_id = p.osm_id
              and x.class = p.class;
      END IF;

    END IF;

    -- Abort the add (we modified the existing place instead)
    RETURN NULL;
  END IF;

END;
$$;


ALTER FUNCTION public.place_insert() OWNER TO nominatim;

--
-- Name: placex_delete(); Type: FUNCTION; Schema: public; Owner: nominatim
--

CREATE FUNCTION public.placex_delete() RETURNS trigger
    LANGUAGE plpgsql
    AS $_$
DECLARE
  b BOOLEAN;
  classtable TEXT;
BEGIN
  -- RAISE WARNING 'placex_delete % %',OLD.osm_type,OLD.osm_id;

  update placex set linked_place_id = null, indexed_status = 2 where linked_place_id = OLD.place_id and indexed_status = 0;
  --DEBUG: RAISE WARNING 'placex_delete:01 % %',OLD.osm_type,OLD.osm_id;
  update placex set linked_place_id = null where linked_place_id = OLD.place_id;
  --DEBUG: RAISE WARNING 'placex_delete:02 % %',OLD.osm_type,OLD.osm_id;

  IF OLD.rank_address < 30 THEN

    -- mark everything linked to this place for re-indexing
    --DEBUG: RAISE WARNING 'placex_delete:03 % %',OLD.osm_type,OLD.osm_id;
    UPDATE placex set indexed_status = 2 from place_addressline where address_place_id = OLD.place_id 
      and placex.place_id = place_addressline.place_id and indexed_status = 0 and place_addressline.isaddress;

    --DEBUG: RAISE WARNING 'placex_delete:04 % %',OLD.osm_type,OLD.osm_id;
    DELETE FROM place_addressline where address_place_id = OLD.place_id;

    --DEBUG: RAISE WARNING 'placex_delete:05 % %',OLD.osm_type,OLD.osm_id;
    b := deleteRoad(OLD.partition, OLD.place_id);

    --DEBUG: RAISE WARNING 'placex_delete:06 % %',OLD.osm_type,OLD.osm_id;
    update placex set indexed_status = 2 where parent_place_id = OLD.place_id and indexed_status = 0;
    --DEBUG: RAISE WARNING 'placex_delete:07 % %',OLD.osm_type,OLD.osm_id;
    -- reparenting also for OSM Interpolation Lines (and for Tiger?)
    update location_property_osmline set indexed_status = 2 where indexed_status = 0 and parent_place_id = OLD.place_id;

  END IF;

  --DEBUG: RAISE WARNING 'placex_delete:08 % %',OLD.osm_type,OLD.osm_id;

  IF OLD.rank_address < 26 THEN
    b := deleteLocationArea(OLD.partition, OLD.place_id, OLD.rank_search);
  END IF;

  --DEBUG: RAISE WARNING 'placex_delete:09 % %',OLD.osm_type,OLD.osm_id;

  IF OLD.name is not null THEN
    IF NOT false THEN
      DELETE from search_name WHERE place_id = OLD.place_id;
    END IF;
    b := deleteSearchName(OLD.partition, OLD.place_id);
  END IF;

  --DEBUG: RAISE WARNING 'placex_delete:10 % %',OLD.osm_type,OLD.osm_id;

  DELETE FROM place_addressline where place_id = OLD.place_id;

  --DEBUG: RAISE WARNING 'placex_delete:11 % %',OLD.osm_type,OLD.osm_id;

  -- remove from tables for special search
  classtable := 'place_classtype_' || OLD.class || '_' || OLD.type;
  SELECT count(*)>0 FROM pg_tables WHERE tablename = classtable and schemaname = current_schema() INTO b;
  IF b THEN
    EXECUTE 'DELETE FROM ' || classtable::regclass || ' WHERE place_id = $1' USING OLD.place_id;
  END IF;

  --DEBUG: RAISE WARNING 'placex_delete:12 % %',OLD.osm_type,OLD.osm_id;

  RETURN OLD;

END;
$_$;


ALTER FUNCTION public.placex_delete() OWNER TO nominatim;

--
-- Name: placex_insert(); Type: FUNCTION; Schema: public; Owner: nominatim
--

CREATE FUNCTION public.placex_insert() RETURNS trigger
    LANGUAGE plpgsql
    AS $_$
DECLARE
  i INTEGER;
  postcode TEXT;
  result BOOLEAN;
  is_area BOOLEAN;
  country_code VARCHAR(2);
  default_language VARCHAR(10);
  diameter FLOAT;
  classtable TEXT;
  classtype TEXT;
BEGIN
  --DEBUG: RAISE WARNING '% % % %',NEW.osm_type,NEW.osm_id,NEW.class,NEW.type;

  NEW.place_id := nextval('seq_place');
  NEW.indexed_status := 1; --STATUS_NEW

  NEW.country_code := lower(get_country_code(NEW.geometry));

  NEW.partition := get_partition(NEW.country_code);
  NEW.geometry_sector := geometry_sector(NEW.partition, NEW.geometry);

  -- copy 'name' to or from the default language (if there is a default language)
  IF NEW.name is not null AND array_upper(akeys(NEW.name),1) > 1 THEN
    default_language := get_country_language_code(NEW.country_code);
    IF default_language IS NOT NULL THEN
      IF NEW.name ? 'name' AND NOT NEW.name ? ('name:'||default_language) THEN
        NEW.name := NEW.name || hstore(('name:'||default_language), (NEW.name -> 'name'));
      ELSEIF NEW.name ? ('name:'||default_language) AND NOT NEW.name ? 'name' THEN
        NEW.name := NEW.name || hstore('name', (NEW.name -> ('name:'||default_language)));
      END IF;
    END IF;
  END IF;

  IF NEW.osm_type = 'X' THEN
    -- E'X'ternal records should already be in the right format so do nothing
  ELSE
    is_area := ST_GeometryType(NEW.geometry) IN ('ST_Polygon','ST_MultiPolygon');

    IF NEW.class in ('place','boundary')
       AND NEW.type in ('postcode','postal_code') THEN

      IF NEW.address IS NULL OR NOT NEW.address ? 'postcode' THEN
          -- most likely just a part of a multipolygon postcode boundary, throw it away
          RETURN NULL;
      END IF;

      NEW.name := hstore('ref', NEW.address->'postcode');

      SELECT * FROM get_postcode_rank(NEW.country_code, NEW.address->'postcode')
        INTO NEW.rank_search, NEW.rank_address;

      IF NOT is_area THEN
          NEW.rank_address := 0;
      END IF;
    ELSEIF NEW.class = 'boundary' AND NOT is_area THEN
        return NULL;
    ELSEIF NEW.class = 'boundary' AND NEW.type = 'administrative'
           AND NEW.admin_level <= 4 AND NEW.osm_type = 'W' THEN
        return NULL;
    ELSEIF NEW.class = 'railway' AND NEW.type in ('rail') THEN
        return NULL;
    ELSEIF NEW.osm_type = 'N' AND NEW.class = 'highway' THEN
        NEW.rank_search = 30;
        NEW.rank_address = 0;
    ELSEIF NEW.class = 'landuse' AND NOT is_area THEN
        NEW.rank_search = 30;
        NEW.rank_address = 0;
    ELSE
      -- do table lookup stuff
      IF NEW.class = 'boundary' and NEW.type = 'administrative' THEN
        classtype = NEW.type || NEW.admin_level::TEXT;
      ELSE
        classtype = NEW.type;
      END IF;
      SELECT l.rank_search, l.rank_address FROM address_levels l
       WHERE (l.country_code = NEW.country_code or l.country_code is NULL)
             AND l.class = NEW.class AND (l.type = classtype or l.type is NULL)
       ORDER BY l.country_code, l.class, l.type LIMIT 1
        INTO NEW.rank_search, NEW.rank_address;

      IF NEW.rank_search is NULL THEN
        NEW.rank_search := 30;
      END IF;

      IF NEW.rank_address is NULL THEN
        NEW.rank_address := 30;
      END IF;
    END IF;

    -- some postcorrections
    IF NEW.class = 'waterway' AND NEW.osm_type = 'R' THEN
        -- Slightly promote waterway relations so that they are processed
        -- before their members.
        NEW.rank_search := NEW.rank_search - 1;
    END IF;

    IF (NEW.extratags -> 'capital') = 'yes' THEN
      NEW.rank_search := NEW.rank_search - 1;
    END IF;

  END IF;

  -- a country code make no sense below rank 4 (country)
  IF NEW.rank_search < 4 THEN
    NEW.country_code := NULL;
  END IF;

  --DEBUG: RAISE WARNING 'placex_insert:END: % % % %',NEW.osm_type,NEW.osm_id,NEW.class,NEW.type;

  -- The following is not needed until doing diff updates, and slows the main index process down

  IF NEW.osm_type = 'N' and NEW.rank_search > 28 THEN
      -- might be part of an interpolation
      result := osmline_reinsert(NEW.osm_id, NEW.geometry);
  ELSEIF NEW.rank_address > 0 THEN
    IF (ST_GeometryType(NEW.geometry) in ('ST_Polygon','ST_MultiPolygon') AND ST_IsValid(NEW.geometry)) THEN
      -- Performance: We just can't handle re-indexing for country level changes
      IF st_area(NEW.geometry) < 1 THEN
        -- mark items within the geometry for re-indexing
  --    RAISE WARNING 'placex poly insert: % % % %',NEW.osm_type,NEW.osm_id,NEW.class,NEW.type;

        -- work around bug in postgis, this may have been fixed in 2.0.0 (see http://trac.osgeo.org/postgis/ticket/547)
        update placex set indexed_status = 2 where (st_covers(NEW.geometry, placex.geometry) OR ST_Intersects(NEW.geometry, placex.geometry)) 
         AND rank_search > NEW.rank_search and indexed_status = 0 and ST_geometrytype(placex.geometry) = 'ST_Point' and (rank_search < 28 or name is not null or (NEW.rank_search >= 16 and address ? 'place'));
        update placex set indexed_status = 2 where (st_covers(NEW.geometry, placex.geometry) OR ST_Intersects(NEW.geometry, placex.geometry)) 
         AND rank_search > NEW.rank_search and indexed_status = 0 and ST_geometrytype(placex.geometry) != 'ST_Point' and (rank_search < 28 or name is not null or (NEW.rank_search >= 16 and address ? 'place'));
      END IF;
    ELSE
      -- mark nearby items for re-indexing, where 'nearby' depends on the features rank_search and is a complete guess :(
      diameter := 0;
      -- 16 = city, anything higher than city is effectively ignored (polygon required!)
      IF NEW.type='postcode' THEN
        diameter := 0.05;
      ELSEIF NEW.rank_search < 16 THEN
        diameter := 0;
      ELSEIF NEW.rank_search < 18 THEN
        diameter := 0.1;
      ELSEIF NEW.rank_search < 20 THEN
        diameter := 0.05;
      ELSEIF NEW.rank_search = 21 THEN
        diameter := 0.001;
      ELSEIF NEW.rank_search < 24 THEN
        diameter := 0.02;
      ELSEIF NEW.rank_search < 26 THEN
        diameter := 0.002; -- 100 to 200 meters
      ELSEIF NEW.rank_search < 28 THEN
        diameter := 0.001; -- 50 to 100 meters
      END IF;
      IF diameter > 0 THEN
  --      RAISE WARNING 'placex point insert: % % % % %',NEW.osm_type,NEW.osm_id,NEW.class,NEW.type,diameter;
        IF NEW.rank_search >= 26 THEN
          -- roads may cause reparenting for >27 rank places
          update placex set indexed_status = 2 where indexed_status = 0 and rank_search > NEW.rank_search and ST_DWithin(placex.geometry, NEW.geometry, diameter);
          -- reparenting also for OSM Interpolation Lines (and for Tiger?)
          update location_property_osmline set indexed_status = 2 where indexed_status = 0 and ST_DWithin(location_property_osmline.linegeo, NEW.geometry, diameter);
        ELSEIF NEW.rank_search >= 16 THEN
          -- up to rank 16, street-less addresses may need reparenting
          update placex set indexed_status = 2 where indexed_status = 0 and rank_search > NEW.rank_search and ST_DWithin(placex.geometry, NEW.geometry, diameter) and (rank_search < 28 or name is not null or address ? 'place');
        ELSE
          -- for all other places the search terms may change as well
          update placex set indexed_status = 2 where indexed_status = 0 and rank_search > NEW.rank_search and ST_DWithin(placex.geometry, NEW.geometry, diameter) and (rank_search < 28 or name is not null);
        END IF;
      END IF;
    END IF;
  END IF;


   -- add to tables for special search
   -- Note: won't work on initial import because the classtype tables
   -- do not yet exist. It won't hurt either.
  classtable := 'place_classtype_' || NEW.class || '_' || NEW.type;
  SELECT count(*)>0 FROM pg_tables WHERE tablename = classtable and schemaname = current_schema() INTO result;
  IF result THEN
    EXECUTE 'INSERT INTO ' || classtable::regclass || ' (place_id, centroid) VALUES ($1,$2)' 
    USING NEW.place_id, ST_Centroid(NEW.geometry);
  END IF;

  RETURN NEW;

END;
$_$;


ALTER FUNCTION public.placex_insert() OWNER TO nominatim;

--
-- Name: placex_update(); Type: FUNCTION; Schema: public; Owner: nominatim
--

CREATE FUNCTION public.placex_update() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE

  place_centroid GEOMETRY;
  near_centroid GEOMETRY;

  search_maxdistance FLOAT[];
  search_mindistance FLOAT[];
  address_havelevel BOOLEAN[];

  i INTEGER;
  iMax FLOAT;
  location RECORD;
  way RECORD;
  relation RECORD;
  relation_members TEXT[];
  relMember RECORD;
  linkedplacex RECORD;
  addr_item RECORD;
  search_diameter FLOAT;
  search_prevdiameter FLOAT;
  search_maxrank INTEGER;
  address_maxrank INTEGER;
  address_street_word_id INTEGER;
  address_street_word_ids INTEGER[];
  parent_place_id_rank BIGINT;

  addr_street TEXT;
  addr_place TEXT;

  isin TEXT[];
  isin_tokens INT[];

  location_rank_search INTEGER;
  location_distance FLOAT;
  location_parent GEOMETRY;
  location_isaddress BOOLEAN;
  location_keywords INTEGER[];

  default_language TEXT;
  name_vector INTEGER[];
  nameaddress_vector INTEGER[];

  linked_node_id BIGINT;
  linked_importance FLOAT;
  linked_wikipedia TEXT;

  result BOOLEAN;
BEGIN
  -- deferred delete
  IF OLD.indexed_status = 100 THEN
    --DEBUG: RAISE WARNING 'placex_update delete % %',NEW.osm_type,NEW.osm_id;
    delete from placex where place_id = OLD.place_id;
    RETURN NULL;
  END IF;

  IF NEW.indexed_status != 0 OR OLD.indexed_status = 0 THEN
    RETURN NEW;
  END IF;

  --DEBUG: RAISE WARNING 'placex_update % % (%)',NEW.osm_type,NEW.osm_id,NEW.place_id;

  NEW.indexed_date = now();

  IF NOT false THEN
    DELETE from search_name WHERE place_id = NEW.place_id;
  END IF;
  result := deleteSearchName(NEW.partition, NEW.place_id);
  DELETE FROM place_addressline WHERE place_id = NEW.place_id;
  result := deleteRoad(NEW.partition, NEW.place_id);
  result := deleteLocationArea(NEW.partition, NEW.place_id, NEW.rank_search);
  UPDATE placex set linked_place_id = null, indexed_status = 2
         where linked_place_id = NEW.place_id;
  -- update not necessary for osmline, cause linked_place_id does not exist

  IF NEW.linked_place_id is not null THEN
    --DEBUG: RAISE WARNING 'place already linked to %', NEW.linked_place_id;
    RETURN NEW;
  END IF;

  --DEBUG: RAISE WARNING 'Copy over address tags';
  -- housenumber is a computed field, so start with an empty value
  NEW.housenumber := NULL;
  IF NEW.address is not NULL THEN
      IF NEW.address ? 'conscriptionnumber' THEN
        i := getorcreate_housenumber_id(make_standard_name(NEW.address->'conscriptionnumber'));
        IF NEW.address ? 'streetnumber' THEN
            i := getorcreate_housenumber_id(make_standard_name(NEW.address->'streetnumber'));
            NEW.housenumber := (NEW.address->'conscriptionnumber') || '/' || (NEW.address->'streetnumber');
        ELSE
            NEW.housenumber := NEW.address->'conscriptionnumber';
        END IF;
      ELSEIF NEW.address ? 'streetnumber' THEN
        NEW.housenumber := NEW.address->'streetnumber';
        i := getorcreate_housenumber_id(make_standard_name(NEW.address->'streetnumber'));
      ELSEIF NEW.address ? 'housenumber' THEN
        NEW.housenumber := NEW.address->'housenumber';
        i := getorcreate_housenumber_id(make_standard_name(NEW.housenumber));
      END IF;

      addr_street := NEW.address->'street';
      addr_place := NEW.address->'place';

      IF NEW.address ? 'postcode' and NEW.address->'postcode' not similar to '%(,|;)%' THEN
        i := getorcreate_postcode_id(NEW.address->'postcode');
      END IF;
  END IF;

  -- Speed up searches - just use the centroid of the feature
  -- cheaper but less acurate
  place_centroid := ST_PointOnSurface(NEW.geometry);
  -- For searching near features rather use the centroid
  near_centroid := ST_Envelope(NEW.geometry);
  NEW.centroid := null;
  NEW.postcode := null;
  --DEBUG: RAISE WARNING 'Computing preliminary centroid at %',ST_AsText(place_centroid);

  -- recalculate country and partition
  IF NEW.rank_search = 4 AND NEW.address is not NULL AND NEW.address ? 'country' THEN
    -- for countries, believe the mapped country code,
    -- so that we remain in the right partition if the boundaries
    -- suddenly expand.
    NEW.country_code := lower(NEW.address->'country');
    NEW.partition := get_partition(lower(NEW.country_code));
    IF NEW.partition = 0 THEN
      NEW.country_code := lower(get_country_code(place_centroid));
      NEW.partition := get_partition(NEW.country_code);
    END IF;
  ELSE
    IF NEW.rank_search >= 4 THEN
      NEW.country_code := lower(get_country_code(place_centroid));
    ELSE
      NEW.country_code := NULL;
    END IF;
    NEW.partition := get_partition(NEW.country_code);
  END IF;
  --DEBUG: RAISE WARNING 'Country updated: "%"', NEW.country_code;

  -- waterway ways are linked when they are part of a relation and have the same class/type
  IF NEW.osm_type = 'R' and NEW.class = 'waterway' THEN
      FOR relation_members IN select members from planet_osm_rels r where r.id = NEW.osm_id and r.parts != array[]::bigint[]
      LOOP
          FOR i IN 1..array_upper(relation_members, 1) BY 2 LOOP
              IF relation_members[i+1] in ('', 'main_stream', 'side_stream') AND substring(relation_members[i],1,1) = 'w' THEN
                --DEBUG: RAISE WARNING 'waterway parent %, child %/%', NEW.osm_id, i, relation_members[i];
                FOR linked_node_id IN SELECT place_id FROM placex
                  WHERE osm_type = 'W' and osm_id = substring(relation_members[i],2,200)::bigint
                  and class = NEW.class and type in ('river', 'stream', 'canal', 'drain', 'ditch')
                  and ( relation_members[i+1] != 'side_stream' or NEW.name->'name' = name->'name')
                LOOP
                  UPDATE placex SET linked_place_id = NEW.place_id WHERE place_id = linked_node_id;
                END LOOP;
              END IF;
          END LOOP;
      END LOOP;
      --DEBUG: RAISE WARNING 'Waterway processed';
  END IF;

  -- What level are we searching from
  search_maxrank := NEW.rank_search;

  -- Thought this wasn't needed but when we add new languages to the country_name table
  -- we need to update the existing names
  IF NEW.name is not null AND array_upper(akeys(NEW.name),1) > 1 THEN
    default_language := get_country_language_code(NEW.country_code);
    IF default_language IS NOT NULL THEN
      IF NEW.name ? 'name' AND NOT NEW.name ? ('name:'||default_language) THEN
        NEW.name := NEW.name || hstore(('name:'||default_language), (NEW.name -> 'name'));
      ELSEIF NEW.name ? ('name:'||default_language) AND NOT NEW.name ? 'name' THEN
        NEW.name := NEW.name || hstore('name', (NEW.name -> ('name:'||default_language)));
      END IF;
    END IF;
  END IF;
  --DEBUG: RAISE WARNING 'Local names updated';

  -- Initialise the name vector using our name
  name_vector := make_keywords(NEW.name);
  nameaddress_vector := '{}'::int[];

  FOR i IN 1..28 LOOP
    address_havelevel[i] := false;
  END LOOP;

  NEW.importance := null;
  select language||':'||title,importance from get_wikipedia_match(NEW.extratags, NEW.country_code) INTO NEW.wikipedia,NEW.importance;
  IF NEW.importance IS NULL THEN
    select language||':'||title,importance from wikipedia_article where osm_type = NEW.osm_type and osm_id = NEW.osm_id order by importance desc limit 1 INTO NEW.wikipedia,NEW.importance;
  END IF;

--DEBUG: RAISE WARNING 'Importance computed from wikipedia: %', NEW.importance;

  -- ---------------------------------------------------------------------------
  -- For low level elements we inherit from our parent road
  IF (NEW.rank_search > 27 OR (NEW.type = 'postcode' AND NEW.rank_search = 25)) THEN

    --DEBUG: RAISE WARNING 'finding street for % %', NEW.osm_type, NEW.osm_id;

    -- We won't get a better centroid, besides these places are too small to care
    NEW.centroid := place_centroid;

    NEW.parent_place_id := null;

    -- if we have a POI and there is no address information,
    -- see if we can get it from a surrounding building
    IF NEW.osm_type = 'N' AND addr_street IS NULL AND addr_place IS NULL
       AND NEW.housenumber IS NULL THEN
      FOR location IN select address from placex where ST_Covers(geometry, place_centroid)
            and address is not null
            and (address ? 'housenumber' or address ? 'street' or address ? 'place')
            and rank_search > 28 AND ST_GeometryType(geometry) in ('ST_Polygon','ST_MultiPolygon')
            limit 1
      LOOP
        NEW.housenumber := location.address->'housenumber';
        addr_street := location.address->'street';
        addr_place := location.address->'place';
        --DEBUG: RAISE WARNING 'Found surrounding building % %', location.osm_type, location.osm_id;
      END LOOP;
    END IF;

    -- We have to find our parent road.
    -- Copy data from linked items (points on ways, addr:street links, relations)

    -- Is this object part of a relation?
    FOR relation IN select * from planet_osm_rels where parts @> ARRAY[NEW.osm_id] and members @> ARRAY[lower(NEW.osm_type)||NEW.osm_id]
    LOOP
      -- At the moment we only process one type of relation - associatedStreet
      IF relation.tags @> ARRAY['associatedStreet'] THEN
        FOR i IN 1..array_upper(relation.members, 1) BY 2 LOOP
          IF NEW.parent_place_id IS NULL AND relation.members[i+1] = 'street' THEN
--RAISE WARNING 'node in relation %',relation;
            SELECT place_id from placex where osm_type = 'W'
              and osm_id = substring(relation.members[i],2,200)::bigint
              and rank_search = 26 and name is not null INTO NEW.parent_place_id;
          END IF;
        END LOOP;
      END IF;
    END LOOP;
    --DEBUG: RAISE WARNING 'Checked for street relation (%)', NEW.parent_place_id;

    -- Note that addr:street links can only be indexed once the street itself is indexed
    IF NEW.parent_place_id IS NULL AND addr_street IS NOT NULL THEN
      address_street_word_ids := get_name_ids(make_standard_name(addr_street));
      IF address_street_word_ids IS NOT NULL THEN
        SELECT place_id from getNearestNamedRoadFeature(NEW.partition, near_centroid, address_street_word_ids) INTO NEW.parent_place_id;
      END IF;
    END IF;
    --DEBUG: RAISE WARNING 'Checked for addr:street (%)', NEW.parent_place_id;

    IF NEW.parent_place_id IS NULL AND addr_place IS NOT NULL THEN
      address_street_word_ids := get_name_ids(make_standard_name(addr_place));
      IF address_street_word_ids IS NOT NULL THEN
        SELECT place_id from getNearestNamedPlaceFeature(NEW.partition, near_centroid, address_street_word_ids) INTO NEW.parent_place_id;
      END IF;
    END IF;
    --DEBUG: RAISE WARNING 'Checked for addr:place (%)', NEW.parent_place_id;

    -- Is this node part of an interpolation?
    IF NEW.parent_place_id IS NULL AND NEW.osm_type = 'N' THEN
      SELECT q.parent_place_id FROM location_property_osmline q, planet_osm_ways x
        WHERE q.linegeo && NEW.geometry and x.id = q.osm_id and NEW.osm_id = any(x.nodes)
        LIMIT 1 INTO NEW.parent_place_id;
    END IF;
    --DEBUG: RAISE WARNING 'Checked for interpolation (%)', NEW.parent_place_id;

    -- Is this node part of a way?
    IF NEW.parent_place_id IS NULL AND NEW.osm_type = 'N' THEN

      FOR location IN
        SELECT p.place_id, p.osm_id, p.rank_search, p.address from placex p, planet_osm_ways w
         WHERE p.osm_type = 'W' and p.rank_search >= 26 and p.geometry && NEW.geometry and w.id = p.osm_id and NEW.osm_id = any(w.nodes)
      LOOP
        --DEBUG: RAISE WARNING 'Node is part of way % ', location.osm_id;

        -- Way IS a road then we are on it - that must be our road
        IF location.rank_search < 28 THEN
--RAISE WARNING 'node in way that is a street %',location;
          NEW.parent_place_id := location.place_id;
          EXIT;
        END IF;
        --DEBUG: RAISE WARNING 'Checked if way is street (%)', NEW.parent_place_id;

        -- If the way mentions a street or place address, try that for parenting.
        IF location.address is not null THEN
          IF location.address ? 'street' THEN
            address_street_word_ids := get_name_ids(make_standard_name(location.address->'street'));
            IF address_street_word_ids IS NOT NULL THEN
              SELECT place_id from getNearestNamedRoadFeature(NEW.partition, near_centroid, address_street_word_ids) INTO NEW.parent_place_id;
              EXIT WHEN NEW.parent_place_id is not NULL;
            END IF;
          END IF;
          --DEBUG: RAISE WARNING 'Checked for addr:street in way (%)', NEW.parent_place_id;

          IF location.address ? 'place' THEN
            address_street_word_ids := get_name_ids(make_standard_name(location.address->'place'));
            IF address_street_word_ids IS NOT NULL THEN
              SELECT place_id from getNearestNamedPlaceFeature(NEW.partition, near_centroid, address_street_word_ids) INTO NEW.parent_place_id;
              EXIT WHEN NEW.parent_place_id is not NULL;
            END IF;
          END IF;
        --DEBUG: RAISE WARNING 'Checked for addr:place in way (%)', NEW.parent_place_id;
        END IF;

        -- Is the WAY part of a relation
        FOR relation IN select * from planet_osm_rels where parts @> ARRAY[location.osm_id] and members @> ARRAY['w'||location.osm_id]
        LOOP
          -- At the moment we only process one type of relation - associatedStreet
          IF relation.tags @> ARRAY['associatedStreet'] AND array_upper(relation.members, 1) IS NOT NULL THEN
            FOR i IN 1..array_upper(relation.members, 1) BY 2 LOOP
              IF NEW.parent_place_id IS NULL AND relation.members[i+1] = 'street' THEN
--RAISE WARNING 'node in way that is in a relation %',relation;
                SELECT place_id from placex where osm_type='W' and osm_id = substring(relation.members[i],2,200)::bigint 
                  and rank_search = 26 and name is not null INTO NEW.parent_place_id;
              END IF;
            END LOOP;
          END IF;
        END LOOP;
        EXIT WHEN NEW.parent_place_id is not null;
        --DEBUG: RAISE WARNING 'Checked for street relation in way (%)', NEW.parent_place_id;

      END LOOP;
    END IF;

    -- Still nothing, just use the nearest road
    IF NEW.parent_place_id IS NULL THEN
      SELECT place_id FROM getNearestRoadFeature(NEW.partition, near_centroid) INTO NEW.parent_place_id;
    END IF;
    --DEBUG: RAISE WARNING 'Checked for nearest way (%)', NEW.parent_place_id;


    -- If we didn't find any road fallback to standard method
    IF NEW.parent_place_id IS NOT NULL THEN

      -- Get the details of the parent road
      SELECT p.country_code, p.postcode FROM placex p
       WHERE p.place_id = NEW.parent_place_id INTO location;

      NEW.country_code := location.country_code;
      --DEBUG: RAISE WARNING 'Got parent details from search name';

      -- determine postcode
      IF NEW.rank_search > 4 THEN
          IF NEW.address is not null AND NEW.address ? 'postcode' THEN
              NEW.postcode = upper(trim(NEW.address->'postcode'));
          ELSE
             NEW.postcode := location.postcode;
          END IF;
          IF NEW.postcode is null THEN
            NEW.postcode := get_nearest_postcode(NEW.country_code, NEW.geometry);
          END IF;
      END IF;

      -- If there is no name it isn't searchable, don't bother to create a search record
      IF NEW.name is NULL THEN
        --DEBUG: RAISE WARNING 'Not a searchable place % %', NEW.osm_type, NEW.osm_id;
        return NEW;
      END IF;

      -- Performance, it would be more acurate to do all the rest of the import
      -- process but it takes too long
      -- Just be happy with inheriting from parent road only
      IF NEW.rank_search <= 25 and NEW.rank_address > 0 THEN
        result := add_location(NEW.place_id, NEW.country_code, NEW.partition, name_vector, NEW.rank_search, NEW.rank_address, upper(trim(NEW.address->'postcode')), NEW.geometry);
        --DEBUG: RAISE WARNING 'Place added to location table';
      END IF;

      result := insertSearchName(NEW.partition, NEW.place_id, name_vector,
                                 NEW.rank_search, NEW.rank_address, NEW.geometry);

      IF NOT false THEN
          -- Merge address from parent
          SELECT s.name_vector, s.nameaddress_vector FROM search_name s
           WHERE s.place_id = NEW.parent_place_id INTO location;

          nameaddress_vector := array_merge(nameaddress_vector,
                                            location.nameaddress_vector);
          nameaddress_vector := array_merge(nameaddress_vector, location.name_vector);

          INSERT INTO search_name (place_id, search_rank, address_rank,
                                   importance, country_code, name_vector,
                                   nameaddress_vector, centroid)
                 VALUES (NEW.place_id, NEW.rank_search, NEW.rank_address,
                         NEW.importance, NEW.country_code, name_vector,
                         nameaddress_vector, place_centroid);
          --DEBUG: RAISE WARNING 'Place added to search table';
        END IF;

      return NEW;
    END IF;

  END IF;

  -- ---------------------------------------------------------------------------
  -- Full indexing
  --DEBUG: RAISE WARNING 'Using full index mode for % %', NEW.osm_type, NEW.osm_id;

  IF NEW.osm_type = 'R' AND NEW.rank_search < 26 THEN

    -- see if we have any special relation members
    select members from planet_osm_rels where id = NEW.osm_id INTO relation_members;
    --DEBUG: RAISE WARNING 'Got relation members';

    IF relation_members IS NOT NULL THEN
      FOR relMember IN select get_osm_rel_members(relation_members,ARRAY['label']) as member LOOP
        --DEBUG: RAISE WARNING 'Found label member %', relMember.member;

        FOR linkedPlacex IN select * from placex where osm_type = upper(substring(relMember.member,1,1))::char(1) 
          and osm_id = substring(relMember.member,2,10000)::bigint
          and class = 'place' order by rank_search desc limit 1 LOOP

          -- If we don't already have one use this as the centre point of the geometry
          IF NEW.centroid IS NULL THEN
            NEW.centroid := coalesce(linkedPlacex.centroid,st_centroid(linkedPlacex.geometry));
          END IF;

          -- merge in the label name, re-init word vector
          IF NOT linkedPlacex.name IS NULL THEN
            NEW.name := linkedPlacex.name || NEW.name;
            name_vector := array_merge(name_vector, make_keywords(linkedPlacex.name));
          END IF;

          -- merge in extra tags
          NEW.extratags := hstore(linkedPlacex.class, linkedPlacex.type) || coalesce(linkedPlacex.extratags, ''::hstore) || coalesce(NEW.extratags, ''::hstore);

          -- mark the linked place (excludes from search results)
          UPDATE placex set linked_place_id = NEW.place_id where place_id = linkedPlacex.place_id;

          -- keep a note of the node id in case we need it for wikipedia in a bit
          linked_node_id := linkedPlacex.osm_id;
          select language||':'||title,importance from get_wikipedia_match(linkedPlacex.extratags, NEW.country_code) INTO linked_wikipedia,linked_importance;
          --DEBUG: RAISE WARNING 'Linked label member';
        END LOOP;

      END LOOP;

      IF NEW.centroid IS NULL THEN

        FOR relMember IN select get_osm_rel_members(relation_members,ARRAY['admin_center','admin_centre']) as member LOOP
          --DEBUG: RAISE WARNING 'Found admin_center member %', relMember.member;

          FOR linkedPlacex IN select * from placex where osm_type = upper(substring(relMember.member,1,1))::char(1) 
            and osm_id = substring(relMember.member,2,10000)::bigint
            and class = 'place' order by rank_search desc limit 1 LOOP

            -- For an admin centre we also want a name match - still not perfect, for example 'new york, new york'
            -- But that can be fixed by explicitly setting the label in the data
            IF make_standard_name(NEW.name->'name') = make_standard_name(linkedPlacex.name->'name') 
              AND NEW.rank_address = linkedPlacex.rank_address THEN

              -- If we don't already have one use this as the centre point of the geometry
              IF NEW.centroid IS NULL THEN
                NEW.centroid := coalesce(linkedPlacex.centroid,st_centroid(linkedPlacex.geometry));
              END IF;

              -- merge in the name, re-init word vector
              IF NOT linkedPlacex.name IS NULL THEN
                NEW.name := linkedPlacex.name || NEW.name;
                name_vector := make_keywords(NEW.name);
              END IF;

              -- merge in extra tags
              NEW.extratags := hstore(linkedPlacex.class, linkedPlacex.type) || coalesce(linkedPlacex.extratags, ''::hstore) || coalesce(NEW.extratags, ''::hstore);

              -- mark the linked place (excludes from search results)
              UPDATE placex set linked_place_id = NEW.place_id where place_id = linkedPlacex.place_id;

              -- keep a note of the node id in case we need it for wikipedia in a bit
              linked_node_id := linkedPlacex.osm_id;
              select language||':'||title,importance from get_wikipedia_match(linkedPlacex.extratags, NEW.country_code) INTO linked_wikipedia,linked_importance;
              --DEBUG: RAISE WARNING 'Linked admin_center';
            END IF;

          END LOOP;

        END LOOP;

      END IF;
    END IF;

  END IF;

  -- Name searches can be done for ways as well as relations
  IF NEW.osm_type in ('W','R') AND NEW.rank_search < 26 AND NEW.rank_address > 0 THEN

    -- not found one yet? how about doing a name search
    IF NEW.centroid IS NULL AND (NEW.name->'name') is not null and make_standard_name(NEW.name->'name') != '' THEN

      --DEBUG: RAISE WARNING 'Looking for nodes with matching names';
      FOR linkedPlacex IN select placex.* from placex WHERE
        make_standard_name(name->'name') = make_standard_name(NEW.name->'name')
        AND placex.rank_address = NEW.rank_address
        AND placex.place_id != NEW.place_id
        AND placex.osm_type = 'N'::char(1) AND placex.rank_search < 26
        AND st_covers(NEW.geometry, placex.geometry)
      LOOP
        --DEBUG: RAISE WARNING 'Found matching place node %', linkedPlacex.osm_id;
        -- If we don't already have one use this as the centre point of the geometry
        IF NEW.centroid IS NULL THEN
          NEW.centroid := coalesce(linkedPlacex.centroid,st_centroid(linkedPlacex.geometry));
        END IF;

        -- merge in the name, re-init word vector
        NEW.name := linkedPlacex.name || NEW.name;
        name_vector := make_keywords(NEW.name);

        -- merge in extra tags
        NEW.extratags := hstore(linkedPlacex.class, linkedPlacex.type) || coalesce(linkedPlacex.extratags, ''::hstore) || coalesce(NEW.extratags, ''::hstore);

        -- mark the linked place (excludes from search results)
        UPDATE placex set linked_place_id = NEW.place_id where place_id = linkedPlacex.place_id;

        -- keep a note of the node id in case we need it for wikipedia in a bit
        linked_node_id := linkedPlacex.osm_id;
        select language||':'||title,importance from get_wikipedia_match(linkedPlacex.extratags, NEW.country_code) INTO linked_wikipedia,linked_importance;
        --DEBUG: RAISE WARNING 'Linked named place';
      END LOOP;
    END IF;

    IF NEW.centroid IS NOT NULL THEN
      place_centroid := NEW.centroid;
      -- Place might have had only a name tag before but has now received translations
      -- from the linked place. Make sure a name tag for the default language exists in
      -- this case. 
      IF NEW.name is not null AND array_upper(akeys(NEW.name),1) > 1 THEN
        default_language := get_country_language_code(NEW.country_code);
        IF default_language IS NOT NULL THEN
          IF NEW.name ? 'name' AND NOT NEW.name ? ('name:'||default_language) THEN
            NEW.name := NEW.name || hstore(('name:'||default_language), (NEW.name -> 'name'));
          ELSEIF NEW.name ? ('name:'||default_language) AND NOT NEW.name ? 'name' THEN
            NEW.name := NEW.name || hstore('name', (NEW.name -> ('name:'||default_language)));
          END IF;
        END IF;
      END IF;
      --DEBUG: RAISE WARNING 'Names updated from linked places';
    END IF;

    -- Use the maximum importance if a one could be computed from the linked object.
    IF linked_importance is not null AND
        (NEW.importance is null or NEW.importance < linked_importance) THEN
        NEW.importance = linked_importance;
    END IF;

    -- Still null? how about looking it up by the node id
    IF NEW.importance IS NULL THEN
      --DEBUG: RAISE WARNING 'Looking up importance by linked node id';
      select language||':'||title,importance from wikipedia_article where osm_type = 'N'::char(1) and osm_id = linked_node_id order by importance desc limit 1 INTO NEW.wikipedia,NEW.importance;
    END IF;

  END IF;

  -- make sure all names are in the word table
  IF NEW.admin_level = 2 AND NEW.class = 'boundary' AND NEW.type = 'administrative' AND NEW.country_code IS NOT NULL AND NEW.osm_type = 'R' THEN
    perform create_country(NEW.name, lower(NEW.country_code));
    --DEBUG: RAISE WARNING 'Country names updated';
  END IF;

  NEW.parent_place_id = 0;
  parent_place_id_rank = 0;


  -- convert address store to array of tokenids
  --DEBUG: RAISE WARNING 'Starting address search';
  isin_tokens := '{}'::int[];
  IF NEW.address IS NOT NULL THEN
    FOR addr_item IN SELECT * FROM each(NEW.address)
    LOOP
      IF addr_item.key IN ('city', 'tiger:county', 'state', 'suburb', 'province', 'district', 'region', 'county', 'municipality', 'hamlet', 'village', 'subdistrict', 'town', 'neighbourhood', 'quarter', 'parish') THEN
        address_street_word_id := get_name_id(make_standard_name(addr_item.value));
        IF address_street_word_id IS NOT NULL AND NOT(ARRAY[address_street_word_id] <@ isin_tokens) THEN
          isin_tokens := isin_tokens || address_street_word_id;
        END IF;
        IF NOT false THEN
          address_street_word_id := get_word_id(make_standard_name(addr_item.value));
          IF address_street_word_id IS NOT NULL THEN
            nameaddress_vector := array_merge(nameaddress_vector, ARRAY[address_street_word_id]);
          END IF;
        END IF;
      END IF;
      IF addr_item.key = 'is_in' THEN
        -- is_in items need splitting
        isin := regexp_split_to_array(addr_item.value, E'[;,]');
        IF array_upper(isin, 1) IS NOT NULL THEN
          FOR i IN 1..array_upper(isin, 1) LOOP
            address_street_word_id := get_name_id(make_standard_name(isin[i]));
            IF address_street_word_id IS NOT NULL AND NOT(ARRAY[address_street_word_id] <@ isin_tokens) THEN
              isin_tokens := isin_tokens || address_street_word_id;
            END IF;

            -- merge word into address vector
            IF NOT false THEN
              address_street_word_id := get_word_id(make_standard_name(isin[i]));
              IF address_street_word_id IS NOT NULL THEN
                nameaddress_vector := array_merge(nameaddress_vector, ARRAY[address_street_word_id]);
              END IF;
            END IF;
          END LOOP;
        END IF;
      END IF;
    END LOOP;
  END IF;
  IF NOT false THEN
    nameaddress_vector := array_merge(nameaddress_vector, isin_tokens);
  END IF;

-- RAISE WARNING 'ISIN: %', isin_tokens;

  -- Process area matches
  location_rank_search := 0;
  location_distance := 0;
  location_parent := NULL;
  -- added ourself as address already
  address_havelevel[NEW.rank_address] := true;
  --DEBUG: RAISE WARNING '  getNearFeatures(%,''%'',%,''%'')',NEW.partition, place_centroid, search_maxrank, isin_tokens;
  FOR location IN
    SELECT * from getNearFeatures(NEW.partition,
                                  CASE WHEN NEW.rank_search >= 26
                                             AND NEW.rank_search < 30
                                       THEN NEW.geometry
                                       ELSE place_centroid END,
                                  search_maxrank, isin_tokens)
  LOOP
    IF location.rank_address != location_rank_search THEN
      location_rank_search := location.rank_address;
      IF location.isguess THEN
        location_distance := location.distance * 1.5;
      ELSE
        IF location.rank_address <= 12 THEN
          -- for county and above, if we have an area consider that exact
          -- (It would be nice to relax the constraint for places close to
          --  the boundary but we'd need the exact geometry for that. Too
          --  expensive.)
          location_distance = 0;
        ELSE
          -- Below county level remain slightly fuzzy.
          location_distance := location.distance * 0.5;
        END IF;
      END IF;
    ELSE
      CONTINUE WHEN location.keywords <@ location_keywords;
    END IF;

    IF location.distance < location_distance OR NOT location.isguess THEN
      location_keywords := location.keywords;

      location_isaddress := NOT address_havelevel[location.rank_address];
      IF location_isaddress AND location.isguess AND location_parent IS NOT NULL THEN
          location_isaddress := ST_Contains(location_parent,location.centroid);
      END IF;

      -- RAISE WARNING '% isaddress: %', location.place_id, location_isaddress;
      -- Add it to the list of search terms
      IF NOT false THEN
          nameaddress_vector := array_merge(nameaddress_vector, location.keywords::integer[]);
      END IF;
      INSERT INTO place_addressline (place_id, address_place_id, fromarea, isaddress, distance, cached_rank_address)
        VALUES (NEW.place_id, location.place_id, true, location_isaddress, location.distance, location.rank_address);

      IF location_isaddress THEN
        -- add postcode if we have one
        -- (If multiple postcodes are available, we end up with the highest ranking one.)
        IF location.postcode is not null THEN
            NEW.postcode = location.postcode;
        END IF;

        address_havelevel[location.rank_address] := true;
        IF NOT location.isguess THEN
          SELECT geometry FROM placex WHERE place_id = location.place_id INTO location_parent;
        END IF;

        IF location.rank_address > parent_place_id_rank THEN
          NEW.parent_place_id = location.place_id;
          parent_place_id_rank = location.rank_address;
        END IF;

      END IF;

    --DEBUG: RAISE WARNING '  Terms: (%) %',location, nameaddress_vector;

    END IF;

  END LOOP;
  --DEBUG: RAISE WARNING 'address computed';

  IF NEW.address is not null AND NEW.address ? 'postcode' 
     AND NEW.address->'postcode' not similar to '%(,|;)%' THEN
    NEW.postcode := upper(trim(NEW.address->'postcode'));
  END IF;

  IF NEW.postcode is null AND NEW.rank_search > 8 THEN
    NEW.postcode := get_nearest_postcode(NEW.country_code, NEW.geometry);
  END IF;

  -- if we have a name add this to the name search table
  IF NEW.name IS NOT NULL THEN

    IF NEW.rank_search <= 25 and NEW.rank_address > 0 THEN
      result := add_location(NEW.place_id, NEW.country_code, NEW.partition, name_vector, NEW.rank_search, NEW.rank_address, upper(trim(NEW.address->'postcode')), NEW.geometry);
      --DEBUG: RAISE WARNING 'added to location (full)';
    END IF;

    IF NEW.rank_search between 26 and 27 and NEW.class = 'highway' THEN
      result := insertLocationRoad(NEW.partition, NEW.place_id, NEW.country_code, NEW.geometry);
      --DEBUG: RAISE WARNING 'insert into road location table (full)';
    END IF;

    result := insertSearchName(NEW.partition, NEW.place_id, name_vector,
                               NEW.rank_search, NEW.rank_address, NEW.geometry);
    --DEBUG: RAISE WARNING 'added to search name (full)';

    IF NOT false THEN
        INSERT INTO search_name (place_id, search_rank, address_rank,
                                 importance, country_code, name_vector,
                                 nameaddress_vector, centroid)
               VALUES (NEW.place_id, NEW.rank_search, NEW.rank_address,
                       NEW.importance, NEW.country_code, name_vector,
                       nameaddress_vector, place_centroid);
    END IF;

  END IF;

  -- If we've not managed to pick up a better one - default centroid
  IF NEW.centroid IS NULL THEN
    NEW.centroid := place_centroid;
  END IF;

  --DEBUG: RAISE WARNING 'place update % % finsihed.', NEW.osm_type, NEW.osm_id;

  RETURN NEW;
END;
$$;


ALTER FUNCTION public.placex_update() OWNER TO nominatim;

--
-- Name: postcode_update(); Type: FUNCTION; Schema: public; Owner: nominatim
--

CREATE FUNCTION public.postcode_update() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  partition SMALLINT;
  location RECORD;
BEGIN
    IF NEW.indexed_status != 0 OR OLD.indexed_status = 0 THEN
        RETURN NEW;
    END IF;

    NEW.indexed_date = now();

    partition := get_partition(NEW.country_code);

    SELECT * FROM get_postcode_rank(NEW.country_code, NEW.postcode)
      INTO NEW.rank_search, NEW.rank_address;

    NEW.parent_place_id = 0;
    FOR location IN
      SELECT place_id
        FROM getNearFeatures(partition, NEW.geometry, NEW.rank_search, '{}'::int[])
        WHERE NOT isguess ORDER BY rank_address DESC LIMIT 1
    LOOP
        NEW.parent_place_id = location.place_id;
    END LOOP;

    RETURN NEW;
END;
$$;


ALTER FUNCTION public.postcode_update() OWNER TO nominatim;

--
-- Name: quad_split_geometry(public.geometry, double precision, integer); Type: FUNCTION; Schema: public; Owner: nominatim
--

CREATE FUNCTION public.quad_split_geometry(geometry public.geometry, maxarea double precision, maxdepth integer) RETURNS SETOF public.geometry
    LANGUAGE plpgsql
    AS $$
DECLARE
  xmin FLOAT;
  ymin FLOAT;
  xmax FLOAT;
  ymax FLOAT;
  xmid FLOAT;
  ymid FLOAT;
  secgeo GEOMETRY;
  secbox GEOMETRY;
  seg INTEGER;
  geo RECORD;
  area FLOAT;
  remainingdepth INTEGER;
  added INTEGER;
  
BEGIN

--  RAISE WARNING 'quad_split_geometry: maxarea=%, depth=%',maxarea,maxdepth;

  IF (ST_GeometryType(geometry) not in ('ST_Polygon','ST_MultiPolygon') OR NOT ST_IsValid(geometry)) THEN
    RETURN NEXT geometry;
    RETURN;
  END IF;

  remainingdepth := maxdepth - 1;
  area := ST_AREA(geometry);
  IF remainingdepth < 1 OR area < maxarea THEN
    RETURN NEXT geometry;
    RETURN;
  END IF;

  xmin := st_xmin(geometry);
  xmax := st_xmax(geometry);
  ymin := st_ymin(geometry);
  ymax := st_ymax(geometry);
  secbox := ST_SetSRID(ST_MakeBox2D(ST_Point(ymin,xmin),ST_Point(ymax,xmax)),4326);

  -- if the geometry completely covers the box don't bother to slice any more
  IF ST_AREA(secbox) = area THEN
    RETURN NEXT geometry;
    RETURN;
  END IF;

  xmid := (xmin+xmax)/2;
  ymid := (ymin+ymax)/2;

  added := 0;
  FOR seg IN 1..4 LOOP

    IF seg = 1 THEN
      secbox := ST_SetSRID(ST_MakeBox2D(ST_Point(xmin,ymin),ST_Point(xmid,ymid)),4326);
    END IF;
    IF seg = 2 THEN
      secbox := ST_SetSRID(ST_MakeBox2D(ST_Point(xmin,ymid),ST_Point(xmid,ymax)),4326);
    END IF;
    IF seg = 3 THEN
      secbox := ST_SetSRID(ST_MakeBox2D(ST_Point(xmid,ymin),ST_Point(xmax,ymid)),4326);
    END IF;
    IF seg = 4 THEN
      secbox := ST_SetSRID(ST_MakeBox2D(ST_Point(xmid,ymid),ST_Point(xmax,ymax)),4326);
    END IF;

    IF st_intersects(geometry, secbox) THEN
      secgeo := st_intersection(geometry, secbox);
      IF NOT ST_IsEmpty(secgeo) AND ST_GeometryType(secgeo) in ('ST_Polygon','ST_MultiPolygon') THEN
        FOR geo IN select quad_split_geometry(secgeo, maxarea, remainingdepth) as geom LOOP
          IF NOT ST_IsEmpty(geo.geom) AND ST_GeometryType(geo.geom) in ('ST_Polygon','ST_MultiPolygon') THEN
            added := added + 1;
            RETURN NEXT geo.geom;
          END IF;
        END LOOP;
      END IF;
    END IF;
  END LOOP;

  RETURN;
END;
$$;


ALTER FUNCTION public.quad_split_geometry(geometry public.geometry, maxarea double precision, maxdepth integer) OWNER TO nominatim;

--
-- Name: reverse_place_diameter(smallint); Type: FUNCTION; Schema: public; Owner: nominatim
--

CREATE FUNCTION public.reverse_place_diameter(rank_search smallint) RETURNS double precision
    LANGUAGE plpgsql IMMUTABLE
    AS $$
BEGIN
  IF rank_search <= 4 THEN
    RETURN 5.0;
  ELSIF rank_search <= 8 THEN
    RETURN 1.8;
  ELSIF rank_search <= 12 THEN
    RETURN 0.6;
  ELSIF rank_search <= 17 THEN
    RETURN 0.16;
  ELSIF rank_search <= 18 THEN
    RETURN 0.08;
  ELSIF rank_search <= 19 THEN
    RETURN 0.04;
  END IF;

  RETURN 0.02;
END;
$$;


ALTER FUNCTION public.reverse_place_diameter(rank_search smallint) OWNER TO nominatim;

--
-- Name: split_geometry(public.geometry); Type: FUNCTION; Schema: public; Owner: nominatim
--

CREATE FUNCTION public.split_geometry(geometry public.geometry) RETURNS SETOF public.geometry
    LANGUAGE plpgsql
    AS $$
DECLARE
  geo RECORD;
BEGIN
  -- 10000000000 is ~~ 1x1 degree
  FOR geo IN select quad_split_geometry(geometry, 0.25, 20) as geom LOOP
    RETURN NEXT geo.geom;
  END LOOP;
  RETURN;
END;
$$;


ALTER FUNCTION public.split_geometry(geometry public.geometry) OWNER TO nominatim;

--
-- Name: split_line_on_node(public.geometry, public.geometry); Type: FUNCTION; Schema: public; Owner: nominatim
--

CREATE FUNCTION public.split_line_on_node(line public.geometry, point public.geometry) RETURNS public.geometry
    LANGUAGE plpgsql
    AS $$
BEGIN
  RETURN ST_Split(ST_Snap(line, point, 0.0005), point);
END;
$$;


ALTER FUNCTION public.split_line_on_node(line public.geometry, point public.geometry) OWNER TO nominatim;

--
-- Name: tiger_line_import(public.geometry, integer, integer, text, text, text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.tiger_line_import(linegeo public.geometry, in_startnumber integer, in_endnumber integer, interpolationtype text, in_street text, in_isin text, in_postcode text) RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
  startnumber INTEGER;
  endnumber INTEGER;
  stepsize INTEGER;
  numberrange INTEGER;
  place_centroid GEOMETRY;
  out_partition INTEGER;
  out_parent_place_id BIGINT;
  location RECORD;
  address_street_word_ids INTEGER[];

BEGIN

  IF in_endnumber > in_startnumber THEN
    startnumber = in_startnumber;
    endnumber = in_endnumber;
  ELSE
    startnumber = in_endnumber;
    endnumber = in_startnumber;
  END IF;

  IF startnumber < 0 THEN
    RAISE WARNING 'Negative house number range (% to %) on %, %', startnumber, endnumber, in_street, in_isin;
    RETURN 0;
  END IF;

  numberrange := endnumber - startnumber;

  IF (interpolationtype = 'odd' AND startnumber%2 = 0) OR (interpolationtype = 'even' AND startnumber%2 = 1) THEN
    startnumber := startnumber + 1;
    stepsize := 2;
  ELSE
    IF (interpolationtype = 'odd' OR interpolationtype = 'even') THEN
      stepsize := 2;
    ELSE -- everything else assumed to be 'all'
      stepsize := 1;
    END IF;
  END IF;

  -- Filter out really broken tiger data
  IF numberrange > 0 AND (numberrange::float/stepsize::float > 500)
                    AND ST_length(linegeo)/(numberrange::float/stepsize::float) < 0.000001 THEN
    RAISE WARNING 'Road too short for number range % to % on %, % (%)',startnumber,endnumber,in_street,in_isin,
                  ST_length(linegeo)/(numberrange::float/stepsize::float);
    RETURN 0;
  END IF;

  place_centroid := ST_Centroid(linegeo);
--   out_partition := get_partition('us');
  out_partition := null;
  out_parent_place_id := null;

--   address_street_word_ids := word_ids_from_name(in_street);
--   IF address_street_word_ids IS NOT NULL THEN
--     out_parent_place_id := getNearestNamedRoadPlaceId(out_partition, place_centroid,
--                                                       address_street_word_ids);
--   END IF;
--
--   IF out_parent_place_id IS NULL THEN
--     FOR location IN SELECT place_id FROM getNearestParellelRoadFeature(out_partition, linegeo) LOOP
--       out_parent_place_id := location.place_id;
--     END LOOP;
--   END IF;
--
--   IF out_parent_place_id IS NULL THEN
--     FOR location IN SELECT place_id FROM getNearestRoadFeature(out_partition, place_centroid) LOOP
--       out_parent_place_id := location.place_id;
--     END LOOP;
--   END IF;

--insert street(line) into import table
insert into location_property_tiger (linegeo, place_id, partition, parent_place_id, startnumber, endnumber, interpolationtype, postcode)
values (linegeo, nextval('seq_place'), out_partition, out_parent_place_id, startnumber, endnumber, interpolationtype, in_postcode);

  RETURN 1;
END;
$$;


ALTER FUNCTION public.tiger_line_import(linegeo public.geometry, in_startnumber integer, in_endnumber integer, interpolationtype text, in_street text, in_isin text, in_postcode text) OWNER TO postgres;

SET default_tablespace = '';

--
-- Name: address_levels; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.address_levels (
    country_code character varying(2),
    class text,
    type text,
    rank_search smallint,
    rank_address smallint
);


ALTER TABLE public.address_levels OWNER TO nominatim;

--
-- Name: country_name; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.country_name (
    country_code character varying(2),
    name public.hstore,
    country_default_language_code character varying(2),
    partition integer
);


ALTER TABLE public.country_name OWNER TO nominatim;

--
-- Name: country_osm_grid; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.country_osm_grid (
    country_code character varying(2),
    area double precision,
    geometry public.geometry
);


ALTER TABLE public.country_osm_grid OWNER TO nominatim;

--
-- Name: file; Type: SEQUENCE; Schema: public; Owner: nominatim
--

CREATE SEQUENCE public.file
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.file OWNER TO nominatim;

--
-- Name: gb_postcode; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.gb_postcode (
    id integer,
    postcode character varying(9),
    geometry public.geometry,
    CONSTRAINT enforce_dims_geometry CHECK ((public.st_ndims(geometry) = 2)),
    CONSTRAINT enforce_srid_geometry CHECK ((public.st_srid(geometry) = 4326))
);


ALTER TABLE public.gb_postcode OWNER TO nominatim;

--
-- Name: import_osmosis_log; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.import_osmosis_log (
    batchend timestamp without time zone,
    batchseq integer,
    batchsize bigint,
    starttime timestamp without time zone,
    endtime timestamp without time zone,
    event text
);


ALTER TABLE public.import_osmosis_log OWNER TO nominatim;

--
-- Name: import_polygon_delete; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.import_polygon_delete (
    osm_id bigint,
    osm_type character(1),
    class text NOT NULL,
    type text NOT NULL
);


ALTER TABLE public.import_polygon_delete OWNER TO nominatim;

--
-- Name: import_polygon_error; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.import_polygon_error (
    osm_id bigint,
    osm_type character(1),
    class text NOT NULL,
    type text NOT NULL,
    name public.hstore,
    country_code character varying(2),
    updated timestamp without time zone,
    errormessage text,
    prevgeometry public.geometry(Geometry,4326),
    newgeometry public.geometry(Geometry,4326)
);


ALTER TABLE public.import_polygon_error OWNER TO nominatim;

--
-- Name: import_status; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.import_status (
    lastimportdate timestamp without time zone NOT NULL,
    sequence_id integer,
    indexed boolean
);


ALTER TABLE public.import_status OWNER TO nominatim;

--
-- Name: location_area; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area (
    place_id bigint,
    keywords integer[],
    partition smallint,
    rank_search smallint NOT NULL,
    rank_address smallint NOT NULL,
    country_code character varying(2),
    isguess boolean,
    postcode text,
    centroid public.geometry(Point,4326),
    geometry public.geometry(Geometry,4326)
);


ALTER TABLE public.location_area OWNER TO nominatim;

--
-- Name: location_area_country; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_country (
    place_id bigint,
    country_code character varying(2),
    geometry public.geometry(Geometry,4326)
);


ALTER TABLE public.location_area_country OWNER TO nominatim;

--
-- Name: location_area_large; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large (
)
INHERITS (public.location_area);


ALTER TABLE public.location_area_large OWNER TO nominatim;

--
-- Name: location_area_large_0; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_0 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_0 OWNER TO nominatim;

--
-- Name: location_area_large_1; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_1 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_1 OWNER TO nominatim;

--
-- Name: location_area_large_10; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_10 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_10 OWNER TO nominatim;

--
-- Name: location_area_large_100; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_100 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_100 OWNER TO nominatim;

--
-- Name: location_area_large_101; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_101 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_101 OWNER TO nominatim;

--
-- Name: location_area_large_102; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_102 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_102 OWNER TO nominatim;

--
-- Name: location_area_large_103; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_103 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_103 OWNER TO nominatim;

--
-- Name: location_area_large_104; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_104 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_104 OWNER TO nominatim;

--
-- Name: location_area_large_105; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_105 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_105 OWNER TO nominatim;

--
-- Name: location_area_large_106; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_106 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_106 OWNER TO nominatim;

--
-- Name: location_area_large_107; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_107 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_107 OWNER TO nominatim;

--
-- Name: location_area_large_108; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_108 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_108 OWNER TO nominatim;

--
-- Name: location_area_large_109; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_109 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_109 OWNER TO nominatim;

--
-- Name: location_area_large_11; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_11 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_11 OWNER TO nominatim;

--
-- Name: location_area_large_110; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_110 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_110 OWNER TO nominatim;

--
-- Name: location_area_large_111; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_111 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_111 OWNER TO nominatim;

--
-- Name: location_area_large_112; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_112 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_112 OWNER TO nominatim;

--
-- Name: location_area_large_113; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_113 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_113 OWNER TO nominatim;

--
-- Name: location_area_large_114; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_114 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_114 OWNER TO nominatim;

--
-- Name: location_area_large_115; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_115 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_115 OWNER TO nominatim;

--
-- Name: location_area_large_116; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_116 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_116 OWNER TO nominatim;

--
-- Name: location_area_large_117; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_117 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_117 OWNER TO nominatim;

--
-- Name: location_area_large_118; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_118 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_118 OWNER TO nominatim;

--
-- Name: location_area_large_119; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_119 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_119 OWNER TO nominatim;

--
-- Name: location_area_large_12; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_12 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_12 OWNER TO nominatim;

--
-- Name: location_area_large_120; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_120 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_120 OWNER TO nominatim;

--
-- Name: location_area_large_121; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_121 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_121 OWNER TO nominatim;

--
-- Name: location_area_large_122; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_122 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_122 OWNER TO nominatim;

--
-- Name: location_area_large_123; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_123 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_123 OWNER TO nominatim;

--
-- Name: location_area_large_124; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_124 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_124 OWNER TO nominatim;

--
-- Name: location_area_large_125; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_125 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_125 OWNER TO nominatim;

--
-- Name: location_area_large_126; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_126 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_126 OWNER TO nominatim;

--
-- Name: location_area_large_127; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_127 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_127 OWNER TO nominatim;

--
-- Name: location_area_large_128; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_128 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_128 OWNER TO nominatim;

--
-- Name: location_area_large_129; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_129 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_129 OWNER TO nominatim;

--
-- Name: location_area_large_13; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_13 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_13 OWNER TO nominatim;

--
-- Name: location_area_large_130; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_130 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_130 OWNER TO nominatim;

--
-- Name: location_area_large_131; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_131 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_131 OWNER TO nominatim;

--
-- Name: location_area_large_132; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_132 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_132 OWNER TO nominatim;

--
-- Name: location_area_large_133; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_133 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_133 OWNER TO nominatim;

--
-- Name: location_area_large_134; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_134 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_134 OWNER TO nominatim;

--
-- Name: location_area_large_135; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_135 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_135 OWNER TO nominatim;

--
-- Name: location_area_large_136; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_136 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_136 OWNER TO nominatim;

--
-- Name: location_area_large_137; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_137 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_137 OWNER TO nominatim;

--
-- Name: location_area_large_138; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_138 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_138 OWNER TO nominatim;

--
-- Name: location_area_large_139; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_139 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_139 OWNER TO nominatim;

--
-- Name: location_area_large_14; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_14 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_14 OWNER TO nominatim;

--
-- Name: location_area_large_140; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_140 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_140 OWNER TO nominatim;

--
-- Name: location_area_large_141; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_141 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_141 OWNER TO nominatim;

--
-- Name: location_area_large_142; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_142 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_142 OWNER TO nominatim;

--
-- Name: location_area_large_143; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_143 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_143 OWNER TO nominatim;

--
-- Name: location_area_large_144; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_144 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_144 OWNER TO nominatim;

--
-- Name: location_area_large_145; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_145 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_145 OWNER TO nominatim;

--
-- Name: location_area_large_146; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_146 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_146 OWNER TO nominatim;

--
-- Name: location_area_large_147; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_147 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_147 OWNER TO nominatim;

--
-- Name: location_area_large_148; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_148 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_148 OWNER TO nominatim;

--
-- Name: location_area_large_149; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_149 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_149 OWNER TO nominatim;

--
-- Name: location_area_large_15; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_15 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_15 OWNER TO nominatim;

--
-- Name: location_area_large_150; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_150 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_150 OWNER TO nominatim;

--
-- Name: location_area_large_151; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_151 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_151 OWNER TO nominatim;

--
-- Name: location_area_large_152; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_152 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_152 OWNER TO nominatim;

--
-- Name: location_area_large_153; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_153 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_153 OWNER TO nominatim;

--
-- Name: location_area_large_154; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_154 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_154 OWNER TO nominatim;

--
-- Name: location_area_large_155; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_155 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_155 OWNER TO nominatim;

--
-- Name: location_area_large_156; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_156 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_156 OWNER TO nominatim;

--
-- Name: location_area_large_157; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_157 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_157 OWNER TO nominatim;

--
-- Name: location_area_large_158; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_158 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_158 OWNER TO nominatim;

--
-- Name: location_area_large_159; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_159 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_159 OWNER TO nominatim;

--
-- Name: location_area_large_16; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_16 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_16 OWNER TO nominatim;

--
-- Name: location_area_large_160; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_160 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_160 OWNER TO nominatim;

--
-- Name: location_area_large_161; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_161 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_161 OWNER TO nominatim;

--
-- Name: location_area_large_162; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_162 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_162 OWNER TO nominatim;

--
-- Name: location_area_large_163; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_163 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_163 OWNER TO nominatim;

--
-- Name: location_area_large_164; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_164 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_164 OWNER TO nominatim;

--
-- Name: location_area_large_165; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_165 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_165 OWNER TO nominatim;

--
-- Name: location_area_large_166; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_166 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_166 OWNER TO nominatim;

--
-- Name: location_area_large_167; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_167 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_167 OWNER TO nominatim;

--
-- Name: location_area_large_168; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_168 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_168 OWNER TO nominatim;

--
-- Name: location_area_large_169; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_169 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_169 OWNER TO nominatim;

--
-- Name: location_area_large_17; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_17 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_17 OWNER TO nominatim;

--
-- Name: location_area_large_170; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_170 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_170 OWNER TO nominatim;

--
-- Name: location_area_large_171; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_171 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_171 OWNER TO nominatim;

--
-- Name: location_area_large_172; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_172 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_172 OWNER TO nominatim;

--
-- Name: location_area_large_173; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_173 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_173 OWNER TO nominatim;

--
-- Name: location_area_large_174; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_174 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_174 OWNER TO nominatim;

--
-- Name: location_area_large_175; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_175 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_175 OWNER TO nominatim;

--
-- Name: location_area_large_176; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_176 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_176 OWNER TO nominatim;

--
-- Name: location_area_large_177; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_177 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_177 OWNER TO nominatim;

--
-- Name: location_area_large_178; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_178 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_178 OWNER TO nominatim;

--
-- Name: location_area_large_179; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_179 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_179 OWNER TO nominatim;

--
-- Name: location_area_large_18; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_18 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_18 OWNER TO nominatim;

--
-- Name: location_area_large_180; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_180 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_180 OWNER TO nominatim;

--
-- Name: location_area_large_181; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_181 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_181 OWNER TO nominatim;

--
-- Name: location_area_large_182; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_182 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_182 OWNER TO nominatim;

--
-- Name: location_area_large_183; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_183 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_183 OWNER TO nominatim;

--
-- Name: location_area_large_184; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_184 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_184 OWNER TO nominatim;

--
-- Name: location_area_large_185; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_185 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_185 OWNER TO nominatim;

--
-- Name: location_area_large_186; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_186 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_186 OWNER TO nominatim;

--
-- Name: location_area_large_187; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_187 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_187 OWNER TO nominatim;

--
-- Name: location_area_large_188; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_188 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_188 OWNER TO nominatim;

--
-- Name: location_area_large_189; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_189 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_189 OWNER TO nominatim;

--
-- Name: location_area_large_19; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_19 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_19 OWNER TO nominatim;

--
-- Name: location_area_large_190; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_190 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_190 OWNER TO nominatim;

--
-- Name: location_area_large_191; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_191 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_191 OWNER TO nominatim;

--
-- Name: location_area_large_192; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_192 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_192 OWNER TO nominatim;

--
-- Name: location_area_large_193; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_193 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_193 OWNER TO nominatim;

--
-- Name: location_area_large_194; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_194 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_194 OWNER TO nominatim;

--
-- Name: location_area_large_195; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_195 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_195 OWNER TO nominatim;

--
-- Name: location_area_large_196; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_196 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_196 OWNER TO nominatim;

--
-- Name: location_area_large_197; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_197 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_197 OWNER TO nominatim;

--
-- Name: location_area_large_198; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_198 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_198 OWNER TO nominatim;

--
-- Name: location_area_large_199; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_199 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_199 OWNER TO nominatim;

--
-- Name: location_area_large_2; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_2 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_2 OWNER TO nominatim;

--
-- Name: location_area_large_20; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_20 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_20 OWNER TO nominatim;

--
-- Name: location_area_large_200; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_200 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_200 OWNER TO nominatim;

--
-- Name: location_area_large_201; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_201 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_201 OWNER TO nominatim;

--
-- Name: location_area_large_202; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_202 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_202 OWNER TO nominatim;

--
-- Name: location_area_large_203; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_203 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_203 OWNER TO nominatim;

--
-- Name: location_area_large_204; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_204 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_204 OWNER TO nominatim;

--
-- Name: location_area_large_205; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_205 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_205 OWNER TO nominatim;

--
-- Name: location_area_large_206; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_206 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_206 OWNER TO nominatim;

--
-- Name: location_area_large_207; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_207 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_207 OWNER TO nominatim;

--
-- Name: location_area_large_208; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_208 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_208 OWNER TO nominatim;

--
-- Name: location_area_large_209; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_209 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_209 OWNER TO nominatim;

--
-- Name: location_area_large_21; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_21 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_21 OWNER TO nominatim;

--
-- Name: location_area_large_210; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_210 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_210 OWNER TO nominatim;

--
-- Name: location_area_large_211; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_211 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_211 OWNER TO nominatim;

--
-- Name: location_area_large_212; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_212 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_212 OWNER TO nominatim;

--
-- Name: location_area_large_213; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_213 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_213 OWNER TO nominatim;

--
-- Name: location_area_large_214; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_214 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_214 OWNER TO nominatim;

--
-- Name: location_area_large_215; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_215 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_215 OWNER TO nominatim;

--
-- Name: location_area_large_216; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_216 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_216 OWNER TO nominatim;

--
-- Name: location_area_large_217; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_217 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_217 OWNER TO nominatim;

--
-- Name: location_area_large_218; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_218 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_218 OWNER TO nominatim;

--
-- Name: location_area_large_219; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_219 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_219 OWNER TO nominatim;

--
-- Name: location_area_large_22; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_22 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_22 OWNER TO nominatim;

--
-- Name: location_area_large_220; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_220 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_220 OWNER TO nominatim;

--
-- Name: location_area_large_221; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_221 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_221 OWNER TO nominatim;

--
-- Name: location_area_large_222; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_222 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_222 OWNER TO nominatim;

--
-- Name: location_area_large_223; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_223 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_223 OWNER TO nominatim;

--
-- Name: location_area_large_224; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_224 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_224 OWNER TO nominatim;

--
-- Name: location_area_large_225; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_225 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_225 OWNER TO nominatim;

--
-- Name: location_area_large_226; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_226 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_226 OWNER TO nominatim;

--
-- Name: location_area_large_227; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_227 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_227 OWNER TO nominatim;

--
-- Name: location_area_large_228; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_228 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_228 OWNER TO nominatim;

--
-- Name: location_area_large_229; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_229 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_229 OWNER TO nominatim;

--
-- Name: location_area_large_23; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_23 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_23 OWNER TO nominatim;

--
-- Name: location_area_large_230; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_230 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_230 OWNER TO nominatim;

--
-- Name: location_area_large_231; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_231 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_231 OWNER TO nominatim;

--
-- Name: location_area_large_232; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_232 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_232 OWNER TO nominatim;

--
-- Name: location_area_large_233; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_233 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_233 OWNER TO nominatim;

--
-- Name: location_area_large_234; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_234 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_234 OWNER TO nominatim;

--
-- Name: location_area_large_235; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_235 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_235 OWNER TO nominatim;

--
-- Name: location_area_large_236; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_236 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_236 OWNER TO nominatim;

--
-- Name: location_area_large_237; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_237 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_237 OWNER TO nominatim;

--
-- Name: location_area_large_238; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_238 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_238 OWNER TO nominatim;

--
-- Name: location_area_large_239; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_239 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_239 OWNER TO nominatim;

--
-- Name: location_area_large_24; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_24 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_24 OWNER TO nominatim;

--
-- Name: location_area_large_240; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_240 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_240 OWNER TO nominatim;

--
-- Name: location_area_large_241; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_241 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_241 OWNER TO nominatim;

--
-- Name: location_area_large_242; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_242 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_242 OWNER TO nominatim;

--
-- Name: location_area_large_243; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_243 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_243 OWNER TO nominatim;

--
-- Name: location_area_large_244; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_244 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_244 OWNER TO nominatim;

--
-- Name: location_area_large_245; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_245 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_245 OWNER TO nominatim;

--
-- Name: location_area_large_246; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_246 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_246 OWNER TO nominatim;

--
-- Name: location_area_large_247; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_247 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_247 OWNER TO nominatim;

--
-- Name: location_area_large_248; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_248 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_248 OWNER TO nominatim;

--
-- Name: location_area_large_249; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_249 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_249 OWNER TO nominatim;

--
-- Name: location_area_large_25; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_25 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_25 OWNER TO nominatim;

--
-- Name: location_area_large_250; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_250 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_250 OWNER TO nominatim;

--
-- Name: location_area_large_26; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_26 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_26 OWNER TO nominatim;

--
-- Name: location_area_large_27; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_27 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_27 OWNER TO nominatim;

--
-- Name: location_area_large_28; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_28 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_28 OWNER TO nominatim;

--
-- Name: location_area_large_29; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_29 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_29 OWNER TO nominatim;

--
-- Name: location_area_large_3; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_3 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_3 OWNER TO nominatim;

--
-- Name: location_area_large_30; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_30 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_30 OWNER TO nominatim;

--
-- Name: location_area_large_31; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_31 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_31 OWNER TO nominatim;

--
-- Name: location_area_large_32; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_32 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_32 OWNER TO nominatim;

--
-- Name: location_area_large_33; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_33 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_33 OWNER TO nominatim;

--
-- Name: location_area_large_34; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_34 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_34 OWNER TO nominatim;

--
-- Name: location_area_large_35; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_35 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_35 OWNER TO nominatim;

--
-- Name: location_area_large_36; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_36 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_36 OWNER TO nominatim;

--
-- Name: location_area_large_37; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_37 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_37 OWNER TO nominatim;

--
-- Name: location_area_large_38; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_38 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_38 OWNER TO nominatim;

--
-- Name: location_area_large_39; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_39 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_39 OWNER TO nominatim;

--
-- Name: location_area_large_4; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_4 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_4 OWNER TO nominatim;

--
-- Name: location_area_large_40; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_40 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_40 OWNER TO nominatim;

--
-- Name: location_area_large_41; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_41 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_41 OWNER TO nominatim;

--
-- Name: location_area_large_42; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_42 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_42 OWNER TO nominatim;

--
-- Name: location_area_large_43; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_43 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_43 OWNER TO nominatim;

--
-- Name: location_area_large_44; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_44 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_44 OWNER TO nominatim;

--
-- Name: location_area_large_45; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_45 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_45 OWNER TO nominatim;

--
-- Name: location_area_large_46; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_46 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_46 OWNER TO nominatim;

--
-- Name: location_area_large_47; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_47 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_47 OWNER TO nominatim;

--
-- Name: location_area_large_48; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_48 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_48 OWNER TO nominatim;

--
-- Name: location_area_large_49; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_49 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_49 OWNER TO nominatim;

--
-- Name: location_area_large_5; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_5 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_5 OWNER TO nominatim;

--
-- Name: location_area_large_50; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_50 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_50 OWNER TO nominatim;

--
-- Name: location_area_large_51; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_51 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_51 OWNER TO nominatim;

--
-- Name: location_area_large_52; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_52 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_52 OWNER TO nominatim;

--
-- Name: location_area_large_53; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_53 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_53 OWNER TO nominatim;

--
-- Name: location_area_large_54; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_54 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_54 OWNER TO nominatim;

--
-- Name: location_area_large_55; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_55 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_55 OWNER TO nominatim;

--
-- Name: location_area_large_56; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_56 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_56 OWNER TO nominatim;

--
-- Name: location_area_large_57; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_57 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_57 OWNER TO nominatim;

--
-- Name: location_area_large_58; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_58 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_58 OWNER TO nominatim;

--
-- Name: location_area_large_59; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_59 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_59 OWNER TO nominatim;

--
-- Name: location_area_large_6; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_6 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_6 OWNER TO nominatim;

--
-- Name: location_area_large_60; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_60 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_60 OWNER TO nominatim;

--
-- Name: location_area_large_61; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_61 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_61 OWNER TO nominatim;

--
-- Name: location_area_large_62; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_62 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_62 OWNER TO nominatim;

--
-- Name: location_area_large_63; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_63 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_63 OWNER TO nominatim;

--
-- Name: location_area_large_64; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_64 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_64 OWNER TO nominatim;

--
-- Name: location_area_large_65; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_65 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_65 OWNER TO nominatim;

--
-- Name: location_area_large_66; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_66 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_66 OWNER TO nominatim;

--
-- Name: location_area_large_67; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_67 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_67 OWNER TO nominatim;

--
-- Name: location_area_large_68; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_68 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_68 OWNER TO nominatim;

--
-- Name: location_area_large_69; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_69 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_69 OWNER TO nominatim;

--
-- Name: location_area_large_7; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_7 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_7 OWNER TO nominatim;

--
-- Name: location_area_large_70; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_70 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_70 OWNER TO nominatim;

--
-- Name: location_area_large_71; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_71 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_71 OWNER TO nominatim;

--
-- Name: location_area_large_72; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_72 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_72 OWNER TO nominatim;

--
-- Name: location_area_large_73; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_73 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_73 OWNER TO nominatim;

--
-- Name: location_area_large_74; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_74 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_74 OWNER TO nominatim;

--
-- Name: location_area_large_75; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_75 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_75 OWNER TO nominatim;

--
-- Name: location_area_large_76; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_76 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_76 OWNER TO nominatim;

--
-- Name: location_area_large_77; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_77 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_77 OWNER TO nominatim;

--
-- Name: location_area_large_78; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_78 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_78 OWNER TO nominatim;

--
-- Name: location_area_large_79; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_79 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_79 OWNER TO nominatim;

--
-- Name: location_area_large_8; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_8 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_8 OWNER TO nominatim;

--
-- Name: location_area_large_80; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_80 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_80 OWNER TO nominatim;

--
-- Name: location_area_large_81; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_81 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_81 OWNER TO nominatim;

--
-- Name: location_area_large_82; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_82 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_82 OWNER TO nominatim;

--
-- Name: location_area_large_83; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_83 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_83 OWNER TO nominatim;

--
-- Name: location_area_large_84; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_84 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_84 OWNER TO nominatim;

--
-- Name: location_area_large_85; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_85 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_85 OWNER TO nominatim;

--
-- Name: location_area_large_86; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_86 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_86 OWNER TO nominatim;

--
-- Name: location_area_large_87; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_87 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_87 OWNER TO nominatim;

--
-- Name: location_area_large_88; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_88 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_88 OWNER TO nominatim;

--
-- Name: location_area_large_89; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_89 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_89 OWNER TO nominatim;

--
-- Name: location_area_large_9; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_9 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_9 OWNER TO nominatim;

--
-- Name: location_area_large_90; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_90 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_90 OWNER TO nominatim;

--
-- Name: location_area_large_91; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_91 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_91 OWNER TO nominatim;

--
-- Name: location_area_large_92; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_92 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_92 OWNER TO nominatim;

--
-- Name: location_area_large_93; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_93 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_93 OWNER TO nominatim;

--
-- Name: location_area_large_94; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_94 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_94 OWNER TO nominatim;

--
-- Name: location_area_large_95; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_95 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_95 OWNER TO nominatim;

--
-- Name: location_area_large_96; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_96 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_96 OWNER TO nominatim;

--
-- Name: location_area_large_97; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_97 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_97 OWNER TO nominatim;

--
-- Name: location_area_large_98; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_98 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_98 OWNER TO nominatim;

--
-- Name: location_area_large_99; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_area_large_99 (
)
INHERITS (public.location_area_large);


ALTER TABLE public.location_area_large_99 OWNER TO nominatim;

--
-- Name: location_postcode; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_postcode (
    place_id bigint,
    parent_place_id bigint,
    rank_search smallint,
    rank_address smallint,
    indexed_status smallint,
    indexed_date timestamp without time zone,
    country_code character varying(2),
    postcode text,
    geometry public.geometry(Geometry,4326)
);


ALTER TABLE public.location_postcode OWNER TO nominatim;

--
-- Name: location_property; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_property (
    place_id bigint,
    parent_place_id bigint,
    partition smallint,
    housenumber text,
    postcode text,
    centroid public.geometry(Point,4326)
);


ALTER TABLE public.location_property OWNER TO nominatim;

--
-- Name: location_property_aux; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_property_aux (
)
INHERITS (public.location_property);


ALTER TABLE public.location_property_aux OWNER TO nominatim;

--
-- Name: location_property_osmline; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.location_property_osmline (
    place_id bigint NOT NULL,
    osm_id bigint,
    parent_place_id bigint,
    geometry_sector integer,
    indexed_date timestamp without time zone,
    startnumber integer,
    endnumber integer,
    partition smallint,
    indexed_status smallint,
    linegeo public.geometry,
    interpolationtype text,
    address public.hstore,
    postcode text,
    country_code character varying(2)
);


ALTER TABLE public.location_property_osmline OWNER TO nominatim;

--
-- Name: location_property_tiger; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.location_property_tiger (
    linegeo public.geometry,
    place_id bigint,
    partition integer,
    parent_place_id bigint,
    startnumber integer,
    endnumber integer,
    interpolationtype text,
    postcode text
);


ALTER TABLE public.location_property_tiger OWNER TO postgres;

--
-- Name: location_property_tiger_import; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.location_property_tiger_import (
    linegeo public.geometry,
    place_id bigint,
    partition integer,
    parent_place_id bigint,
    startnumber integer,
    endnumber integer,
    interpolationtype text,
    postcode text
);


ALTER TABLE public.location_property_tiger_import OWNER TO postgres;

--
-- Name: new_query_log; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.new_query_log (
    type text,
    starttime timestamp without time zone,
    ipaddress text,
    useragent text,
    language text,
    query text,
    searchterm text,
    endtime timestamp without time zone,
    results integer,
    format text,
    secret text
);


ALTER TABLE public.new_query_log OWNER TO nominatim;

--
-- Name: place; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.place (
    osm_id bigint NOT NULL,
    osm_type character(1) NOT NULL,
    class text NOT NULL,
    type text NOT NULL,
    name public.hstore,
    admin_level smallint,
    address public.hstore,
    extratags public.hstore,
    geometry public.geometry(Geometry,4326) NOT NULL
);


ALTER TABLE public.place OWNER TO postgres;

--
-- Name: place_addressline; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.place_addressline (
    place_id bigint,
    address_place_id bigint,
    distance double precision,
    cached_rank_address smallint,
    fromarea boolean,
    isaddress boolean
);


ALTER TABLE public.place_addressline OWNER TO nominatim;

--
-- Name: place_boundingbox; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.place_boundingbox (
);


ALTER TABLE public.place_boundingbox OWNER TO nominatim;

--
-- Name: placex; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.placex (
    place_id bigint NOT NULL,
    parent_place_id bigint,
    linked_place_id bigint,
    importance double precision,
    indexed_date timestamp without time zone,
    geometry_sector integer,
    rank_address smallint,
    rank_search smallint,
    partition smallint,
    indexed_status smallint,
    osm_id bigint NOT NULL,
    osm_type character(1) NOT NULL,
    class text NOT NULL,
    type text NOT NULL,
    name public.hstore,
    admin_level smallint,
    address public.hstore,
    extratags public.hstore,
    geometry public.geometry(Geometry,4326) NOT NULL,
    wikipedia text,
    country_code character varying(2),
    housenumber text,
    postcode text,
    centroid public.geometry(Geometry,4326)
);


ALTER TABLE public.placex OWNER TO nominatim;

--
-- Name: planet_osm_line; Type: TABLE; Schema: public; Owner: postgres
--

CREATE UNLOGGED TABLE public.planet_osm_line (
    osm_id bigint,
    access text,
    "addr:housename" text,
    "addr:housenumber" text,
    "addr:interpolation" text,
    admin_level text,
    aerialway text,
    aeroway text,
    amenity text,
    area text,
    barrier text,
    bicycle text,
    brand text,
    bridge text,
    boundary text,
    building text,
    construction text,
    covered text,
    culvert text,
    cutting text,
    denomination text,
    disused text,
    embankment text,
    foot text,
    "generator:source" text,
    harbour text,
    highway text,
    historic text,
    horse text,
    intermittent text,
    junction text,
    landuse text,
    layer text,
    leisure text,
    lock text,
    man_made text,
    military text,
    motorcar text,
    name text,
    "natural" text,
    office text,
    oneway text,
    operator text,
    place text,
    population text,
    power text,
    power_source text,
    public_transport text,
    railway text,
    ref text,
    religion text,
    route text,
    service text,
    shop text,
    sport text,
    surface text,
    toll text,
    tourism text,
    "tower:type" text,
    tracktype text,
    tunnel text,
    water text,
    waterway text,
    wetland text,
    width text,
    wood text,
    z_order integer,
    way_area real,
    tags public.hstore,
    way public.geometry(LineString,4326)
)
WITH (autovacuum_enabled='false');


ALTER TABLE public.planet_osm_line OWNER TO postgres;

--
-- Name: planet_osm_nodes; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.planet_osm_nodes (
    id bigint NOT NULL,
    lat integer NOT NULL,
    lon integer NOT NULL
);


ALTER TABLE public.planet_osm_nodes OWNER TO postgres;

--
-- Name: planet_osm_point; Type: TABLE; Schema: public; Owner: postgres
--

CREATE UNLOGGED TABLE public.planet_osm_point (
    osm_id bigint,
    access text,
    "addr:housename" text,
    "addr:housenumber" text,
    "addr:interpolation" text,
    admin_level text,
    aerialway text,
    aeroway text,
    amenity text,
    area text,
    barrier text,
    bicycle text,
    brand text,
    bridge text,
    boundary text,
    building text,
    capital text,
    construction text,
    covered text,
    culvert text,
    cutting text,
    denomination text,
    disused text,
    ele text,
    embankment text,
    foot text,
    "generator:source" text,
    harbour text,
    highway text,
    historic text,
    horse text,
    intermittent text,
    junction text,
    landuse text,
    layer text,
    leisure text,
    lock text,
    man_made text,
    military text,
    motorcar text,
    name text,
    "natural" text,
    office text,
    oneway text,
    operator text,
    place text,
    poi text,
    population text,
    power text,
    power_source text,
    public_transport text,
    railway text,
    ref text,
    religion text,
    route text,
    service text,
    shop text,
    sport text,
    surface text,
    toll text,
    tourism text,
    "tower:type" text,
    tunnel text,
    water text,
    waterway text,
    wetland text,
    width text,
    wood text,
    z_order integer,
    tags public.hstore,
    way public.geometry(Point,4326)
)
WITH (autovacuum_enabled='false');


ALTER TABLE public.planet_osm_point OWNER TO postgres;

--
-- Name: planet_osm_polygon; Type: TABLE; Schema: public; Owner: postgres
--

CREATE UNLOGGED TABLE public.planet_osm_polygon (
    osm_id bigint,
    access text,
    "addr:housename" text,
    "addr:housenumber" text,
    "addr:interpolation" text,
    admin_level text,
    aerialway text,
    aeroway text,
    amenity text,
    area text,
    barrier text,
    bicycle text,
    brand text,
    bridge text,
    boundary text,
    building text,
    construction text,
    covered text,
    culvert text,
    cutting text,
    denomination text,
    disused text,
    embankment text,
    foot text,
    "generator:source" text,
    harbour text,
    highway text,
    historic text,
    horse text,
    intermittent text,
    junction text,
    landuse text,
    layer text,
    leisure text,
    lock text,
    man_made text,
    military text,
    motorcar text,
    name text,
    "natural" text,
    office text,
    oneway text,
    operator text,
    place text,
    population text,
    power text,
    power_source text,
    public_transport text,
    railway text,
    ref text,
    religion text,
    route text,
    service text,
    shop text,
    sport text,
    surface text,
    toll text,
    tourism text,
    "tower:type" text,
    tracktype text,
    tunnel text,
    water text,
    waterway text,
    wetland text,
    width text,
    wood text,
    z_order integer,
    way_area real,
    tags public.hstore,
    way public.geometry(Geometry,4326)
)
WITH (autovacuum_enabled='false');


ALTER TABLE public.planet_osm_polygon OWNER TO postgres;

--
-- Name: planet_osm_rels; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.planet_osm_rels (
    id bigint NOT NULL,
    way_off smallint,
    rel_off smallint,
    parts bigint[],
    members text[],
    tags text[]
);


ALTER TABLE public.planet_osm_rels OWNER TO postgres;

--
-- Name: planet_osm_roads; Type: TABLE; Schema: public; Owner: postgres
--

CREATE UNLOGGED TABLE public.planet_osm_roads (
    osm_id bigint,
    access text,
    "addr:housename" text,
    "addr:housenumber" text,
    "addr:interpolation" text,
    admin_level text,
    aerialway text,
    aeroway text,
    amenity text,
    area text,
    barrier text,
    bicycle text,
    brand text,
    bridge text,
    boundary text,
    building text,
    construction text,
    covered text,
    culvert text,
    cutting text,
    denomination text,
    disused text,
    embankment text,
    foot text,
    "generator:source" text,
    harbour text,
    highway text,
    historic text,
    horse text,
    intermittent text,
    junction text,
    landuse text,
    layer text,
    leisure text,
    lock text,
    man_made text,
    military text,
    motorcar text,
    name text,
    "natural" text,
    office text,
    oneway text,
    operator text,
    place text,
    population text,
    power text,
    power_source text,
    public_transport text,
    railway text,
    ref text,
    religion text,
    route text,
    service text,
    shop text,
    sport text,
    surface text,
    toll text,
    tourism text,
    "tower:type" text,
    tracktype text,
    tunnel text,
    water text,
    waterway text,
    wetland text,
    width text,
    wood text,
    z_order integer,
    way_area real,
    tags public.hstore,
    way public.geometry(LineString,4326)
)
WITH (autovacuum_enabled='false');


ALTER TABLE public.planet_osm_roads OWNER TO postgres;

--
-- Name: planet_osm_ways; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.planet_osm_ways (
    id bigint NOT NULL,
    nodes bigint[] NOT NULL,
    tags text[]
);


ALTER TABLE public.planet_osm_ways OWNER TO postgres;

--
-- Name: search_name_blank; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.search_name_blank (
    place_id bigint,
    search_rank smallint,
    address_rank smallint,
    name_vector integer[],
    centroid public.geometry(Geometry,4326)
);


ALTER TABLE public.search_name_blank OWNER TO nominatim;

--
-- Name: seq_place; Type: SEQUENCE; Schema: public; Owner: nominatim
--

CREATE SEQUENCE public.seq_place
    START WITH 100000
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.seq_place OWNER TO nominatim;

--
-- Name: seq_word; Type: SEQUENCE; Schema: public; Owner: nominatim
--

CREATE SEQUENCE public.seq_word
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.seq_word OWNER TO nominatim;

--
-- Name: us_postcode; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.us_postcode (
    postcode text,
    x double precision,
    y double precision
);


ALTER TABLE public.us_postcode OWNER TO nominatim;

--
-- Name: wikipedia_article; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.wikipedia_article (
    language text NOT NULL,
    title text NOT NULL,
    langcount integer,
    othercount integer,
    totalcount integer,
    lat double precision,
    lon double precision,
    importance double precision,
    osm_type character(1),
    osm_id bigint
);


ALTER TABLE public.wikipedia_article OWNER TO nominatim;

--
-- Name: wikipedia_redirect; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.wikipedia_redirect (
    language text NOT NULL,
    from_title text NOT NULL,
    to_title text
);


ALTER TABLE public.wikipedia_redirect OWNER TO nominatim;

--
-- Name: word; Type: TABLE; Schema: public; Owner: nominatim
--

CREATE TABLE public.word (
    word_id integer,
    word_token text,
    word text,
    class text,
    type text,
    country_code character varying(2),
    search_name_count integer,
    operator text
);


ALTER TABLE public.word OWNER TO nominatim;

--
-- Name: planet_osm_nodes planet_osm_nodes_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.planet_osm_nodes
    ADD CONSTRAINT planet_osm_nodes_pkey PRIMARY KEY (id);


--
-- Name: planet_osm_rels planet_osm_rels_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.planet_osm_rels
    ADD CONSTRAINT planet_osm_rels_pkey PRIMARY KEY (id);


--
-- Name: planet_osm_ways planet_osm_ways_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.planet_osm_ways
    ADD CONSTRAINT planet_osm_ways_pkey PRIMARY KEY (id);


--
-- Name: wikipedia_article wikipedia_article_pkey; Type: CONSTRAINT; Schema: public; Owner: nominatim
--

ALTER TABLE ONLY public.wikipedia_article
    ADD CONSTRAINT wikipedia_article_pkey PRIMARY KEY (language, title);


--
-- Name: wikipedia_redirect wikipedia_redirect_pkey; Type: CONSTRAINT; Schema: public; Owner: nominatim
--

ALTER TABLE ONLY public.wikipedia_redirect
    ADD CONSTRAINT wikipedia_redirect_pkey PRIMARY KEY (language, from_title);


--
-- Name: address_levels_country_code_class_type_idx; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE UNIQUE INDEX address_levels_country_code_class_type_idx ON public.address_levels USING btree (country_code, class, type);


--
-- Name: idx_country_name_country_code; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_country_name_country_code ON public.country_name USING btree (country_code);


--
-- Name: idx_country_osm_grid_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_country_osm_grid_geometry ON public.country_osm_grid USING gist (geometry);


--
-- Name: idx_import_polygon_delete_osmid; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_import_polygon_delete_osmid ON public.import_polygon_delete USING btree (osm_type, osm_id);


--
-- Name: idx_import_polygon_error_osmid; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_import_polygon_error_osmid ON public.import_polygon_error USING btree (osm_type, osm_id);


--
-- Name: idx_location_area_country_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_country_geometry ON public.location_area_country USING gist (geometry);


--
-- Name: idx_location_area_country_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_country_place_id ON public.location_area_country USING btree (place_id);


--
-- Name: idx_location_area_large_0_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_0_geometry ON public.location_area_large_0 USING gist (geometry);


--
-- Name: idx_location_area_large_0_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_0_place_id ON public.location_area_large_0 USING btree (place_id);


--
-- Name: idx_location_area_large_100_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_100_geometry ON public.location_area_large_100 USING gist (geometry);


--
-- Name: idx_location_area_large_100_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_100_place_id ON public.location_area_large_100 USING btree (place_id);


--
-- Name: idx_location_area_large_101_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_101_geometry ON public.location_area_large_101 USING gist (geometry);


--
-- Name: idx_location_area_large_101_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_101_place_id ON public.location_area_large_101 USING btree (place_id);


--
-- Name: idx_location_area_large_102_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_102_geometry ON public.location_area_large_102 USING gist (geometry);


--
-- Name: idx_location_area_large_102_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_102_place_id ON public.location_area_large_102 USING btree (place_id);


--
-- Name: idx_location_area_large_103_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_103_geometry ON public.location_area_large_103 USING gist (geometry);


--
-- Name: idx_location_area_large_103_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_103_place_id ON public.location_area_large_103 USING btree (place_id);


--
-- Name: idx_location_area_large_104_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_104_geometry ON public.location_area_large_104 USING gist (geometry);


--
-- Name: idx_location_area_large_104_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_104_place_id ON public.location_area_large_104 USING btree (place_id);


--
-- Name: idx_location_area_large_105_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_105_geometry ON public.location_area_large_105 USING gist (geometry);


--
-- Name: idx_location_area_large_105_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_105_place_id ON public.location_area_large_105 USING btree (place_id);


--
-- Name: idx_location_area_large_106_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_106_geometry ON public.location_area_large_106 USING gist (geometry);


--
-- Name: idx_location_area_large_106_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_106_place_id ON public.location_area_large_106 USING btree (place_id);


--
-- Name: idx_location_area_large_107_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_107_geometry ON public.location_area_large_107 USING gist (geometry);


--
-- Name: idx_location_area_large_107_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_107_place_id ON public.location_area_large_107 USING btree (place_id);


--
-- Name: idx_location_area_large_108_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_108_geometry ON public.location_area_large_108 USING gist (geometry);


--
-- Name: idx_location_area_large_108_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_108_place_id ON public.location_area_large_108 USING btree (place_id);


--
-- Name: idx_location_area_large_109_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_109_geometry ON public.location_area_large_109 USING gist (geometry);


--
-- Name: idx_location_area_large_109_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_109_place_id ON public.location_area_large_109 USING btree (place_id);


--
-- Name: idx_location_area_large_10_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_10_geometry ON public.location_area_large_10 USING gist (geometry);


--
-- Name: idx_location_area_large_10_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_10_place_id ON public.location_area_large_10 USING btree (place_id);


--
-- Name: idx_location_area_large_110_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_110_geometry ON public.location_area_large_110 USING gist (geometry);


--
-- Name: idx_location_area_large_110_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_110_place_id ON public.location_area_large_110 USING btree (place_id);


--
-- Name: idx_location_area_large_111_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_111_geometry ON public.location_area_large_111 USING gist (geometry);


--
-- Name: idx_location_area_large_111_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_111_place_id ON public.location_area_large_111 USING btree (place_id);


--
-- Name: idx_location_area_large_112_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_112_geometry ON public.location_area_large_112 USING gist (geometry);


--
-- Name: idx_location_area_large_112_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_112_place_id ON public.location_area_large_112 USING btree (place_id);


--
-- Name: idx_location_area_large_113_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_113_geometry ON public.location_area_large_113 USING gist (geometry);


--
-- Name: idx_location_area_large_113_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_113_place_id ON public.location_area_large_113 USING btree (place_id);


--
-- Name: idx_location_area_large_114_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_114_geometry ON public.location_area_large_114 USING gist (geometry);


--
-- Name: idx_location_area_large_114_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_114_place_id ON public.location_area_large_114 USING btree (place_id);


--
-- Name: idx_location_area_large_115_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_115_geometry ON public.location_area_large_115 USING gist (geometry);


--
-- Name: idx_location_area_large_115_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_115_place_id ON public.location_area_large_115 USING btree (place_id);


--
-- Name: idx_location_area_large_116_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_116_geometry ON public.location_area_large_116 USING gist (geometry);


--
-- Name: idx_location_area_large_116_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_116_place_id ON public.location_area_large_116 USING btree (place_id);


--
-- Name: idx_location_area_large_117_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_117_geometry ON public.location_area_large_117 USING gist (geometry);


--
-- Name: idx_location_area_large_117_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_117_place_id ON public.location_area_large_117 USING btree (place_id);


--
-- Name: idx_location_area_large_118_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_118_geometry ON public.location_area_large_118 USING gist (geometry);


--
-- Name: idx_location_area_large_118_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_118_place_id ON public.location_area_large_118 USING btree (place_id);


--
-- Name: idx_location_area_large_119_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_119_geometry ON public.location_area_large_119 USING gist (geometry);


--
-- Name: idx_location_area_large_119_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_119_place_id ON public.location_area_large_119 USING btree (place_id);


--
-- Name: idx_location_area_large_11_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_11_geometry ON public.location_area_large_11 USING gist (geometry);


--
-- Name: idx_location_area_large_11_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_11_place_id ON public.location_area_large_11 USING btree (place_id);


--
-- Name: idx_location_area_large_120_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_120_geometry ON public.location_area_large_120 USING gist (geometry);


--
-- Name: idx_location_area_large_120_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_120_place_id ON public.location_area_large_120 USING btree (place_id);


--
-- Name: idx_location_area_large_121_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_121_geometry ON public.location_area_large_121 USING gist (geometry);


--
-- Name: idx_location_area_large_121_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_121_place_id ON public.location_area_large_121 USING btree (place_id);


--
-- Name: idx_location_area_large_122_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_122_geometry ON public.location_area_large_122 USING gist (geometry);


--
-- Name: idx_location_area_large_122_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_122_place_id ON public.location_area_large_122 USING btree (place_id);


--
-- Name: idx_location_area_large_123_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_123_geometry ON public.location_area_large_123 USING gist (geometry);


--
-- Name: idx_location_area_large_123_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_123_place_id ON public.location_area_large_123 USING btree (place_id);


--
-- Name: idx_location_area_large_124_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_124_geometry ON public.location_area_large_124 USING gist (geometry);


--
-- Name: idx_location_area_large_124_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_124_place_id ON public.location_area_large_124 USING btree (place_id);


--
-- Name: idx_location_area_large_125_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_125_geometry ON public.location_area_large_125 USING gist (geometry);


--
-- Name: idx_location_area_large_125_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_125_place_id ON public.location_area_large_125 USING btree (place_id);


--
-- Name: idx_location_area_large_126_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_126_geometry ON public.location_area_large_126 USING gist (geometry);


--
-- Name: idx_location_area_large_126_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_126_place_id ON public.location_area_large_126 USING btree (place_id);


--
-- Name: idx_location_area_large_127_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_127_geometry ON public.location_area_large_127 USING gist (geometry);


--
-- Name: idx_location_area_large_127_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_127_place_id ON public.location_area_large_127 USING btree (place_id);


--
-- Name: idx_location_area_large_128_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_128_geometry ON public.location_area_large_128 USING gist (geometry);


--
-- Name: idx_location_area_large_128_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_128_place_id ON public.location_area_large_128 USING btree (place_id);


--
-- Name: idx_location_area_large_129_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_129_geometry ON public.location_area_large_129 USING gist (geometry);


--
-- Name: idx_location_area_large_129_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_129_place_id ON public.location_area_large_129 USING btree (place_id);


--
-- Name: idx_location_area_large_12_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_12_geometry ON public.location_area_large_12 USING gist (geometry);


--
-- Name: idx_location_area_large_12_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_12_place_id ON public.location_area_large_12 USING btree (place_id);


--
-- Name: idx_location_area_large_130_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_130_geometry ON public.location_area_large_130 USING gist (geometry);


--
-- Name: idx_location_area_large_130_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_130_place_id ON public.location_area_large_130 USING btree (place_id);


--
-- Name: idx_location_area_large_131_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_131_geometry ON public.location_area_large_131 USING gist (geometry);


--
-- Name: idx_location_area_large_131_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_131_place_id ON public.location_area_large_131 USING btree (place_id);


--
-- Name: idx_location_area_large_132_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_132_geometry ON public.location_area_large_132 USING gist (geometry);


--
-- Name: idx_location_area_large_132_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_132_place_id ON public.location_area_large_132 USING btree (place_id);


--
-- Name: idx_location_area_large_133_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_133_geometry ON public.location_area_large_133 USING gist (geometry);


--
-- Name: idx_location_area_large_133_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_133_place_id ON public.location_area_large_133 USING btree (place_id);


--
-- Name: idx_location_area_large_134_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_134_geometry ON public.location_area_large_134 USING gist (geometry);


--
-- Name: idx_location_area_large_134_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_134_place_id ON public.location_area_large_134 USING btree (place_id);


--
-- Name: idx_location_area_large_135_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_135_geometry ON public.location_area_large_135 USING gist (geometry);


--
-- Name: idx_location_area_large_135_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_135_place_id ON public.location_area_large_135 USING btree (place_id);


--
-- Name: idx_location_area_large_136_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_136_geometry ON public.location_area_large_136 USING gist (geometry);


--
-- Name: idx_location_area_large_136_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_136_place_id ON public.location_area_large_136 USING btree (place_id);


--
-- Name: idx_location_area_large_137_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_137_geometry ON public.location_area_large_137 USING gist (geometry);


--
-- Name: idx_location_area_large_137_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_137_place_id ON public.location_area_large_137 USING btree (place_id);


--
-- Name: idx_location_area_large_138_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_138_geometry ON public.location_area_large_138 USING gist (geometry);


--
-- Name: idx_location_area_large_138_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_138_place_id ON public.location_area_large_138 USING btree (place_id);


--
-- Name: idx_location_area_large_139_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_139_geometry ON public.location_area_large_139 USING gist (geometry);


--
-- Name: idx_location_area_large_139_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_139_place_id ON public.location_area_large_139 USING btree (place_id);


--
-- Name: idx_location_area_large_13_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_13_geometry ON public.location_area_large_13 USING gist (geometry);


--
-- Name: idx_location_area_large_13_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_13_place_id ON public.location_area_large_13 USING btree (place_id);


--
-- Name: idx_location_area_large_140_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_140_geometry ON public.location_area_large_140 USING gist (geometry);


--
-- Name: idx_location_area_large_140_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_140_place_id ON public.location_area_large_140 USING btree (place_id);


--
-- Name: idx_location_area_large_141_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_141_geometry ON public.location_area_large_141 USING gist (geometry);


--
-- Name: idx_location_area_large_141_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_141_place_id ON public.location_area_large_141 USING btree (place_id);


--
-- Name: idx_location_area_large_142_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_142_geometry ON public.location_area_large_142 USING gist (geometry);


--
-- Name: idx_location_area_large_142_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_142_place_id ON public.location_area_large_142 USING btree (place_id);


--
-- Name: idx_location_area_large_143_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_143_geometry ON public.location_area_large_143 USING gist (geometry);


--
-- Name: idx_location_area_large_143_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_143_place_id ON public.location_area_large_143 USING btree (place_id);


--
-- Name: idx_location_area_large_144_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_144_geometry ON public.location_area_large_144 USING gist (geometry);


--
-- Name: idx_location_area_large_144_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_144_place_id ON public.location_area_large_144 USING btree (place_id);


--
-- Name: idx_location_area_large_145_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_145_geometry ON public.location_area_large_145 USING gist (geometry);


--
-- Name: idx_location_area_large_145_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_145_place_id ON public.location_area_large_145 USING btree (place_id);


--
-- Name: idx_location_area_large_146_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_146_geometry ON public.location_area_large_146 USING gist (geometry);


--
-- Name: idx_location_area_large_146_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_146_place_id ON public.location_area_large_146 USING btree (place_id);


--
-- Name: idx_location_area_large_147_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_147_geometry ON public.location_area_large_147 USING gist (geometry);


--
-- Name: idx_location_area_large_147_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_147_place_id ON public.location_area_large_147 USING btree (place_id);


--
-- Name: idx_location_area_large_148_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_148_geometry ON public.location_area_large_148 USING gist (geometry);


--
-- Name: idx_location_area_large_148_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_148_place_id ON public.location_area_large_148 USING btree (place_id);


--
-- Name: idx_location_area_large_149_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_149_geometry ON public.location_area_large_149 USING gist (geometry);


--
-- Name: idx_location_area_large_149_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_149_place_id ON public.location_area_large_149 USING btree (place_id);


--
-- Name: idx_location_area_large_14_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_14_geometry ON public.location_area_large_14 USING gist (geometry);


--
-- Name: idx_location_area_large_14_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_14_place_id ON public.location_area_large_14 USING btree (place_id);


--
-- Name: idx_location_area_large_150_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_150_geometry ON public.location_area_large_150 USING gist (geometry);


--
-- Name: idx_location_area_large_150_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_150_place_id ON public.location_area_large_150 USING btree (place_id);


--
-- Name: idx_location_area_large_151_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_151_geometry ON public.location_area_large_151 USING gist (geometry);


--
-- Name: idx_location_area_large_151_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_151_place_id ON public.location_area_large_151 USING btree (place_id);


--
-- Name: idx_location_area_large_152_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_152_geometry ON public.location_area_large_152 USING gist (geometry);


--
-- Name: idx_location_area_large_152_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_152_place_id ON public.location_area_large_152 USING btree (place_id);


--
-- Name: idx_location_area_large_153_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_153_geometry ON public.location_area_large_153 USING gist (geometry);


--
-- Name: idx_location_area_large_153_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_153_place_id ON public.location_area_large_153 USING btree (place_id);


--
-- Name: idx_location_area_large_154_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_154_geometry ON public.location_area_large_154 USING gist (geometry);


--
-- Name: idx_location_area_large_154_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_154_place_id ON public.location_area_large_154 USING btree (place_id);


--
-- Name: idx_location_area_large_155_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_155_geometry ON public.location_area_large_155 USING gist (geometry);


--
-- Name: idx_location_area_large_155_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_155_place_id ON public.location_area_large_155 USING btree (place_id);


--
-- Name: idx_location_area_large_156_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_156_geometry ON public.location_area_large_156 USING gist (geometry);


--
-- Name: idx_location_area_large_156_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_156_place_id ON public.location_area_large_156 USING btree (place_id);


--
-- Name: idx_location_area_large_157_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_157_geometry ON public.location_area_large_157 USING gist (geometry);


--
-- Name: idx_location_area_large_157_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_157_place_id ON public.location_area_large_157 USING btree (place_id);


--
-- Name: idx_location_area_large_158_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_158_geometry ON public.location_area_large_158 USING gist (geometry);


--
-- Name: idx_location_area_large_158_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_158_place_id ON public.location_area_large_158 USING btree (place_id);


--
-- Name: idx_location_area_large_159_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_159_geometry ON public.location_area_large_159 USING gist (geometry);


--
-- Name: idx_location_area_large_159_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_159_place_id ON public.location_area_large_159 USING btree (place_id);


--
-- Name: idx_location_area_large_15_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_15_geometry ON public.location_area_large_15 USING gist (geometry);


--
-- Name: idx_location_area_large_15_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_15_place_id ON public.location_area_large_15 USING btree (place_id);


--
-- Name: idx_location_area_large_160_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_160_geometry ON public.location_area_large_160 USING gist (geometry);


--
-- Name: idx_location_area_large_160_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_160_place_id ON public.location_area_large_160 USING btree (place_id);


--
-- Name: idx_location_area_large_161_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_161_geometry ON public.location_area_large_161 USING gist (geometry);


--
-- Name: idx_location_area_large_161_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_161_place_id ON public.location_area_large_161 USING btree (place_id);


--
-- Name: idx_location_area_large_162_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_162_geometry ON public.location_area_large_162 USING gist (geometry);


--
-- Name: idx_location_area_large_162_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_162_place_id ON public.location_area_large_162 USING btree (place_id);


--
-- Name: idx_location_area_large_163_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_163_geometry ON public.location_area_large_163 USING gist (geometry);


--
-- Name: idx_location_area_large_163_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_163_place_id ON public.location_area_large_163 USING btree (place_id);


--
-- Name: idx_location_area_large_164_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_164_geometry ON public.location_area_large_164 USING gist (geometry);


--
-- Name: idx_location_area_large_164_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_164_place_id ON public.location_area_large_164 USING btree (place_id);


--
-- Name: idx_location_area_large_165_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_165_geometry ON public.location_area_large_165 USING gist (geometry);


--
-- Name: idx_location_area_large_165_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_165_place_id ON public.location_area_large_165 USING btree (place_id);


--
-- Name: idx_location_area_large_166_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_166_geometry ON public.location_area_large_166 USING gist (geometry);


--
-- Name: idx_location_area_large_166_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_166_place_id ON public.location_area_large_166 USING btree (place_id);


--
-- Name: idx_location_area_large_167_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_167_geometry ON public.location_area_large_167 USING gist (geometry);


--
-- Name: idx_location_area_large_167_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_167_place_id ON public.location_area_large_167 USING btree (place_id);


--
-- Name: idx_location_area_large_168_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_168_geometry ON public.location_area_large_168 USING gist (geometry);


--
-- Name: idx_location_area_large_168_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_168_place_id ON public.location_area_large_168 USING btree (place_id);


--
-- Name: idx_location_area_large_169_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_169_geometry ON public.location_area_large_169 USING gist (geometry);


--
-- Name: idx_location_area_large_169_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_169_place_id ON public.location_area_large_169 USING btree (place_id);


--
-- Name: idx_location_area_large_16_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_16_geometry ON public.location_area_large_16 USING gist (geometry);


--
-- Name: idx_location_area_large_16_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_16_place_id ON public.location_area_large_16 USING btree (place_id);


--
-- Name: idx_location_area_large_170_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_170_geometry ON public.location_area_large_170 USING gist (geometry);


--
-- Name: idx_location_area_large_170_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_170_place_id ON public.location_area_large_170 USING btree (place_id);


--
-- Name: idx_location_area_large_171_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_171_geometry ON public.location_area_large_171 USING gist (geometry);


--
-- Name: idx_location_area_large_171_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_171_place_id ON public.location_area_large_171 USING btree (place_id);


--
-- Name: idx_location_area_large_172_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_172_geometry ON public.location_area_large_172 USING gist (geometry);


--
-- Name: idx_location_area_large_172_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_172_place_id ON public.location_area_large_172 USING btree (place_id);


--
-- Name: idx_location_area_large_173_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_173_geometry ON public.location_area_large_173 USING gist (geometry);


--
-- Name: idx_location_area_large_173_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_173_place_id ON public.location_area_large_173 USING btree (place_id);


--
-- Name: idx_location_area_large_174_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_174_geometry ON public.location_area_large_174 USING gist (geometry);


--
-- Name: idx_location_area_large_174_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_174_place_id ON public.location_area_large_174 USING btree (place_id);


--
-- Name: idx_location_area_large_175_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_175_geometry ON public.location_area_large_175 USING gist (geometry);


--
-- Name: idx_location_area_large_175_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_175_place_id ON public.location_area_large_175 USING btree (place_id);


--
-- Name: idx_location_area_large_176_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_176_geometry ON public.location_area_large_176 USING gist (geometry);


--
-- Name: idx_location_area_large_176_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_176_place_id ON public.location_area_large_176 USING btree (place_id);


--
-- Name: idx_location_area_large_177_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_177_geometry ON public.location_area_large_177 USING gist (geometry);


--
-- Name: idx_location_area_large_177_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_177_place_id ON public.location_area_large_177 USING btree (place_id);


--
-- Name: idx_location_area_large_178_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_178_geometry ON public.location_area_large_178 USING gist (geometry);


--
-- Name: idx_location_area_large_178_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_178_place_id ON public.location_area_large_178 USING btree (place_id);


--
-- Name: idx_location_area_large_179_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_179_geometry ON public.location_area_large_179 USING gist (geometry);


--
-- Name: idx_location_area_large_179_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_179_place_id ON public.location_area_large_179 USING btree (place_id);


--
-- Name: idx_location_area_large_17_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_17_geometry ON public.location_area_large_17 USING gist (geometry);


--
-- Name: idx_location_area_large_17_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_17_place_id ON public.location_area_large_17 USING btree (place_id);


--
-- Name: idx_location_area_large_180_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_180_geometry ON public.location_area_large_180 USING gist (geometry);


--
-- Name: idx_location_area_large_180_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_180_place_id ON public.location_area_large_180 USING btree (place_id);


--
-- Name: idx_location_area_large_181_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_181_geometry ON public.location_area_large_181 USING gist (geometry);


--
-- Name: idx_location_area_large_181_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_181_place_id ON public.location_area_large_181 USING btree (place_id);


--
-- Name: idx_location_area_large_182_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_182_geometry ON public.location_area_large_182 USING gist (geometry);


--
-- Name: idx_location_area_large_182_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_182_place_id ON public.location_area_large_182 USING btree (place_id);


--
-- Name: idx_location_area_large_183_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_183_geometry ON public.location_area_large_183 USING gist (geometry);


--
-- Name: idx_location_area_large_183_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_183_place_id ON public.location_area_large_183 USING btree (place_id);


--
-- Name: idx_location_area_large_184_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_184_geometry ON public.location_area_large_184 USING gist (geometry);


--
-- Name: idx_location_area_large_184_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_184_place_id ON public.location_area_large_184 USING btree (place_id);


--
-- Name: idx_location_area_large_185_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_185_geometry ON public.location_area_large_185 USING gist (geometry);


--
-- Name: idx_location_area_large_185_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_185_place_id ON public.location_area_large_185 USING btree (place_id);


--
-- Name: idx_location_area_large_186_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_186_geometry ON public.location_area_large_186 USING gist (geometry);


--
-- Name: idx_location_area_large_186_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_186_place_id ON public.location_area_large_186 USING btree (place_id);


--
-- Name: idx_location_area_large_187_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_187_geometry ON public.location_area_large_187 USING gist (geometry);


--
-- Name: idx_location_area_large_187_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_187_place_id ON public.location_area_large_187 USING btree (place_id);


--
-- Name: idx_location_area_large_188_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_188_geometry ON public.location_area_large_188 USING gist (geometry);


--
-- Name: idx_location_area_large_188_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_188_place_id ON public.location_area_large_188 USING btree (place_id);


--
-- Name: idx_location_area_large_189_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_189_geometry ON public.location_area_large_189 USING gist (geometry);


--
-- Name: idx_location_area_large_189_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_189_place_id ON public.location_area_large_189 USING btree (place_id);


--
-- Name: idx_location_area_large_18_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_18_geometry ON public.location_area_large_18 USING gist (geometry);


--
-- Name: idx_location_area_large_18_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_18_place_id ON public.location_area_large_18 USING btree (place_id);


--
-- Name: idx_location_area_large_190_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_190_geometry ON public.location_area_large_190 USING gist (geometry);


--
-- Name: idx_location_area_large_190_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_190_place_id ON public.location_area_large_190 USING btree (place_id);


--
-- Name: idx_location_area_large_191_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_191_geometry ON public.location_area_large_191 USING gist (geometry);


--
-- Name: idx_location_area_large_191_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_191_place_id ON public.location_area_large_191 USING btree (place_id);


--
-- Name: idx_location_area_large_192_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_192_geometry ON public.location_area_large_192 USING gist (geometry);


--
-- Name: idx_location_area_large_192_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_192_place_id ON public.location_area_large_192 USING btree (place_id);


--
-- Name: idx_location_area_large_193_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_193_geometry ON public.location_area_large_193 USING gist (geometry);


--
-- Name: idx_location_area_large_193_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_193_place_id ON public.location_area_large_193 USING btree (place_id);


--
-- Name: idx_location_area_large_194_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_194_geometry ON public.location_area_large_194 USING gist (geometry);


--
-- Name: idx_location_area_large_194_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_194_place_id ON public.location_area_large_194 USING btree (place_id);


--
-- Name: idx_location_area_large_195_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_195_geometry ON public.location_area_large_195 USING gist (geometry);


--
-- Name: idx_location_area_large_195_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_195_place_id ON public.location_area_large_195 USING btree (place_id);


--
-- Name: idx_location_area_large_196_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_196_geometry ON public.location_area_large_196 USING gist (geometry);


--
-- Name: idx_location_area_large_196_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_196_place_id ON public.location_area_large_196 USING btree (place_id);


--
-- Name: idx_location_area_large_197_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_197_geometry ON public.location_area_large_197 USING gist (geometry);


--
-- Name: idx_location_area_large_197_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_197_place_id ON public.location_area_large_197 USING btree (place_id);


--
-- Name: idx_location_area_large_198_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_198_geometry ON public.location_area_large_198 USING gist (geometry);


--
-- Name: idx_location_area_large_198_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_198_place_id ON public.location_area_large_198 USING btree (place_id);


--
-- Name: idx_location_area_large_199_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_199_geometry ON public.location_area_large_199 USING gist (geometry);


--
-- Name: idx_location_area_large_199_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_199_place_id ON public.location_area_large_199 USING btree (place_id);


--
-- Name: idx_location_area_large_19_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_19_geometry ON public.location_area_large_19 USING gist (geometry);


--
-- Name: idx_location_area_large_19_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_19_place_id ON public.location_area_large_19 USING btree (place_id);


--
-- Name: idx_location_area_large_1_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_1_geometry ON public.location_area_large_1 USING gist (geometry);


--
-- Name: idx_location_area_large_1_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_1_place_id ON public.location_area_large_1 USING btree (place_id);


--
-- Name: idx_location_area_large_200_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_200_geometry ON public.location_area_large_200 USING gist (geometry);


--
-- Name: idx_location_area_large_200_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_200_place_id ON public.location_area_large_200 USING btree (place_id);


--
-- Name: idx_location_area_large_201_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_201_geometry ON public.location_area_large_201 USING gist (geometry);


--
-- Name: idx_location_area_large_201_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_201_place_id ON public.location_area_large_201 USING btree (place_id);


--
-- Name: idx_location_area_large_202_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_202_geometry ON public.location_area_large_202 USING gist (geometry);


--
-- Name: idx_location_area_large_202_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_202_place_id ON public.location_area_large_202 USING btree (place_id);


--
-- Name: idx_location_area_large_203_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_203_geometry ON public.location_area_large_203 USING gist (geometry);


--
-- Name: idx_location_area_large_203_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_203_place_id ON public.location_area_large_203 USING btree (place_id);


--
-- Name: idx_location_area_large_204_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_204_geometry ON public.location_area_large_204 USING gist (geometry);


--
-- Name: idx_location_area_large_204_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_204_place_id ON public.location_area_large_204 USING btree (place_id);


--
-- Name: idx_location_area_large_205_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_205_geometry ON public.location_area_large_205 USING gist (geometry);


--
-- Name: idx_location_area_large_205_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_205_place_id ON public.location_area_large_205 USING btree (place_id);


--
-- Name: idx_location_area_large_206_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_206_geometry ON public.location_area_large_206 USING gist (geometry);


--
-- Name: idx_location_area_large_206_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_206_place_id ON public.location_area_large_206 USING btree (place_id);


--
-- Name: idx_location_area_large_207_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_207_geometry ON public.location_area_large_207 USING gist (geometry);


--
-- Name: idx_location_area_large_207_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_207_place_id ON public.location_area_large_207 USING btree (place_id);


--
-- Name: idx_location_area_large_208_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_208_geometry ON public.location_area_large_208 USING gist (geometry);


--
-- Name: idx_location_area_large_208_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_208_place_id ON public.location_area_large_208 USING btree (place_id);


--
-- Name: idx_location_area_large_209_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_209_geometry ON public.location_area_large_209 USING gist (geometry);


--
-- Name: idx_location_area_large_209_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_209_place_id ON public.location_area_large_209 USING btree (place_id);


--
-- Name: idx_location_area_large_20_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_20_geometry ON public.location_area_large_20 USING gist (geometry);


--
-- Name: idx_location_area_large_20_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_20_place_id ON public.location_area_large_20 USING btree (place_id);


--
-- Name: idx_location_area_large_210_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_210_geometry ON public.location_area_large_210 USING gist (geometry);


--
-- Name: idx_location_area_large_210_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_210_place_id ON public.location_area_large_210 USING btree (place_id);


--
-- Name: idx_location_area_large_211_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_211_geometry ON public.location_area_large_211 USING gist (geometry);


--
-- Name: idx_location_area_large_211_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_211_place_id ON public.location_area_large_211 USING btree (place_id);


--
-- Name: idx_location_area_large_212_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_212_geometry ON public.location_area_large_212 USING gist (geometry);


--
-- Name: idx_location_area_large_212_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_212_place_id ON public.location_area_large_212 USING btree (place_id);


--
-- Name: idx_location_area_large_213_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_213_geometry ON public.location_area_large_213 USING gist (geometry);


--
-- Name: idx_location_area_large_213_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_213_place_id ON public.location_area_large_213 USING btree (place_id);


--
-- Name: idx_location_area_large_214_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_214_geometry ON public.location_area_large_214 USING gist (geometry);


--
-- Name: idx_location_area_large_214_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_214_place_id ON public.location_area_large_214 USING btree (place_id);


--
-- Name: idx_location_area_large_215_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_215_geometry ON public.location_area_large_215 USING gist (geometry);


--
-- Name: idx_location_area_large_215_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_215_place_id ON public.location_area_large_215 USING btree (place_id);


--
-- Name: idx_location_area_large_216_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_216_geometry ON public.location_area_large_216 USING gist (geometry);


--
-- Name: idx_location_area_large_216_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_216_place_id ON public.location_area_large_216 USING btree (place_id);


--
-- Name: idx_location_area_large_217_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_217_geometry ON public.location_area_large_217 USING gist (geometry);


--
-- Name: idx_location_area_large_217_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_217_place_id ON public.location_area_large_217 USING btree (place_id);


--
-- Name: idx_location_area_large_218_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_218_geometry ON public.location_area_large_218 USING gist (geometry);


--
-- Name: idx_location_area_large_218_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_218_place_id ON public.location_area_large_218 USING btree (place_id);


--
-- Name: idx_location_area_large_219_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_219_geometry ON public.location_area_large_219 USING gist (geometry);


--
-- Name: idx_location_area_large_219_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_219_place_id ON public.location_area_large_219 USING btree (place_id);


--
-- Name: idx_location_area_large_21_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_21_geometry ON public.location_area_large_21 USING gist (geometry);


--
-- Name: idx_location_area_large_21_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_21_place_id ON public.location_area_large_21 USING btree (place_id);


--
-- Name: idx_location_area_large_220_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_220_geometry ON public.location_area_large_220 USING gist (geometry);


--
-- Name: idx_location_area_large_220_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_220_place_id ON public.location_area_large_220 USING btree (place_id);


--
-- Name: idx_location_area_large_221_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_221_geometry ON public.location_area_large_221 USING gist (geometry);


--
-- Name: idx_location_area_large_221_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_221_place_id ON public.location_area_large_221 USING btree (place_id);


--
-- Name: idx_location_area_large_222_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_222_geometry ON public.location_area_large_222 USING gist (geometry);


--
-- Name: idx_location_area_large_222_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_222_place_id ON public.location_area_large_222 USING btree (place_id);


--
-- Name: idx_location_area_large_223_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_223_geometry ON public.location_area_large_223 USING gist (geometry);


--
-- Name: idx_location_area_large_223_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_223_place_id ON public.location_area_large_223 USING btree (place_id);


--
-- Name: idx_location_area_large_224_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_224_geometry ON public.location_area_large_224 USING gist (geometry);


--
-- Name: idx_location_area_large_224_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_224_place_id ON public.location_area_large_224 USING btree (place_id);


--
-- Name: idx_location_area_large_225_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_225_geometry ON public.location_area_large_225 USING gist (geometry);


--
-- Name: idx_location_area_large_225_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_225_place_id ON public.location_area_large_225 USING btree (place_id);


--
-- Name: idx_location_area_large_226_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_226_geometry ON public.location_area_large_226 USING gist (geometry);


--
-- Name: idx_location_area_large_226_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_226_place_id ON public.location_area_large_226 USING btree (place_id);


--
-- Name: idx_location_area_large_227_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_227_geometry ON public.location_area_large_227 USING gist (geometry);


--
-- Name: idx_location_area_large_227_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_227_place_id ON public.location_area_large_227 USING btree (place_id);


--
-- Name: idx_location_area_large_228_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_228_geometry ON public.location_area_large_228 USING gist (geometry);


--
-- Name: idx_location_area_large_228_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_228_place_id ON public.location_area_large_228 USING btree (place_id);


--
-- Name: idx_location_area_large_229_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_229_geometry ON public.location_area_large_229 USING gist (geometry);


--
-- Name: idx_location_area_large_229_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_229_place_id ON public.location_area_large_229 USING btree (place_id);


--
-- Name: idx_location_area_large_22_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_22_geometry ON public.location_area_large_22 USING gist (geometry);


--
-- Name: idx_location_area_large_22_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_22_place_id ON public.location_area_large_22 USING btree (place_id);


--
-- Name: idx_location_area_large_230_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_230_geometry ON public.location_area_large_230 USING gist (geometry);


--
-- Name: idx_location_area_large_230_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_230_place_id ON public.location_area_large_230 USING btree (place_id);


--
-- Name: idx_location_area_large_231_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_231_geometry ON public.location_area_large_231 USING gist (geometry);


--
-- Name: idx_location_area_large_231_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_231_place_id ON public.location_area_large_231 USING btree (place_id);


--
-- Name: idx_location_area_large_232_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_232_geometry ON public.location_area_large_232 USING gist (geometry);


--
-- Name: idx_location_area_large_232_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_232_place_id ON public.location_area_large_232 USING btree (place_id);


--
-- Name: idx_location_area_large_233_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_233_geometry ON public.location_area_large_233 USING gist (geometry);


--
-- Name: idx_location_area_large_233_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_233_place_id ON public.location_area_large_233 USING btree (place_id);


--
-- Name: idx_location_area_large_234_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_234_geometry ON public.location_area_large_234 USING gist (geometry);


--
-- Name: idx_location_area_large_234_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_234_place_id ON public.location_area_large_234 USING btree (place_id);


--
-- Name: idx_location_area_large_235_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_235_geometry ON public.location_area_large_235 USING gist (geometry);


--
-- Name: idx_location_area_large_235_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_235_place_id ON public.location_area_large_235 USING btree (place_id);


--
-- Name: idx_location_area_large_236_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_236_geometry ON public.location_area_large_236 USING gist (geometry);


--
-- Name: idx_location_area_large_236_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_236_place_id ON public.location_area_large_236 USING btree (place_id);


--
-- Name: idx_location_area_large_237_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_237_geometry ON public.location_area_large_237 USING gist (geometry);


--
-- Name: idx_location_area_large_237_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_237_place_id ON public.location_area_large_237 USING btree (place_id);


--
-- Name: idx_location_area_large_238_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_238_geometry ON public.location_area_large_238 USING gist (geometry);


--
-- Name: idx_location_area_large_238_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_238_place_id ON public.location_area_large_238 USING btree (place_id);


--
-- Name: idx_location_area_large_239_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_239_geometry ON public.location_area_large_239 USING gist (geometry);


--
-- Name: idx_location_area_large_239_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_239_place_id ON public.location_area_large_239 USING btree (place_id);


--
-- Name: idx_location_area_large_23_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_23_geometry ON public.location_area_large_23 USING gist (geometry);


--
-- Name: idx_location_area_large_23_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_23_place_id ON public.location_area_large_23 USING btree (place_id);


--
-- Name: idx_location_area_large_240_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_240_geometry ON public.location_area_large_240 USING gist (geometry);


--
-- Name: idx_location_area_large_240_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_240_place_id ON public.location_area_large_240 USING btree (place_id);


--
-- Name: idx_location_area_large_241_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_241_geometry ON public.location_area_large_241 USING gist (geometry);


--
-- Name: idx_location_area_large_241_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_241_place_id ON public.location_area_large_241 USING btree (place_id);


--
-- Name: idx_location_area_large_242_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_242_geometry ON public.location_area_large_242 USING gist (geometry);


--
-- Name: idx_location_area_large_242_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_242_place_id ON public.location_area_large_242 USING btree (place_id);


--
-- Name: idx_location_area_large_243_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_243_geometry ON public.location_area_large_243 USING gist (geometry);


--
-- Name: idx_location_area_large_243_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_243_place_id ON public.location_area_large_243 USING btree (place_id);


--
-- Name: idx_location_area_large_244_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_244_geometry ON public.location_area_large_244 USING gist (geometry);


--
-- Name: idx_location_area_large_244_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_244_place_id ON public.location_area_large_244 USING btree (place_id);


--
-- Name: idx_location_area_large_245_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_245_geometry ON public.location_area_large_245 USING gist (geometry);


--
-- Name: idx_location_area_large_245_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_245_place_id ON public.location_area_large_245 USING btree (place_id);


--
-- Name: idx_location_area_large_246_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_246_geometry ON public.location_area_large_246 USING gist (geometry);


--
-- Name: idx_location_area_large_246_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_246_place_id ON public.location_area_large_246 USING btree (place_id);


--
-- Name: idx_location_area_large_247_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_247_geometry ON public.location_area_large_247 USING gist (geometry);


--
-- Name: idx_location_area_large_247_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_247_place_id ON public.location_area_large_247 USING btree (place_id);


--
-- Name: idx_location_area_large_248_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_248_geometry ON public.location_area_large_248 USING gist (geometry);


--
-- Name: idx_location_area_large_248_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_248_place_id ON public.location_area_large_248 USING btree (place_id);


--
-- Name: idx_location_area_large_249_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_249_geometry ON public.location_area_large_249 USING gist (geometry);


--
-- Name: idx_location_area_large_249_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_249_place_id ON public.location_area_large_249 USING btree (place_id);


--
-- Name: idx_location_area_large_24_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_24_geometry ON public.location_area_large_24 USING gist (geometry);


--
-- Name: idx_location_area_large_24_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_24_place_id ON public.location_area_large_24 USING btree (place_id);


--
-- Name: idx_location_area_large_250_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_250_geometry ON public.location_area_large_250 USING gist (geometry);


--
-- Name: idx_location_area_large_250_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_250_place_id ON public.location_area_large_250 USING btree (place_id);


--
-- Name: idx_location_area_large_25_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_25_geometry ON public.location_area_large_25 USING gist (geometry);


--
-- Name: idx_location_area_large_25_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_25_place_id ON public.location_area_large_25 USING btree (place_id);


--
-- Name: idx_location_area_large_26_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_26_geometry ON public.location_area_large_26 USING gist (geometry);


--
-- Name: idx_location_area_large_26_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_26_place_id ON public.location_area_large_26 USING btree (place_id);


--
-- Name: idx_location_area_large_27_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_27_geometry ON public.location_area_large_27 USING gist (geometry);


--
-- Name: idx_location_area_large_27_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_27_place_id ON public.location_area_large_27 USING btree (place_id);


--
-- Name: idx_location_area_large_28_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_28_geometry ON public.location_area_large_28 USING gist (geometry);


--
-- Name: idx_location_area_large_28_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_28_place_id ON public.location_area_large_28 USING btree (place_id);


--
-- Name: idx_location_area_large_29_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_29_geometry ON public.location_area_large_29 USING gist (geometry);


--
-- Name: idx_location_area_large_29_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_29_place_id ON public.location_area_large_29 USING btree (place_id);


--
-- Name: idx_location_area_large_2_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_2_geometry ON public.location_area_large_2 USING gist (geometry);


--
-- Name: idx_location_area_large_2_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_2_place_id ON public.location_area_large_2 USING btree (place_id);


--
-- Name: idx_location_area_large_30_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_30_geometry ON public.location_area_large_30 USING gist (geometry);


--
-- Name: idx_location_area_large_30_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_30_place_id ON public.location_area_large_30 USING btree (place_id);


--
-- Name: idx_location_area_large_31_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_31_geometry ON public.location_area_large_31 USING gist (geometry);


--
-- Name: idx_location_area_large_31_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_31_place_id ON public.location_area_large_31 USING btree (place_id);


--
-- Name: idx_location_area_large_32_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_32_geometry ON public.location_area_large_32 USING gist (geometry);


--
-- Name: idx_location_area_large_32_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_32_place_id ON public.location_area_large_32 USING btree (place_id);


--
-- Name: idx_location_area_large_33_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_33_geometry ON public.location_area_large_33 USING gist (geometry);


--
-- Name: idx_location_area_large_33_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_33_place_id ON public.location_area_large_33 USING btree (place_id);


--
-- Name: idx_location_area_large_34_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_34_geometry ON public.location_area_large_34 USING gist (geometry);


--
-- Name: idx_location_area_large_34_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_34_place_id ON public.location_area_large_34 USING btree (place_id);


--
-- Name: idx_location_area_large_35_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_35_geometry ON public.location_area_large_35 USING gist (geometry);


--
-- Name: idx_location_area_large_35_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_35_place_id ON public.location_area_large_35 USING btree (place_id);


--
-- Name: idx_location_area_large_36_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_36_geometry ON public.location_area_large_36 USING gist (geometry);


--
-- Name: idx_location_area_large_36_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_36_place_id ON public.location_area_large_36 USING btree (place_id);


--
-- Name: idx_location_area_large_37_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_37_geometry ON public.location_area_large_37 USING gist (geometry);


--
-- Name: idx_location_area_large_37_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_37_place_id ON public.location_area_large_37 USING btree (place_id);


--
-- Name: idx_location_area_large_38_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_38_geometry ON public.location_area_large_38 USING gist (geometry);


--
-- Name: idx_location_area_large_38_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_38_place_id ON public.location_area_large_38 USING btree (place_id);


--
-- Name: idx_location_area_large_39_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_39_geometry ON public.location_area_large_39 USING gist (geometry);


--
-- Name: idx_location_area_large_39_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_39_place_id ON public.location_area_large_39 USING btree (place_id);


--
-- Name: idx_location_area_large_3_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_3_geometry ON public.location_area_large_3 USING gist (geometry);


--
-- Name: idx_location_area_large_3_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_3_place_id ON public.location_area_large_3 USING btree (place_id);


--
-- Name: idx_location_area_large_40_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_40_geometry ON public.location_area_large_40 USING gist (geometry);


--
-- Name: idx_location_area_large_40_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_40_place_id ON public.location_area_large_40 USING btree (place_id);


--
-- Name: idx_location_area_large_41_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_41_geometry ON public.location_area_large_41 USING gist (geometry);


--
-- Name: idx_location_area_large_41_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_41_place_id ON public.location_area_large_41 USING btree (place_id);


--
-- Name: idx_location_area_large_42_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_42_geometry ON public.location_area_large_42 USING gist (geometry);


--
-- Name: idx_location_area_large_42_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_42_place_id ON public.location_area_large_42 USING btree (place_id);


--
-- Name: idx_location_area_large_43_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_43_geometry ON public.location_area_large_43 USING gist (geometry);


--
-- Name: idx_location_area_large_43_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_43_place_id ON public.location_area_large_43 USING btree (place_id);


--
-- Name: idx_location_area_large_44_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_44_geometry ON public.location_area_large_44 USING gist (geometry);


--
-- Name: idx_location_area_large_44_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_44_place_id ON public.location_area_large_44 USING btree (place_id);


--
-- Name: idx_location_area_large_45_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_45_geometry ON public.location_area_large_45 USING gist (geometry);


--
-- Name: idx_location_area_large_45_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_45_place_id ON public.location_area_large_45 USING btree (place_id);


--
-- Name: idx_location_area_large_46_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_46_geometry ON public.location_area_large_46 USING gist (geometry);


--
-- Name: idx_location_area_large_46_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_46_place_id ON public.location_area_large_46 USING btree (place_id);


--
-- Name: idx_location_area_large_47_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_47_geometry ON public.location_area_large_47 USING gist (geometry);


--
-- Name: idx_location_area_large_47_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_47_place_id ON public.location_area_large_47 USING btree (place_id);


--
-- Name: idx_location_area_large_48_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_48_geometry ON public.location_area_large_48 USING gist (geometry);


--
-- Name: idx_location_area_large_48_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_48_place_id ON public.location_area_large_48 USING btree (place_id);


--
-- Name: idx_location_area_large_49_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_49_geometry ON public.location_area_large_49 USING gist (geometry);


--
-- Name: idx_location_area_large_49_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_49_place_id ON public.location_area_large_49 USING btree (place_id);


--
-- Name: idx_location_area_large_4_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_4_geometry ON public.location_area_large_4 USING gist (geometry);


--
-- Name: idx_location_area_large_4_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_4_place_id ON public.location_area_large_4 USING btree (place_id);


--
-- Name: idx_location_area_large_50_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_50_geometry ON public.location_area_large_50 USING gist (geometry);


--
-- Name: idx_location_area_large_50_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_50_place_id ON public.location_area_large_50 USING btree (place_id);


--
-- Name: idx_location_area_large_51_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_51_geometry ON public.location_area_large_51 USING gist (geometry);


--
-- Name: idx_location_area_large_51_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_51_place_id ON public.location_area_large_51 USING btree (place_id);


--
-- Name: idx_location_area_large_52_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_52_geometry ON public.location_area_large_52 USING gist (geometry);


--
-- Name: idx_location_area_large_52_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_52_place_id ON public.location_area_large_52 USING btree (place_id);


--
-- Name: idx_location_area_large_53_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_53_geometry ON public.location_area_large_53 USING gist (geometry);


--
-- Name: idx_location_area_large_53_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_53_place_id ON public.location_area_large_53 USING btree (place_id);


--
-- Name: idx_location_area_large_54_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_54_geometry ON public.location_area_large_54 USING gist (geometry);


--
-- Name: idx_location_area_large_54_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_54_place_id ON public.location_area_large_54 USING btree (place_id);


--
-- Name: idx_location_area_large_55_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_55_geometry ON public.location_area_large_55 USING gist (geometry);


--
-- Name: idx_location_area_large_55_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_55_place_id ON public.location_area_large_55 USING btree (place_id);


--
-- Name: idx_location_area_large_56_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_56_geometry ON public.location_area_large_56 USING gist (geometry);


--
-- Name: idx_location_area_large_56_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_56_place_id ON public.location_area_large_56 USING btree (place_id);


--
-- Name: idx_location_area_large_57_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_57_geometry ON public.location_area_large_57 USING gist (geometry);


--
-- Name: idx_location_area_large_57_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_57_place_id ON public.location_area_large_57 USING btree (place_id);


--
-- Name: idx_location_area_large_58_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_58_geometry ON public.location_area_large_58 USING gist (geometry);


--
-- Name: idx_location_area_large_58_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_58_place_id ON public.location_area_large_58 USING btree (place_id);


--
-- Name: idx_location_area_large_59_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_59_geometry ON public.location_area_large_59 USING gist (geometry);


--
-- Name: idx_location_area_large_59_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_59_place_id ON public.location_area_large_59 USING btree (place_id);


--
-- Name: idx_location_area_large_5_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_5_geometry ON public.location_area_large_5 USING gist (geometry);


--
-- Name: idx_location_area_large_5_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_5_place_id ON public.location_area_large_5 USING btree (place_id);


--
-- Name: idx_location_area_large_60_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_60_geometry ON public.location_area_large_60 USING gist (geometry);


--
-- Name: idx_location_area_large_60_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_60_place_id ON public.location_area_large_60 USING btree (place_id);


--
-- Name: idx_location_area_large_61_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_61_geometry ON public.location_area_large_61 USING gist (geometry);


--
-- Name: idx_location_area_large_61_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_61_place_id ON public.location_area_large_61 USING btree (place_id);


--
-- Name: idx_location_area_large_62_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_62_geometry ON public.location_area_large_62 USING gist (geometry);


--
-- Name: idx_location_area_large_62_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_62_place_id ON public.location_area_large_62 USING btree (place_id);


--
-- Name: idx_location_area_large_63_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_63_geometry ON public.location_area_large_63 USING gist (geometry);


--
-- Name: idx_location_area_large_63_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_63_place_id ON public.location_area_large_63 USING btree (place_id);


--
-- Name: idx_location_area_large_64_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_64_geometry ON public.location_area_large_64 USING gist (geometry);


--
-- Name: idx_location_area_large_64_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_64_place_id ON public.location_area_large_64 USING btree (place_id);


--
-- Name: idx_location_area_large_65_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_65_geometry ON public.location_area_large_65 USING gist (geometry);


--
-- Name: idx_location_area_large_65_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_65_place_id ON public.location_area_large_65 USING btree (place_id);


--
-- Name: idx_location_area_large_66_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_66_geometry ON public.location_area_large_66 USING gist (geometry);


--
-- Name: idx_location_area_large_66_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_66_place_id ON public.location_area_large_66 USING btree (place_id);


--
-- Name: idx_location_area_large_67_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_67_geometry ON public.location_area_large_67 USING gist (geometry);


--
-- Name: idx_location_area_large_67_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_67_place_id ON public.location_area_large_67 USING btree (place_id);


--
-- Name: idx_location_area_large_68_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_68_geometry ON public.location_area_large_68 USING gist (geometry);


--
-- Name: idx_location_area_large_68_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_68_place_id ON public.location_area_large_68 USING btree (place_id);


--
-- Name: idx_location_area_large_69_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_69_geometry ON public.location_area_large_69 USING gist (geometry);


--
-- Name: idx_location_area_large_69_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_69_place_id ON public.location_area_large_69 USING btree (place_id);


--
-- Name: idx_location_area_large_6_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_6_geometry ON public.location_area_large_6 USING gist (geometry);


--
-- Name: idx_location_area_large_6_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_6_place_id ON public.location_area_large_6 USING btree (place_id);


--
-- Name: idx_location_area_large_70_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_70_geometry ON public.location_area_large_70 USING gist (geometry);


--
-- Name: idx_location_area_large_70_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_70_place_id ON public.location_area_large_70 USING btree (place_id);


--
-- Name: idx_location_area_large_71_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_71_geometry ON public.location_area_large_71 USING gist (geometry);


--
-- Name: idx_location_area_large_71_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_71_place_id ON public.location_area_large_71 USING btree (place_id);


--
-- Name: idx_location_area_large_72_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_72_geometry ON public.location_area_large_72 USING gist (geometry);


--
-- Name: idx_location_area_large_72_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_72_place_id ON public.location_area_large_72 USING btree (place_id);


--
-- Name: idx_location_area_large_73_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_73_geometry ON public.location_area_large_73 USING gist (geometry);


--
-- Name: idx_location_area_large_73_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_73_place_id ON public.location_area_large_73 USING btree (place_id);


--
-- Name: idx_location_area_large_74_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_74_geometry ON public.location_area_large_74 USING gist (geometry);


--
-- Name: idx_location_area_large_74_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_74_place_id ON public.location_area_large_74 USING btree (place_id);


--
-- Name: idx_location_area_large_75_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_75_geometry ON public.location_area_large_75 USING gist (geometry);


--
-- Name: idx_location_area_large_75_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_75_place_id ON public.location_area_large_75 USING btree (place_id);


--
-- Name: idx_location_area_large_76_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_76_geometry ON public.location_area_large_76 USING gist (geometry);


--
-- Name: idx_location_area_large_76_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_76_place_id ON public.location_area_large_76 USING btree (place_id);


--
-- Name: idx_location_area_large_77_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_77_geometry ON public.location_area_large_77 USING gist (geometry);


--
-- Name: idx_location_area_large_77_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_77_place_id ON public.location_area_large_77 USING btree (place_id);


--
-- Name: idx_location_area_large_78_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_78_geometry ON public.location_area_large_78 USING gist (geometry);


--
-- Name: idx_location_area_large_78_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_78_place_id ON public.location_area_large_78 USING btree (place_id);


--
-- Name: idx_location_area_large_79_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_79_geometry ON public.location_area_large_79 USING gist (geometry);


--
-- Name: idx_location_area_large_79_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_79_place_id ON public.location_area_large_79 USING btree (place_id);


--
-- Name: idx_location_area_large_7_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_7_geometry ON public.location_area_large_7 USING gist (geometry);


--
-- Name: idx_location_area_large_7_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_7_place_id ON public.location_area_large_7 USING btree (place_id);


--
-- Name: idx_location_area_large_80_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_80_geometry ON public.location_area_large_80 USING gist (geometry);


--
-- Name: idx_location_area_large_80_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_80_place_id ON public.location_area_large_80 USING btree (place_id);


--
-- Name: idx_location_area_large_81_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_81_geometry ON public.location_area_large_81 USING gist (geometry);


--
-- Name: idx_location_area_large_81_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_81_place_id ON public.location_area_large_81 USING btree (place_id);


--
-- Name: idx_location_area_large_82_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_82_geometry ON public.location_area_large_82 USING gist (geometry);


--
-- Name: idx_location_area_large_82_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_82_place_id ON public.location_area_large_82 USING btree (place_id);


--
-- Name: idx_location_area_large_83_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_83_geometry ON public.location_area_large_83 USING gist (geometry);


--
-- Name: idx_location_area_large_83_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_83_place_id ON public.location_area_large_83 USING btree (place_id);


--
-- Name: idx_location_area_large_84_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_84_geometry ON public.location_area_large_84 USING gist (geometry);


--
-- Name: idx_location_area_large_84_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_84_place_id ON public.location_area_large_84 USING btree (place_id);


--
-- Name: idx_location_area_large_85_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_85_geometry ON public.location_area_large_85 USING gist (geometry);


--
-- Name: idx_location_area_large_85_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_85_place_id ON public.location_area_large_85 USING btree (place_id);


--
-- Name: idx_location_area_large_86_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_86_geometry ON public.location_area_large_86 USING gist (geometry);


--
-- Name: idx_location_area_large_86_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_86_place_id ON public.location_area_large_86 USING btree (place_id);


--
-- Name: idx_location_area_large_87_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_87_geometry ON public.location_area_large_87 USING gist (geometry);


--
-- Name: idx_location_area_large_87_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_87_place_id ON public.location_area_large_87 USING btree (place_id);


--
-- Name: idx_location_area_large_88_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_88_geometry ON public.location_area_large_88 USING gist (geometry);


--
-- Name: idx_location_area_large_88_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_88_place_id ON public.location_area_large_88 USING btree (place_id);


--
-- Name: idx_location_area_large_89_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_89_geometry ON public.location_area_large_89 USING gist (geometry);


--
-- Name: idx_location_area_large_89_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_89_place_id ON public.location_area_large_89 USING btree (place_id);


--
-- Name: idx_location_area_large_8_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_8_geometry ON public.location_area_large_8 USING gist (geometry);


--
-- Name: idx_location_area_large_8_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_8_place_id ON public.location_area_large_8 USING btree (place_id);


--
-- Name: idx_location_area_large_90_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_90_geometry ON public.location_area_large_90 USING gist (geometry);


--
-- Name: idx_location_area_large_90_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_90_place_id ON public.location_area_large_90 USING btree (place_id);


--
-- Name: idx_location_area_large_91_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_91_geometry ON public.location_area_large_91 USING gist (geometry);


--
-- Name: idx_location_area_large_91_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_91_place_id ON public.location_area_large_91 USING btree (place_id);


--
-- Name: idx_location_area_large_92_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_92_geometry ON public.location_area_large_92 USING gist (geometry);


--
-- Name: idx_location_area_large_92_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_92_place_id ON public.location_area_large_92 USING btree (place_id);


--
-- Name: idx_location_area_large_93_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_93_geometry ON public.location_area_large_93 USING gist (geometry);


--
-- Name: idx_location_area_large_93_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_93_place_id ON public.location_area_large_93 USING btree (place_id);


--
-- Name: idx_location_area_large_94_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_94_geometry ON public.location_area_large_94 USING gist (geometry);


--
-- Name: idx_location_area_large_94_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_94_place_id ON public.location_area_large_94 USING btree (place_id);


--
-- Name: idx_location_area_large_95_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_95_geometry ON public.location_area_large_95 USING gist (geometry);


--
-- Name: idx_location_area_large_95_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_95_place_id ON public.location_area_large_95 USING btree (place_id);


--
-- Name: idx_location_area_large_96_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_96_geometry ON public.location_area_large_96 USING gist (geometry);


--
-- Name: idx_location_area_large_96_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_96_place_id ON public.location_area_large_96 USING btree (place_id);


--
-- Name: idx_location_area_large_97_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_97_geometry ON public.location_area_large_97 USING gist (geometry);


--
-- Name: idx_location_area_large_97_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_97_place_id ON public.location_area_large_97 USING btree (place_id);


--
-- Name: idx_location_area_large_98_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_98_geometry ON public.location_area_large_98 USING gist (geometry);


--
-- Name: idx_location_area_large_98_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_98_place_id ON public.location_area_large_98 USING btree (place_id);


--
-- Name: idx_location_area_large_99_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_99_geometry ON public.location_area_large_99 USING gist (geometry);


--
-- Name: idx_location_area_large_99_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_99_place_id ON public.location_area_large_99 USING btree (place_id);


--
-- Name: idx_location_area_large_9_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_9_geometry ON public.location_area_large_9 USING gist (geometry);


--
-- Name: idx_location_area_large_9_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_area_large_9_place_id ON public.location_area_large_9 USING btree (place_id);


--
-- Name: idx_location_property_aux_housenumber_parent_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_property_aux_housenumber_parent_place_id ON public.location_property_aux USING btree (parent_place_id, housenumber);


--
-- Name: idx_location_property_aux_parent_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_property_aux_parent_place_id ON public.location_property_aux USING btree (parent_place_id);


--
-- Name: idx_location_property_aux_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_location_property_aux_place_id ON public.location_property_aux USING btree (place_id);


--
-- Name: idx_location_property_tiger_housenumber_parent_place_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_location_property_tiger_housenumber_parent_place_id ON public.location_property_tiger USING btree (parent_place_id);


--
-- Name: idx_location_property_tiger_place_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX idx_location_property_tiger_place_id ON public.location_property_tiger USING btree (place_id);


--
-- Name: idx_new_query_log_starttime; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_new_query_log_starttime ON public.new_query_log USING btree (starttime);


--
-- Name: idx_osmline_geometry_sector; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_osmline_geometry_sector ON public.location_property_osmline USING btree (geometry_sector);


--
-- Name: idx_osmline_linegeo; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_osmline_linegeo ON public.location_property_osmline USING gist (linegeo);


--
-- Name: idx_osmline_parent_osm_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_osmline_parent_osm_id ON public.location_property_osmline USING btree (osm_id);


--
-- Name: idx_osmline_parent_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_osmline_parent_place_id ON public.location_property_osmline USING btree (parent_place_id);


--
-- Name: idx_osmline_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE UNIQUE INDEX idx_osmline_place_id ON public.location_property_osmline USING btree (place_id);


--
-- Name: idx_place_addressline_address_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_place_addressline_address_place_id ON public.place_addressline USING btree (address_place_id);


--
-- Name: idx_place_addressline_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_place_addressline_place_id ON public.place_addressline USING btree (place_id);


--
-- Name: idx_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE UNIQUE INDEX idx_place_id ON public.placex USING btree (place_id);


--
-- Name: idx_placex_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_placex_geometry ON public.placex USING gist (geometry);


--
-- Name: idx_placex_geometry_reverse_lookuppoint; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_placex_geometry_reverse_lookuppoint ON public.placex USING gist (geometry) WHERE (((name IS NOT NULL) OR (housenumber IS NOT NULL) OR ((rank_address >= 26) AND (rank_address <= 27))) AND (class <> ALL (ARRAY['railway'::text, 'tunnel'::text, 'bridge'::text, 'man_made'::text])) AND (rank_address >= 26) AND (indexed_status = 0) AND (linked_place_id IS NULL));


--
-- Name: idx_placex_geometry_reverse_lookuppolygon; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_placex_geometry_reverse_lookuppolygon ON public.placex USING gist (geometry) WHERE ((public.st_geometrytype(geometry) = ANY (ARRAY['ST_Polygon'::text, 'ST_MultiPolygon'::text])) AND ((rank_address >= 4) AND (rank_address <= 25)) AND (type <> 'postcode'::text) AND (name IS NOT NULL) AND (indexed_status = 0) AND (linked_place_id IS NULL));


--
-- Name: idx_placex_geometry_reverse_placenode; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_placex_geometry_reverse_placenode ON public.placex USING gist (geometry) WHERE ((osm_type = 'N'::bpchar) AND ((rank_search >= 5) AND (rank_search <= 25)) AND (class = 'place'::text) AND (type <> 'postcode'::text) AND (name IS NOT NULL) AND (indexed_status = 0) AND (linked_place_id IS NULL));


--
-- Name: idx_placex_linked_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_placex_linked_place_id ON public.placex USING btree (linked_place_id) WHERE (linked_place_id IS NOT NULL);


--
-- Name: idx_placex_osmid; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_placex_osmid ON public.placex USING btree (osm_type, osm_id);


--
-- Name: idx_placex_parent_place_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_placex_parent_place_id ON public.placex USING btree (parent_place_id) WHERE (parent_place_id IS NOT NULL);


--
-- Name: idx_placex_pendingsector; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_placex_pendingsector ON public.placex USING btree (rank_search, geometry_sector) WHERE (indexed_status > 0);


--
-- Name: idx_placex_rank_address; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_placex_rank_address ON public.placex USING btree (rank_address);


--
-- Name: idx_placex_rank_search; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_placex_rank_search ON public.placex USING btree (rank_search);


--
-- Name: idx_postcode_geometry; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_postcode_geometry ON public.location_postcode USING gist (geometry);


--
-- Name: idx_postcode_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE UNIQUE INDEX idx_postcode_id ON public.location_postcode USING btree (place_id);


--
-- Name: idx_postcode_postcode; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_postcode_postcode ON public.location_postcode USING btree (postcode);


--
-- Name: idx_tiger_parent_place; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_tiger_parent_place ON public.location_property_tiger USING btree (parent_place_id);


--
-- Name: idx_tiger_place; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX idx_tiger_place ON public.location_property_tiger USING btree (place_id);


--
-- Name: idx_wikipedia_article_osm_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_wikipedia_article_osm_id ON public.wikipedia_article USING btree (osm_type, osm_id);


--
-- Name: idx_word_word_id; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_word_word_id ON public.word USING btree (word_id);


--
-- Name: idx_word_word_token; Type: INDEX; Schema: public; Owner: nominatim
--

CREATE INDEX idx_word_word_token ON public.word USING btree (word_token);


--
-- Name: place_id_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX place_id_idx ON public.place USING btree (osm_type, osm_id);


--
-- Name: location_postcode location_postcode_before_update; Type: TRIGGER; Schema: public; Owner: nominatim
--

CREATE TRIGGER location_postcode_before_update BEFORE UPDATE ON public.location_postcode FOR EACH ROW EXECUTE PROCEDURE public.postcode_update();


--
-- Name: location_property_osmline osmline_before_insert; Type: TRIGGER; Schema: public; Owner: nominatim
--

CREATE TRIGGER osmline_before_insert BEFORE INSERT ON public.location_property_osmline FOR EACH ROW EXECUTE PROCEDURE public.osmline_insert();


--
-- Name: location_property_osmline osmline_before_update; Type: TRIGGER; Schema: public; Owner: nominatim
--

CREATE TRIGGER osmline_before_update BEFORE UPDATE ON public.location_property_osmline FOR EACH ROW EXECUTE PROCEDURE public.osmline_update();


--
-- Name: placex placex_before_delete; Type: TRIGGER; Schema: public; Owner: nominatim
--

CREATE TRIGGER placex_before_delete AFTER DELETE ON public.placex FOR EACH ROW EXECUTE PROCEDURE public.placex_delete();


--
-- Name: placex placex_before_insert; Type: TRIGGER; Schema: public; Owner: nominatim
--

CREATE TRIGGER placex_before_insert BEFORE INSERT ON public.placex FOR EACH ROW EXECUTE PROCEDURE public.placex_insert();


--
-- Name: placex placex_before_update; Type: TRIGGER; Schema: public; Owner: nominatim
--

CREATE TRIGGER placex_before_update BEFORE UPDATE ON public.placex FOR EACH ROW EXECUTE PROCEDURE public.placex_update();


--
-- Name: SCHEMA public; Type: ACL; Schema: -; Owner: postgres
--

REVOKE ALL ON SCHEMA public FROM rdsadmin;
REVOKE ALL ON SCHEMA public FROM PUBLIC;
GRANT ALL ON SCHEMA public TO postgres;
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- PostgreSQL database dump complete
--

